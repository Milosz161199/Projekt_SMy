
Projekt_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008254  08008254  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08008254  08008254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800825c  0800825c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008260  08008260  00018260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08008264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200000ac  08008310  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08008310  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d32e  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fcd  00000000  00000000  0003d40a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016d0  00000000  00000000  000413d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  00042aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ad40  00000000  00000000  00043f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016b73  00000000  00000000  0006ec70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fba8b  00000000  00000000  000857e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f4  00000000  00000000  0018126e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006070  00000000  00000000  00181364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080081a8 	.word	0x080081a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	080081a8 	.word	0x080081a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e02:	463b      	mov	r3, r7
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e10:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <MX_ADC1_Init+0xb8>)
 8000e12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e16:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <MX_ADC1_Init+0xbc>)
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e5c:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e5e:	f001 fe65 	bl	8002b2c <HAL_ADC_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e68:	f001 f856 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e74:	2307      	movs	r3, #7
 8000e76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e7e:	f001 fe99 	bl	8002bb4 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e88:	f001 f846 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e8c:	2306      	movs	r3, #6
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e9a:	f001 fe8b 	bl	8002bb4 <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ea4:	f001 f838 	bl	8001f18 <Error_Handler>
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000f0 	.word	0x200000f0
 8000eb4:	40012000 	.word	0x40012000
 8000eb8:	0f000001 	.word	0x0f000001

08000ebc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a39      	ldr	r2, [pc, #228]	; (8000fc0 <HAL_ADC_MspInit+0x104>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d16b      	bne.n	8000fb6 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ede:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a38      	ldr	r2, [pc, #224]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a32      	ldr	r2, [pc, #200]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a2c      	ldr	r2, [pc, #176]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = POT1_AIN_Pin;
 8000f26:	2304      	movs	r3, #4
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT1_AIN_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <HAL_ADC_MspInit+0x10c>)
 8000f3a:	f002 fd67 	bl	8003a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT2_AIN_Pin;
 8000f3e:	2340      	movs	r3, #64	; 0x40
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f42:	2303      	movs	r3, #3
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT2_AIN_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481e      	ldr	r0, [pc, #120]	; (8000fcc <HAL_ADC_MspInit+0x110>)
 8000f52:	f002 fd5b 	bl	8003a0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f58:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <HAL_ADC_MspInit+0x118>)
 8000f5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f9c:	f002 fa2c 	bl	80033f8 <HAL_DMA_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000fa6:	f000 ffb7 	bl	8001f18 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012000 	.word	0x40012000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	20000138 	.word	0x20000138
 8000fd4:	40026410 	.word	0x40026410

08000fd8 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_DAC_Init+0x4c>)
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <MX_DAC_Init+0x50>)
 8000fea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_DAC_Init+0x4c>)
 8000fee:	f002 f936 	bl	800325e <HAL_DAC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ff8:	f000 ff8e 	bl	8001f18 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_DAC_Init+0x4c>)
 800100c:	f002 f99d 	bl	800334a <HAL_DAC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001016:	f000 ff7f 	bl	8001f18 <Error_Handler>
  }

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200001f8 	.word	0x200001f8
 8001028:	40007400 	.word	0x40007400

0800102c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a32      	ldr	r2, [pc, #200]	; (8001114 <HAL_DAC_MspInit+0xe8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d15d      	bne.n	800110a <HAL_DAC_MspInit+0xde>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800104e:	4b32      	ldr	r3, [pc, #200]	; (8001118 <HAL_DAC_MspInit+0xec>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a31      	ldr	r2, [pc, #196]	; (8001118 <HAL_DAC_MspInit+0xec>)
 8001054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <HAL_DAC_MspInit+0xec>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <HAL_DAC_MspInit+0xec>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a2b      	ldr	r2, [pc, #172]	; (8001118 <HAL_DAC_MspInit+0xec>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <HAL_DAC_MspInit+0xec>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = OSC_AOUT_Pin;
 800107e:	2310      	movs	r3, #16
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001082:	2303      	movs	r3, #3
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OSC_AOUT_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4822      	ldr	r0, [pc, #136]	; (800111c <HAL_DAC_MspInit+0xf0>)
 8001092:	f002 fcbb 	bl	8003a0c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_DAC_MspInit+0xf8>)
 800109a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 800109e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 80010a6:	2240      	movs	r2, #64	; 0x40
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 80010b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 80010ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010be:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 80010c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 80010ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ce:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 80010d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010d6:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80010de:	4810      	ldr	r0, [pc, #64]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 80010e0:	f002 f98a 	bl	80033f8 <HAL_DMA_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 80010ea:	f000 ff15 	bl	8001f18 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_DAC_MspInit+0xf4>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2036      	movs	r0, #54	; 0x36
 8001100:	f002 f877 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001104:	2036      	movs	r0, #54	; 0x36
 8001106:	f002 f890 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40007400 	.word	0x40007400
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000
 8001120:	20000198 	.word	0x20000198
 8001124:	40026088 	.word	0x40026088

08001128 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_DMA_Init+0x60>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <MX_DMA_Init+0x60>)
 8001134:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <MX_DMA_Init+0x60>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_DMA_Init+0x60>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <MX_DMA_Init+0x60>)
 800114c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <MX_DMA_Init+0x60>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2010      	movs	r0, #16
 8001164:	f002 f845 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001168:	2010      	movs	r0, #16
 800116a:	f002 f85e 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2038      	movs	r0, #56	; 0x38
 8001174:	f002 f83d 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001178:	2038      	movs	r0, #56	; 0x38
 800117a:	f002 f856 	bl	800322a <HAL_NVIC_EnableIRQ>

}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	; 0x38
 8001190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a2:	4bb3      	ldr	r3, [pc, #716]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4ab2      	ldr	r2, [pc, #712]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011a8:	f043 0310 	orr.w	r3, r3, #16
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4bb0      	ldr	r3, [pc, #704]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	623b      	str	r3, [r7, #32]
 80011b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	4bad      	ldr	r3, [pc, #692]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4aac      	ldr	r2, [pc, #688]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4baa      	ldr	r3, [pc, #680]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d2:	4ba7      	ldr	r3, [pc, #668]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4aa6      	ldr	r2, [pc, #664]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011d8:	f043 0320 	orr.w	r3, r3, #32
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4ba4      	ldr	r3, [pc, #656]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	4ba1      	ldr	r3, [pc, #644]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4aa0      	ldr	r2, [pc, #640]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b9e      	ldr	r3, [pc, #632]	; (8001470 <MX_GPIO_Init+0x2e4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b9b      	ldr	r3, [pc, #620]	; (8001470 <MX_GPIO_Init+0x2e4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a9a      	ldr	r2, [pc, #616]	; (8001470 <MX_GPIO_Init+0x2e4>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b98      	ldr	r3, [pc, #608]	; (8001470 <MX_GPIO_Init+0x2e4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b95      	ldr	r3, [pc, #596]	; (8001470 <MX_GPIO_Init+0x2e4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a94      	ldr	r2, [pc, #592]	; (8001470 <MX_GPIO_Init+0x2e4>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b92      	ldr	r3, [pc, #584]	; (8001470 <MX_GPIO_Init+0x2e4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001232:	4b8f      	ldr	r3, [pc, #572]	; (8001470 <MX_GPIO_Init+0x2e4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a8e      	ldr	r2, [pc, #568]	; (8001470 <MX_GPIO_Init+0x2e4>)
 8001238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <MX_GPIO_Init+0x2e4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	4b89      	ldr	r3, [pc, #548]	; (8001470 <MX_GPIO_Init+0x2e4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a88      	ldr	r2, [pc, #544]	; (8001470 <MX_GPIO_Init+0x2e4>)
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b86      	ldr	r3, [pc, #536]	; (8001470 <MX_GPIO_Init+0x2e4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2118      	movs	r1, #24
 8001266:	4883      	ldr	r0, [pc, #524]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001268:	f002 fd92 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISP_F_Pin|DISP_E_Pin|DISP_2_Pin|DISP_1_Pin
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8001272:	4881      	ldr	r0, [pc, #516]	; (8001478 <MX_GPIO_Init+0x2ec>)
 8001274:	f002 fd8c 	bl	8003d90 <HAL_GPIO_WritePin>
                          |DISP_3_Pin|DISP_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_H_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2149      	movs	r1, #73	; 0x49
 800127c:	487f      	ldr	r0, [pc, #508]	; (800147c <MX_GPIO_Init+0x2f0>)
 800127e:	f002 fd87 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2108      	movs	r1, #8
 8001286:	487e      	ldr	r0, [pc, #504]	; (8001480 <MX_GPIO_Init+0x2f4>)
 8001288:	f002 fd82 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 800128c:	2200      	movs	r2, #0
 800128e:	f644 4181 	movw	r1, #19585	; 0x4c81
 8001292:	487c      	ldr	r0, [pc, #496]	; (8001484 <MX_GPIO_Init+0x2f8>)
 8001294:	f002 fd7c 	bl	8003d90 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISP_A_Pin|DISP_4_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2143      	movs	r1, #67	; 0x43
 800129c:	487a      	ldr	r0, [pc, #488]	; (8001488 <MX_GPIO_Init+0x2fc>)
 800129e:	f002 fd77 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a8:	4872      	ldr	r0, [pc, #456]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80012aa:	f002 fd71 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISP_C_Pin|DISP_B_Pin|DISP_G_Pin|LCD_D4_Pin
 80012ae:	2200      	movs	r2, #0
 80012b0:	21fb      	movs	r1, #251	; 0xfb
 80012b2:	4876      	ldr	r0, [pc, #472]	; (800148c <MX_GPIO_Init+0x300>)
 80012b4:	f002 fd6c 	bl	8003d90 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 80012b8:	2318      	movs	r3, #24
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	4869      	ldr	r0, [pc, #420]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80012d0:	f002 fb9c 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012da:	4b6d      	ldr	r3, [pc, #436]	; (8001490 <MX_GPIO_Init+0x304>)
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	4864      	ldr	r0, [pc, #400]	; (800147c <MX_GPIO_Init+0x2f0>)
 80012ea:	f002 fb8f 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_F_Pin|DISP_E_Pin|DISP_D_Pin;
 80012ee:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012f4:	2311      	movs	r3, #17
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001304:	4619      	mov	r1, r3
 8001306:	485c      	ldr	r0, [pc, #368]	; (8001478 <MX_GPIO_Init+0x2ec>)
 8001308:	f002 fb80 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_2_Pin|DISP_1_Pin|DISP_3_Pin;
 800130c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	4854      	ldr	r0, [pc, #336]	; (8001478 <MX_GPIO_Init+0x2ec>)
 8001326:	f002 fb71 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_H_Pin;
 800132a:	2301      	movs	r3, #1
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800132e:	2311      	movs	r3, #17
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001332:	2301      	movs	r3, #1
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_H_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	484e      	ldr	r0, [pc, #312]	; (800147c <MX_GPIO_Init+0x2f0>)
 8001342:	f002 fb63 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001346:	2332      	movs	r3, #50	; 0x32
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001356:	230b      	movs	r3, #11
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	4846      	ldr	r0, [pc, #280]	; (800147c <MX_GPIO_Init+0x2f0>)
 8001362:	f002 fb53 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001366:	2308      	movs	r3, #8
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	483f      	ldr	r0, [pc, #252]	; (800147c <MX_GPIO_Init+0x2f0>)
 800137e:	f002 fb45 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001382:	2306      	movs	r3, #6
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001392:	230b      	movs	r3, #11
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139a:	4619      	mov	r1, r3
 800139c:	4838      	ldr	r0, [pc, #224]	; (8001480 <MX_GPIO_Init+0x2f4>)
 800139e:	f002 fb35 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 80013a2:	2308      	movs	r3, #8
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	4831      	ldr	r0, [pc, #196]	; (8001480 <MX_GPIO_Init+0x2f4>)
 80013ba:	f002 fb27 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 80013be:	2320      	movs	r3, #32
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <MX_GPIO_Init+0x308>)
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	482b      	ldr	r0, [pc, #172]	; (8001480 <MX_GPIO_Init+0x2f4>)
 80013d2:	f002 fb1b 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 80013d6:	f644 4381 	movw	r3, #19585	; 0x4c81
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	4825      	ldr	r0, [pc, #148]	; (8001484 <MX_GPIO_Init+0x2f8>)
 80013f0:	f002 fb0c 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 80013f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <MX_GPIO_Init+0x304>)
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	481b      	ldr	r0, [pc, #108]	; (8001478 <MX_GPIO_Init+0x2ec>)
 800140a:	f002 faff 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_A_Pin;
 800140e:	2301      	movs	r3, #1
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001412:	2311      	movs	r3, #17
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001416:	2301      	movs	r3, #1
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_A_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	4818      	ldr	r0, [pc, #96]	; (8001488 <MX_GPIO_Init+0x2fc>)
 8001426:	f002 faf1 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_4_Pin|USB_PowerSwitchOn_Pin;
 800142a:	2342      	movs	r3, #66	; 0x42
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	4811      	ldr	r0, [pc, #68]	; (8001488 <MX_GPIO_Init+0x2fc>)
 8001442:	f002 fae3 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 8001446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145c:	4619      	mov	r1, r3
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001460:	f002 fad4 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	e014      	b.n	8001498 <MX_GPIO_Init+0x30c>
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40021000 	.word	0x40021000
 8001478:	40021400 	.word	0x40021400
 800147c:	40020800 	.word	0x40020800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40021800 	.word	0x40021800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	10110000 	.word	0x10110000
 8001494:	10210000 	.word	0x10210000
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014a2:	230b      	movs	r3, #11
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	4851      	ldr	r0, [pc, #324]	; (80015f4 <MX_GPIO_Init+0x468>)
 80014ae:	f002 faad 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 80014b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b8:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <MX_GPIO_Init+0x46c>)
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	4619      	mov	r1, r3
 80014c6:	484b      	ldr	r0, [pc, #300]	; (80015f4 <MX_GPIO_Init+0x468>)
 80014c8:	f002 faa0 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80014cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d2:	4b4a      	ldr	r3, [pc, #296]	; (80015fc <MX_GPIO_Init+0x470>)
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	4847      	ldr	r0, [pc, #284]	; (8001600 <MX_GPIO_Init+0x474>)
 80014e2:	f002 fa93 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 80014e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	4841      	ldr	r0, [pc, #260]	; (8001600 <MX_GPIO_Init+0x474>)
 80014fc:	f002 fa86 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	483c      	ldr	r0, [pc, #240]	; (8001604 <MX_GPIO_Init+0x478>)
 8001514:	f002 fa7a 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 8001518:	2340      	movs	r3, #64	; 0x40
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001524:	2302      	movs	r3, #2
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	4836      	ldr	r0, [pc, #216]	; (8001608 <MX_GPIO_Init+0x47c>)
 8001530:	f002 fa6c 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001534:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001546:	230a      	movs	r3, #10
 8001548:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	482e      	ldr	r0, [pc, #184]	; (800160c <MX_GPIO_Init+0x480>)
 8001552:	f002 fa5b 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	4828      	ldr	r0, [pc, #160]	; (800160c <MX_GPIO_Init+0x480>)
 800156c:	f002 fa4e 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DISP_C_Pin|DISP_B_Pin|DISP_G_Pin;
 8001570:	230b      	movs	r3, #11
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001574:	2311      	movs	r3, #17
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001578:	2301      	movs	r3, #1
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	481e      	ldr	r0, [pc, #120]	; (8001600 <MX_GPIO_Init+0x474>)
 8001588:	f002 fa40 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 800158c:	23f0      	movs	r3, #240	; 0xf0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4817      	ldr	r0, [pc, #92]	; (8001600 <MX_GPIO_Init+0x474>)
 80015a4:	f002 fa32 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ba:	230b      	movs	r3, #11
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	480f      	ldr	r0, [pc, #60]	; (8001604 <MX_GPIO_Init+0x478>)
 80015c6:	f002 fa21 	bl	8003a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	2017      	movs	r0, #23
 80015d0:	f001 fe0f 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015d4:	2017      	movs	r0, #23
 80015d6:	f001 fe28 	bl	800322a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2028      	movs	r0, #40	; 0x28
 80015e0:	f001 fe07 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015e4:	2028      	movs	r0, #40	; 0x28
 80015e6:	f001 fe20 	bl	800322a <HAL_NVIC_EnableIRQ>

}
 80015ea:	bf00      	nop
 80015ec:	3738      	adds	r7, #56	; 0x38
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40020400 	.word	0x40020400
 80015f8:	10110000 	.word	0x10110000
 80015fc:	10210000 	.word	0x10210000
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40021800 	.word	0x40021800
 8001608:	40020800 	.word	0x40020800
 800160c:	40020000 	.word	0x40020000

08001610 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_I2C1_Init+0x74>)
 8001616:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <MX_I2C1_Init+0x78>)
 8001618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_I2C1_Init+0x74>)
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <MX_I2C1_Init+0x7c>)
 800161e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_I2C1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_I2C1_Init+0x74>)
 8001628:	2201      	movs	r2, #1
 800162a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_I2C1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_I2C1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_I2C1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_I2C1_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <MX_I2C1_Init+0x74>)
 800164c:	f002 fbd2 	bl	8003df4 <HAL_I2C_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001656:	f000 fc5f 	bl	8001f18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <MX_I2C1_Init+0x74>)
 800165e:	f003 f823 	bl	80046a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001668:	f000 fc56 	bl	8001f18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800166c:	2100      	movs	r1, #0
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_I2C1_Init+0x74>)
 8001670:	f003 f865 	bl	800473e <HAL_I2CEx_ConfigDigitalFilter>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800167a:	f000 fc4d 	bl	8001f18 <Error_Handler>
  }

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000020c 	.word	0x2000020c
 8001688:	40005400 	.word	0x40005400
 800168c:	20404768 	.word	0x20404768

08001690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_I2C_MspInit+0x7c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d128      	bne.n	8001704 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_I2C_MspInit+0x80>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a16      	ldr	r2, [pc, #88]	; (8001710 <HAL_I2C_MspInit+0x80>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_I2C_MspInit+0x80>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 80016ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d0:	2312      	movs	r3, #18
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016dc:	2304      	movs	r3, #4
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	480b      	ldr	r0, [pc, #44]	; (8001714 <HAL_I2C_MspInit+0x84>)
 80016e8:	f002 f990 	bl	8003a0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_I2C_MspInit+0x80>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_I2C_MspInit+0x80>)
 80016f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_I2C_MspInit+0x80>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40005400 	.word	0x40005400
 8001710:	40023800 	.word	0x40023800
 8001714:	40020400 	.word	0x40020400

08001718 <lcd_write_command>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6898      	ldr	r0, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	899b      	ldrh	r3, [r3, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	f002 fb2e 	bl	8003d90 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7d9b      	ldrb	r3, [r3, #22]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d111      	bne.n	8001760 <lcd_write_command+0x48>
  {
    lcd_write(hlcd, (command >> 4), LCD_NIB);
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2204      	movs	r2, #4
 8001744:	4619      	mov	r1, r3
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f861 	bl	800180e <lcd_write>
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2204      	movs	r2, #4
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f858 	bl	800180e <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 800175e:	e005      	b.n	800176c <lcd_write_command+0x54>
     lcd_write(hlcd, command, LCD_BYTE);
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2208      	movs	r2, #8
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f851 	bl	800180e <lcd_write>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <lcd_write_4bit_command>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_4bit_command(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7d9b      	ldrb	r3, [r3, #22]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d110      	bne.n	80017aa <lcd_write_4bit_command+0x36>
  {
	HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6898      	ldr	r0, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	899b      	ldrh	r3, [r3, #12]
 8001790:	2201      	movs	r2, #1
 8001792:	4619      	mov	r1, r3
 8001794:	f002 fafc 	bl	8003d90 <HAL_GPIO_WritePin>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2204      	movs	r2, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f832 	bl	800180e <lcd_write>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6898      	ldr	r0, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	899b      	ldrh	r3, [r3, #12]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4619      	mov	r1, r3
 80017ca:	f002 fae1 	bl	8003d90 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7d9b      	ldrb	r3, [r3, #22]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d111      	bne.n	80017fa <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2204      	movs	r2, #4
 80017de:	4619      	mov	r1, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f814 	bl	800180e <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2204      	movs	r2, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f80b 	bl	800180e <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 80017f8:	e005      	b.n	8001806 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	2208      	movs	r2, #8
 80017fe:	4619      	mov	r1, r3
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f804 	bl	800180e <lcd_write>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	70fb      	strb	r3, [r7, #3]
 800181a:	4613      	mov	r3, r2
 800181c:	70bb      	strb	r3, [r7, #2]
  for(uint8_t i = 0; i < len; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	e019      	b.n	8001858 <lcd_write+0x4a>
  {
    HAL_GPIO_WritePin(hlcd->Data_Port[i], hlcd->Data_Pin[i], (data >> i) & 0x01);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	8819      	ldrh	r1, [r3, #0]
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	fa42 f303 	asr.w	r3, r2, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	f002 fa9f 	bl	8003d90 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	3301      	adds	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	78bb      	ldrb	r3, [r7, #2]
 800185c:	429a      	cmp	r2, r3
 800185e:	d3e1      	bcc.n	8001824 <lcd_write+0x16>
  }

  HAL_GPIO_WritePin(hlcd->EN_Port, hlcd->EN_Pin, GPIO_PIN_SET);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6918      	ldr	r0, [r3, #16]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	8a9b      	ldrh	r3, [r3, #20]
 8001868:	2201      	movs	r2, #1
 800186a:	4619      	mov	r1, r3
 800186c:	f002 fa90 	bl	8003d90 <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 8001870:	2132      	movs	r1, #50	; 0x32
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f80c 	bl	8001890 <lcd_delay_us>
  HAL_GPIO_WritePin(hlcd->EN_Port, hlcd->EN_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6918      	ldr	r0, [r3, #16]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	8a9b      	ldrh	r3, [r3, #20]
 8001880:	2200      	movs	r2, #0
 8001882:	4619      	mov	r1, r3
 8001884:	f002 fa84 	bl	8003d90 <HAL_GPIO_WritePin>
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 f93d 	bl	8005b28 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 80018ae:	bf00      	nop
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d8f8      	bhi.n	80018b0 <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 f95a 	bl	8005b7c <HAL_TIM_Base_Stop>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  __LCD_Delay(hlcd, 15.2);              // >15 ms
 80018d8:	f643 315f 	movw	r1, #15199	; 0x3b5f
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ffd7 	bl	8001890 <lcd_delay_us>
  if(hlcd->Mode == LCD_4_BIT_MODE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7d9b      	ldrb	r3, [r3, #22]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d11d      	bne.n	8001926 <LCD_Init+0x56>
  {
    lcd_write_4bit_command(hlcd, 0x03); // 0011
 80018ea:	2103      	movs	r1, #3
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff41 	bl	8001774 <lcd_write_4bit_command>
    __LCD_Delay(hlcd, 4.2);             // > 4.1 ms
 80018f2:	f241 0167 	movw	r1, #4199	; 0x1067
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffca 	bl	8001890 <lcd_delay_us>
    lcd_write_4bit_command(hlcd, 0x03); // 0011
 80018fc:	2103      	movs	r1, #3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ff38 	bl	8001774 <lcd_write_4bit_command>
    __LCD_Delay(hlcd, 0.2);             // > 0.1 ms
 8001904:	21c8      	movs	r1, #200	; 0xc8
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffc2 	bl	8001890 <lcd_delay_us>
    lcd_write_4bit_command(hlcd, 0x03); // 0011
 800190c:	2103      	movs	r1, #3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ff30 	bl	8001774 <lcd_write_4bit_command>
    lcd_write_4bit_command(hlcd, 0x02); // 0010
 8001914:	2102      	movs	r1, #2
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff2c 	bl	8001774 <lcd_write_4bit_command>

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 800191c:	2128      	movs	r1, #40	; 0x28
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fefa 	bl	8001718 <lcd_write_command>
 8001924:	e01c      	b.n	8001960 <LCD_Init+0x90>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7d9b      	ldrb	r3, [r3, #22]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d118      	bne.n	8001960 <LCD_Init+0x90>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 800192e:	2130      	movs	r1, #48	; 0x30
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fef1 	bl	8001718 <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001936:	f241 0167 	movw	r1, #4199	; 0x1067
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffa8 	bl	8001890 <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8001940:	2130      	movs	r1, #48	; 0x30
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fee8 	bl	8001718 <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001948:	21c8      	movs	r1, #200	; 0xc8
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ffa0 	bl	8001890 <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8001950:	2130      	movs	r1, #48	; 0x30
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fee0 	bl	8001718 <lcd_write_command>

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 8001958:	2138      	movs	r1, #56	; 0x38
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fedc 	bl	8001718 <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 8001960:	2101      	movs	r1, #1
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fed8 	bl	8001718 <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 8001968:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff8f 	bl	8001890 <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001972:	210c      	movs	r1, #12
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff fecf 	bl	8001718 <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 800197a:	2106      	movs	r1, #6
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fecb 	bl	8001718 <lcd_write_command>

}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 800198a:	b590      	push	{r4, r7, lr}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	e00a      	b.n	80019b0 <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4619      	mov	r1, r3
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff04 	bl	80017b2 <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	3301      	adds	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	7bfc      	ldrb	r4, [r7, #15]
 80019b2:	6838      	ldr	r0, [r7, #0]
 80019b4:	f7fe fc2c 	bl	8000210 <strlen>
 80019b8:	4603      	mov	r3, r0
 80019ba:	429c      	cmp	r4, r3
 80019bc:	d3ed      	bcc.n	800199a <LCD_printStr+0x10>
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}
	...

080019c8 <LCD_SetCursor>:
 * @param[in] row  Display row (line): 0 to N
 * @param[in] col  Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_SetCursor(LCD_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
 80019d4:	4613      	mov	r3, r2
 80019d6:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <LCD_SetCursor+0x30>)
 80019dc:	5cd2      	ldrb	r2, [r2, r3]
 80019de:	78bb      	ldrb	r3, [r7, #2]
 80019e0:	4413      	add	r3, r2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3b80      	subs	r3, #128	; 0x80
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4619      	mov	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fe94 	bl	8001718 <lcd_write_command>
  #endif
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	080081fc 	.word	0x080081fc

080019fc <LCD_printf>:
 * @param[in] format Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    Variadic arguments
 * @return None
 */
void LCD_printf(LCD_HandleTypeDef * lcd, const char* format, ...)
{
 80019fc:	b40e      	push	{r1, r2, r3}
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b095      	sub	sp, #84	; 0x54
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 8001a06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a0a:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001a14:	4618      	mov	r0, r3
 8001a16:	f005 ffd7 	bl	80079c8 <vsiprintf>
  LCD_printStr(lcd, buffer);
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ffb2 	bl	800198a <LCD_printStr>
  va_end(args);
}
 8001a26:	bf00      	nop
 8001a28:	3754      	adds	r7, #84	; 0x54
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a30:	b003      	add	sp, #12
 8001a32:	4770      	bx	lr

08001a34 <HAL_TIM_PeriodElapsedCallback>:
	return sqrtf ( sum_sq_error / len );
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a44:	f040 80b8 	bne.w	8001bb8 <HAL_TIM_PeriodElapsedCallback+0x184>
	{

		// Odczyt sensora i zapis odczytanej wartości do zmiennej LED_lux
		PID_in = SENSOR_BH1750_ReadLux(&hbh1750_1);
 8001a48:	485d      	ldr	r0, [pc, #372]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001a4a:	f000 fa8f 	bl	8001f6c <SENSOR_BH1750_ReadLux>
 8001a4e:	eef0 7a40 	vmov.f32	s15, s0
 8001a52:	4b5c      	ldr	r3, [pc, #368]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001a54:	edc3 7a00 	vstr	s15, [r3]


		pid.Kp = PID_PARAM_KP;
 8001a58:	4b5b      	ldr	r3, [pc, #364]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001a5a:	4a5c      	ldr	r2, [pc, #368]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001a5c:	619a      	str	r2, [r3, #24]
		pid.Ki = PID_PARAM_KI;
 8001a5e:	4b5a      	ldr	r3, [pc, #360]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001a60:	4a5b      	ldr	r2, [pc, #364]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001a62:	61da      	str	r2, [r3, #28]
		pid.Kd = PID_PARAM_KD;
 8001a64:	4b58      	ldr	r3, [pc, #352]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]

		// wejście regulatora PID
		PID_error = set_point - PID_in;
 8001a6c:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7c:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001a7e:	edc3 7a00 	vstr	s15, [r3]
		PID_out = arm_pid_f32(&pid, PID_error);
 8001a82:	4b55      	ldr	r3, [pc, #340]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a50      	ldr	r2, [pc, #320]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001a88:	617a      	str	r2, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	ed93 7a00 	vldr	s14, [r3]
 8001a92:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a96:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001acc:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4a3d      	ldr	r2, [pc, #244]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001ae8:	6013      	str	r3, [r2, #0]
        /* Check overflow, duty cycle in percent */

		// Sygnalizacja poprawności układu regulacji
		if(PID_error <= 1.0 )
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	d80b      	bhi.n	8001b16 <HAL_TIM_PeriodElapsedCallback+0xe2>
		{
			// zakończy powodzeniem załącz diodę zieloną
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	2101      	movs	r1, #1
 8001b02:	4837      	ldr	r0, [pc, #220]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001b04:	f002 f944 	bl	8003d90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0e:	4834      	ldr	r0, [pc, #208]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001b10:	f002 f93e 	bl	8003d90 <HAL_GPIO_WritePin>
 8001b14:	e00a      	b.n	8001b2c <HAL_TIM_PeriodElapsedCallback+0xf8>
		}
		else
		{
			// w innym przypadku załącz diodę czerwoną
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b1c:	4830      	ldr	r0, [pc, #192]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001b1e:	f002 f937 	bl	8003d90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	482e      	ldr	r0, [pc, #184]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001b28:	f002 f932 	bl	8003d90 <HAL_GPIO_WritePin>
		}


		if(PID_out > 1000){
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001be4 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8001b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	dd03      	ble.n	8001b48 <HAL_TIM_PeriodElapsedCallback+0x114>
			d_PWM = 1000;
 8001b40:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001b42:	4a2a      	ldr	r2, [pc, #168]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e010      	b.n	8001b6a <HAL_TIM_PeriodElapsedCallback+0x136>
		}
		else if(PID_out < 0)
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b56:	d504      	bpl.n	8001b62 <HAL_TIM_PeriodElapsedCallback+0x12e>
		{
			d_PWM = 0;
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e003      	b.n	8001b6a <HAL_TIM_PeriodElapsedCallback+0x136>
		}
		else
		{
			d_PWM = PID_out;
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001b68:	6013      	str	r3, [r2, #0]
		}

		// sterowanie wypełnieniem diod LED
		if(BTN_State_1)
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d014      	beq.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0x168>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, d_PWM);
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b80:	ee17 2a90 	vmov	r2, s15
 8001b84:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, d_PWM);
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b94:	ee17 2a90 	vmov	r2, s15
 8001b98:	639a      	str	r2, [r3, #56]	; 0x38
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, d_PWM);
		}
	}
}
 8001b9a:	e00d      	b.n	8001bb8 <HAL_TIM_PeriodElapsedCallback+0x184>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, d_PWM);
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb2:	ee17 2a90 	vmov	r2, s15
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001bb8:	bf00      	nop
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000034 	.word	0x20000034
 8001bc4:	200000cc 	.word	0x200000cc
 8001bc8:	20000258 	.word	0x20000258
 8001bcc:	40a00000 	.word	0x40a00000
 8001bd0:	40400000 	.word	0x40400000
 8001bd4:	200000c8 	.word	0x200000c8
 8001bd8:	200000d4 	.word	0x200000d4
 8001bdc:	200000d0 	.word	0x200000d0
 8001be0:	40020400 	.word	0x40020400
 8001be4:	447a0000 	.word	0x447a0000
 8001be8:	200000d8 	.word	0x200000d8
 8001bec:	447a0000 	.word	0x447a0000
 8001bf0:	200000dc 	.word	0x200000dc
 8001bf4:	20000360 	.word	0x20000360

08001bf8 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ENC_CLK_Pin)
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c08:	d12e      	bne.n	8001c68 <HAL_GPIO_EXTI_Callback+0x70>
	{
		 if (HAL_GPIO_ReadPin(ENC_DT_GPIO_Port, ENC_DT_Pin) == GPIO_PIN_RESET)
 8001c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c0e:	4826      	ldr	r0, [pc, #152]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001c10:	f002 f8a6 	bl	8003d60 <HAL_GPIO_ReadPin>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d111      	bne.n	8001c3e <HAL_GPIO_EXTI_Callback+0x46>
		 {
			 enc_counter = (enc_counter >= enc_counter_max) ? enc_counter_max :	(enc_counter + enc_counter_step);
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <HAL_GPIO_EXTI_Callback+0xb4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b63      	cmp	r3, #99	; 0x63
 8001c20:	bf28      	it	cs
 8001c22:	2363      	movcs	r3, #99	; 0x63
 8001c24:	3301      	adds	r3, #1
 8001c26:	4a21      	ldr	r2, [pc, #132]	; (8001cac <HAL_GPIO_EXTI_Callback+0xb4>)
 8001c28:	6013      	str	r3, [r2, #0]
			 set_point = enc_counter;
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_GPIO_EXTI_Callback+0xb4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001c38:	edc3 7a00 	vstr	s15, [r3]
	}
	else if(GPIO_Pin == EX2_Btn_Pin)
	{
		LCD_show_ERROR = !LCD_show_ERROR;
	}
}
 8001c3c:	e030      	b.n	8001ca0 <HAL_GPIO_EXTI_Callback+0xa8>
			 enc_counter = (enc_counter <= enc_counter_min) ? enc_counter_min :	(enc_counter - enc_counter_step);
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_GPIO_EXTI_Callback+0xb4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_EXTI_Callback+0x56>
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_GPIO_EXTI_Callback+0xb4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_EXTI_Callback+0x58>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	4a16      	ldr	r2, [pc, #88]	; (8001cac <HAL_GPIO_EXTI_Callback+0xb4>)
 8001c52:	6013      	str	r3, [r2, #0]
			 set_point = enc_counter;
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_GPIO_EXTI_Callback+0xb4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	ee07 3a90 	vmov	s15, r3
 8001c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]
}
 8001c66:	e01b      	b.n	8001ca0 <HAL_GPIO_EXTI_Callback+0xa8>
	else if(GPIO_Pin == EX1_Btn_Pin)
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d10a      	bne.n	8001c84 <HAL_GPIO_EXTI_Callback+0x8c>
		BTN_State_1 = !BTN_State_1;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf0c      	ite	eq
 8001c76:	2301      	moveq	r3, #1
 8001c78:	2300      	movne	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001c80:	701a      	strb	r2, [r3, #0]
}
 8001c82:	e00d      	b.n	8001ca0 <HAL_GPIO_EXTI_Callback+0xa8>
	else if(GPIO_Pin == EX2_Btn_Pin)
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c8a:	d109      	bne.n	8001ca0 <HAL_GPIO_EXTI_Callback+0xa8>
		LCD_show_ERROR = !LCD_show_ERROR;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001c9e:	701a      	strb	r2, [r3, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40020c00 	.word	0x40020c00
 8001cac:	200000e0 	.word	0x200000e0
 8001cb0:	200000c8 	.word	0x200000c8
 8001cb4:	200000dc 	.word	0x200000dc
 8001cb8:	200000dd 	.word	0x200000dd

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc0:	f000 feb5 	bl	8002a2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc4:	f000 f894 	bl	8001df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc8:	f7ff fa60 	bl	800118c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ccc:	f7ff fa2c 	bl	8001128 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001cd0:	f000 fe08 	bl	80028e4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001cd4:	f000 faf4 	bl	80022c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cd8:	f000 fb40 	bl	800235c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cdc:	f000 fbd6 	bl	800248c <MX_TIM4_Init>
  MX_I2C1_Init();
 8001ce0:	f7ff fc96 	bl	8001610 <MX_I2C1_Init>
  MX_SPI4_Init();
 8001ce4:	f000 f974 	bl	8001fd0 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001ce8:	f7ff f888 	bl	8000dfc <MX_ADC1_Init>
  MX_DAC_Init();
 8001cec:	f7ff f974 	bl	8000fd8 <MX_DAC_Init>
  MX_TIM6_Init();
 8001cf0:	f000 fc6e 	bl	80025d0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001cf4:	f000 fca2 	bl	800263c <MX_TIM7_Init>
  MX_TIM5_Init();
 8001cf8:	f000 fc1c 	bl	8002534 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // Inicjalizacja sensora
  SENSOR_BH1750_Init(&hbh1750_1);
 8001cfc:	482f      	ldr	r0, [pc, #188]	; (8001dbc <main+0x100>)
 8001cfe:	f000 f90f 	bl	8001f20 <SENSOR_BH1750_Init>

  // Obsługa regulatora PID
  HAL_TIM_Base_Start_IT(&htim2);
 8001d02:	482f      	ldr	r0, [pc, #188]	; (8001dc0 <main+0x104>)
 8001d04:	f003 ff66 	bl	8005bd4 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_AUTORELOAD(&htim2, 19999);
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <main+0x104>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001d10:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d12:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <main+0x104>)
 8001d14:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001d18:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4829      	ldr	r0, [pc, #164]	; (8001dc4 <main+0x108>)
 8001d1e:	f003 ffb9 	bl	8005c94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001d22:	2104      	movs	r1, #4
 8001d24:	4827      	ldr	r0, [pc, #156]	; (8001dc4 <main+0x108>)
 8001d26:	f003 ffb5 	bl	8005c94 <HAL_TIM_PWM_Start>
  arm_pid_init_f32(&pid, 1);
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	4826      	ldr	r0, [pc, #152]	; (8001dc8 <main+0x10c>)
 8001d2e:	f005 fde5 	bl	80078fc <arm_pid_init_f32>


  // Wyświetlacz LCD
  LCD_Init(&hlcd1);
 8001d32:	4826      	ldr	r0, [pc, #152]	; (8001dcc <main+0x110>)
 8001d34:	f7ff fdcc 	bl	80018d0 <LCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(LCD_show_ERROR)
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <main+0x114>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d018      	beq.n	8001d72 <main+0xb6>
	  {
		  LCD_SetCursor(&hlcd1, 0, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2100      	movs	r1, #0
 8001d44:	4821      	ldr	r0, [pc, #132]	; (8001dcc <main+0x110>)
 8001d46:	f7ff fe3f 	bl	80019c8 <LCD_SetCursor>
		  LCD_printf(&hlcd1, "ERROR: %05d [%]  ", (uint32_t)((PID_error/enc_counter_max)*100));
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <main+0x118>)
 8001d4c:	ed93 7a00 	vldr	s14, [r3]
 8001d50:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001dd8 <main+0x11c>
 8001d54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d58:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001dd8 <main+0x11c>
 8001d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d64:	ee17 2a90 	vmov	r2, s15
 8001d68:	491c      	ldr	r1, [pc, #112]	; (8001ddc <main+0x120>)
 8001d6a:	4818      	ldr	r0, [pc, #96]	; (8001dcc <main+0x110>)
 8001d6c:	f7ff fe46 	bl	80019fc <LCD_printf>
 8001d70:	e01f      	b.n	8001db2 <main+0xf6>
	  }
	  else
	  {
		  LCD_SetCursor(&hlcd1, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	4815      	ldr	r0, [pc, #84]	; (8001dcc <main+0x110>)
 8001d78:	f7ff fe26 	bl	80019c8 <LCD_SetCursor>
		  LCD_printf(&hlcd1, "WYJ: %03d [lux]  ", (uint32_t)PID_in);
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <main+0x124>)
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d86:	ee17 2a90 	vmov	r2, s15
 8001d8a:	4916      	ldr	r1, [pc, #88]	; (8001de4 <main+0x128>)
 8001d8c:	480f      	ldr	r0, [pc, #60]	; (8001dcc <main+0x110>)
 8001d8e:	f7ff fe35 	bl	80019fc <LCD_printf>
		  LCD_SetCursor(&hlcd1, 1, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2101      	movs	r1, #1
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <main+0x110>)
 8001d98:	f7ff fe16 	bl	80019c8 <LCD_SetCursor>
		  LCD_printf(&hlcd1, "ZAD: %03d [lux]  ", (uint32_t)set_point);
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <main+0x12c>)
 8001d9e:	edd3 7a00 	vldr	s15, [r3]
 8001da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da6:	ee17 2a90 	vmov	r2, s15
 8001daa:	4910      	ldr	r1, [pc, #64]	; (8001dec <main+0x130>)
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <main+0x110>)
 8001dae:	f7ff fe25 	bl	80019fc <LCD_printf>
	  }


	  HAL_Delay(100);
 8001db2:	2064      	movs	r0, #100	; 0x64
 8001db4:	f000 fe98 	bl	8002ae8 <HAL_Delay>
	  if(LCD_show_ERROR)
 8001db8:	e7be      	b.n	8001d38 <main+0x7c>
 8001dba:	bf00      	nop
 8001dbc:	20000034 	.word	0x20000034
 8001dc0:	200003e0 	.word	0x200003e0
 8001dc4:	20000360 	.word	0x20000360
 8001dc8:	20000258 	.word	0x20000258
 8001dcc:	20000018 	.word	0x20000018
 8001dd0:	200000dd 	.word	0x200000dd
 8001dd4:	200000d4 	.word	0x200000d4
 8001dd8:	42c80000 	.word	0x42c80000
 8001ddc:	080081c0 	.word	0x080081c0
 8001de0:	200000cc 	.word	0x200000cc
 8001de4:	080081d4 	.word	0x080081d4
 8001de8:	200000c8 	.word	0x200000c8
 8001dec:	080081e8 	.word	0x080081e8

08001df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0b4      	sub	sp, #208	; 0xd0
 8001df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001dfa:	2230      	movs	r2, #48	; 0x30
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 fdc4 	bl	800798c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	2284      	movs	r2, #132	; 0x84
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f005 fdb5 	bl	800798c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e22:	f002 fcd9 	bl	80047d8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <SystemClock_Config+0x120>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a39      	ldr	r2, [pc, #228]	; (8001f10 <SystemClock_Config+0x120>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b37      	ldr	r3, [pc, #220]	; (8001f10 <SystemClock_Config+0x120>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e3e:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <SystemClock_Config+0x124>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a34      	ldr	r2, [pc, #208]	; (8001f14 <SystemClock_Config+0x124>)
 8001e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <SystemClock_Config+0x124>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e64:	2302      	movs	r3, #2
 8001e66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e72:	2304      	movs	r3, #4
 8001e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001e78:	23d8      	movs	r3, #216	; 0xd8
 8001e7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 fd02 	bl	8004898 <HAL_RCC_OscConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001e9a:	f000 f83d 	bl	8001f18 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e9e:	f002 fcab 	bl	80047f8 <HAL_PWREx_EnableOverDrive>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001ea8:	f000 f836 	bl	8001f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eac:	230f      	movs	r3, #15
 8001eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ebe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ec2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001ece:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ed2:	2107      	movs	r1, #7
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 ff83 	bl	8004de0 <HAL_RCC_ClockConfig>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001ee0:	f000 f81a 	bl	8001f18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001ee4:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001ee8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 f96a 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001f02:	f000 f809 	bl	8001f18 <Error_Handler>
  }
}
 8001f06:	bf00      	nop
 8001f08:	37d0      	adds	r7, #208	; 0xd0
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000

08001f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <Error_Handler+0x6>

08001f20 <SENSOR_BH1750_Init>:
#include "sensor_bh1750.h"


/* Public function definition */
void SENSOR_BH1750_Init(BH1750_HandleTypeDef * hbh1750)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	6078      	str	r0, [r7, #4]
	uint8_t command;

	command = BH1750_POWER_ON;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, 1 ,hbh1750->Timeout);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	791b      	ldrb	r3, [r3, #4]
 8001f34:	b299      	uxth	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	795b      	ldrb	r3, [r3, #5]
 8001f3a:	f107 020f 	add.w	r2, r7, #15
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2301      	movs	r3, #1
 8001f42:	f001 ffe7 	bl	8003f14 <HAL_I2C_Master_Transmit>

	command = BH1750_CONTINOUS_H_RES_MODE;
 8001f46:	2310      	movs	r3, #16
 8001f48:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, 1 ,hbh1750->Timeout);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	791b      	ldrb	r3, [r3, #4]
 8001f52:	b299      	uxth	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	795b      	ldrb	r3, [r3, #5]
 8001f58:	f107 020f 	add.w	r2, r7, #15
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f001 ffd8 	bl	8003f14 <HAL_I2C_Master_Transmit>
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <SENSOR_BH1750_ReadLux>:

float SENSOR_BH1750_ReadLux(BH1750_HandleTypeDef * hbh1750)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	6078      	str	r0, [r7, #4]
	float light_in_lux = 0.0;
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[2];

	//odczyt z czujnika i zapisanie danych w buforze
	HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, buffer, 2, hbh1750->Timeout);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	791b      	ldrb	r3, [r3, #4]
 8001f82:	b299      	uxth	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	795b      	ldrb	r3, [r3, #5]
 8001f88:	f107 0208 	add.w	r2, r7, #8
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	f002 f8b4 	bl	80040fc <HAL_I2C_Master_Receive>

	light_in_lux = ((buffer[0] << 8) | buffer[1])/1.2;
 8001f94:	7a3b      	ldrb	r3, [r7, #8]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	7a7a      	ldrb	r2, [r7, #9]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fae1 	bl	8000564 <__aeabi_i2d>
 8001fa2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <SENSOR_BH1750_ReadLux+0x60>)
 8001fa8:	f7fe fc70 	bl	800088c <__aeabi_ddiv>
 8001fac:	4603      	mov	r3, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	f7fe fd52 	bl	8000a5c <__aeabi_d2f>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60fb      	str	r3, [r7, #12]

	//zwaracamy wartość zmiennoprzecinkową wyrażoną w luksach
	return light_in_lux;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	ee07 3a90 	vmov	s15, r3
}
 8001fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	3ff33333 	.word	0x3ff33333

08001fd0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <MX_SPI4_Init+0x74>)
 8001fd6:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <MX_SPI4_Init+0x78>)
 8001fd8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_SPI4_Init+0x74>)
 8001fdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fe0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <MX_SPI4_Init+0x74>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_SPI4_Init+0x74>)
 8001fea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fee:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <MX_SPI4_Init+0x74>)
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <MX_SPI4_Init+0x74>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_SPI4_Init+0x74>)
 8001ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002002:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_SPI4_Init+0x74>)
 8002006:	2218      	movs	r2, #24
 8002008:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_SPI4_Init+0x74>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_SPI4_Init+0x74>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_SPI4_Init+0x74>)
 8002018:	2200      	movs	r2, #0
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_SPI4_Init+0x74>)
 800201e:	2207      	movs	r2, #7
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <MX_SPI4_Init+0x74>)
 8002024:	2200      	movs	r2, #0
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_SPI4_Init+0x74>)
 800202a:	2200      	movs	r2, #0
 800202c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_SPI4_Init+0x74>)
 8002030:	f003 fcbc 	bl	80059ac <HAL_SPI_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800203a:	f7ff ff6d 	bl	8001f18 <Error_Handler>
  }

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000027c 	.word	0x2000027c
 8002048:	40013400 	.word	0x40013400

0800204c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_SPI_MspInit+0x7c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d127      	bne.n	80020be <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <HAL_SPI_MspInit+0x80>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4a16      	ldr	r2, [pc, #88]	; (80020cc <HAL_SPI_MspInit+0x80>)
 8002074:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002078:	6453      	str	r3, [r2, #68]	; 0x44
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <HAL_SPI_MspInit+0x80>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_SPI_MspInit+0x80>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <HAL_SPI_MspInit+0x80>)
 800208c:	f043 0310 	orr.w	r3, r3, #16
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_SPI_MspInit+0x80>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 800209e:	2364      	movs	r3, #100	; 0x64
 80020a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020ae:	2305      	movs	r3, #5
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	4805      	ldr	r0, [pc, #20]	; (80020d0 <HAL_SPI_MspInit+0x84>)
 80020ba:	f001 fca7 	bl	8003a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40013400 	.word	0x40013400
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40021000 	.word	0x40021000

080020d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_MspInit+0x44>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <HAL_MspInit+0x44>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_MspInit+0x44>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_MspInit+0x44>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	4a08      	ldr	r2, [pc, #32]	; (8002118 <HAL_MspInit+0x44>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	; 0x44
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_MspInit+0x44>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800

0800211c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <NMI_Handler+0x4>

08002122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <MemManage_Handler+0x4>

0800212e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <UsageFault_Handler+0x4>

0800213a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002168:	f000 fc9e 	bl	8002aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}

08002170 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <DMA1_Stream5_IRQHandler+0x10>)
 8002176:	f001 fa0f 	bl	8003598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000198 	.word	0x20000198

08002184 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002188:	2020      	movs	r0, #32
 800218a:	f001 fe1b 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <TIM2_IRQHandler+0x10>)
 800219a:	f003 fe51 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200003e0 	.word	0x200003e0

080021a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <USART3_IRQHandler+0x10>)
 80021ae:	f004 fe19 	bl	8006de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000460 	.word	0x20000460

080021bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021c4:	f001 fdfe 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021cc:	f001 fdfa 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021d4:	f001 fdf6 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80021d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021dc:	f001 fdf2 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <TIM6_DAC_IRQHandler+0x14>)
 80021ea:	f001 f85a 	bl	80032a2 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80021ee:	4803      	ldr	r0, [pc, #12]	; (80021fc <TIM6_DAC_IRQHandler+0x18>)
 80021f0:	f003 fe26 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200001f8 	.word	0x200001f8
 80021fc:	200003a0 	.word	0x200003a0

08002200 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIM7_IRQHandler+0x10>)
 8002206:	f003 fe1b 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000420 	.word	0x20000420

08002214 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <DMA2_Stream0_IRQHandler+0x10>)
 800221a:	f001 f9bd 	bl	8003598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000138 	.word	0x20000138

08002228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <_sbrk+0x5c>)
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <_sbrk+0x60>)
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <_sbrk+0x64>)
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <_sbrk+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d207      	bcs.n	8002268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002258:	f005 fb6e 	bl	8007938 <__errno>
 800225c:	4602      	mov	r2, r0
 800225e:	230c      	movs	r3, #12
 8002260:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	e009      	b.n	800227c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <_sbrk+0x64>)
 8002278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20050000 	.word	0x20050000
 8002288:	00000400 	.word	0x00000400
 800228c:	200000e4 	.word	0x200000e4
 8002290:	200004e8 	.word	0x200004e8

08002294 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <SystemInit+0x28>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	4a07      	ldr	r2, [pc, #28]	; (80022bc <SystemInit+0x28>)
 80022a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SystemInit+0x28>)
 80022aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ae:	609a      	str	r2, [r3, #8]
#endif
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c6:	f107 0310 	add.w	r3, r7, #16
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80022de:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <MX_TIM2_Init+0x98>)
 80022e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <MX_TIM2_Init+0x98>)
 80022e8:	226b      	movs	r2, #107	; 0x6b
 80022ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <MX_TIM2_Init+0x98>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <MX_TIM2_Init+0x98>)
 80022f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80022f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MX_TIM2_Init+0x98>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <MX_TIM2_Init+0x98>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002306:	4814      	ldr	r0, [pc, #80]	; (8002358 <MX_TIM2_Init+0x98>)
 8002308:	f003 fbe2 	bl	8005ad0 <HAL_TIM_Base_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002312:	f7ff fe01 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800231a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	4619      	mov	r1, r3
 8002322:	480d      	ldr	r0, [pc, #52]	; (8002358 <MX_TIM2_Init+0x98>)
 8002324:	f003 ffc4 	bl	80062b0 <HAL_TIM_ConfigClockSource>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800232e:	f7ff fdf3 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4806      	ldr	r0, [pc, #24]	; (8002358 <MX_TIM2_Init+0x98>)
 8002340:	f004 fc56 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800234a:	f7ff fde5 	bl	8001f18 <Error_Handler>
  }

}
 800234e:	bf00      	nop
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	200003e0 	.word	0x200003e0

0800235c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	; 0x38
 8002360:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237c:	463b      	mov	r3, r7
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800238e:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <MX_TIM3_Init+0x128>)
 8002390:	4a3d      	ldr	r2, [pc, #244]	; (8002488 <MX_TIM3_Init+0x12c>)
 8002392:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8002394:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <MX_TIM3_Init+0x128>)
 8002396:	226b      	movs	r2, #107	; 0x6b
 8002398:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <MX_TIM3_Init+0x128>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80023a0:	4b38      	ldr	r3, [pc, #224]	; (8002484 <MX_TIM3_Init+0x128>)
 80023a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <MX_TIM3_Init+0x128>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <MX_TIM3_Init+0x128>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023b4:	4833      	ldr	r0, [pc, #204]	; (8002484 <MX_TIM3_Init+0x128>)
 80023b6:	f003 fb8b 	bl	8005ad0 <HAL_TIM_Base_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80023c0:	f7ff fdaa 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ce:	4619      	mov	r1, r3
 80023d0:	482c      	ldr	r0, [pc, #176]	; (8002484 <MX_TIM3_Init+0x128>)
 80023d2:	f003 ff6d 	bl	80062b0 <HAL_TIM_ConfigClockSource>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80023dc:	f7ff fd9c 	bl	8001f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023e0:	4828      	ldr	r0, [pc, #160]	; (8002484 <MX_TIM3_Init+0x128>)
 80023e2:	f003 fc21 	bl	8005c28 <HAL_TIM_PWM_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80023ec:	f7ff fd94 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f8:	f107 031c 	add.w	r3, r7, #28
 80023fc:	4619      	mov	r1, r3
 80023fe:	4821      	ldr	r0, [pc, #132]	; (8002484 <MX_TIM3_Init+0x128>)
 8002400:	f004 fbf6 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800240a:	f7ff fd85 	bl	8001f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240e:	2360      	movs	r3, #96	; 0x60
 8002410:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800241e:	463b      	mov	r3, r7
 8002420:	2200      	movs	r2, #0
 8002422:	4619      	mov	r1, r3
 8002424:	4817      	ldr	r0, [pc, #92]	; (8002484 <MX_TIM3_Init+0x128>)
 8002426:	f003 fe2b 	bl	8006080 <HAL_TIM_PWM_ConfigChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002430:	f7ff fd72 	bl	8001f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002434:	463b      	mov	r3, r7
 8002436:	2204      	movs	r2, #4
 8002438:	4619      	mov	r1, r3
 800243a:	4812      	ldr	r0, [pc, #72]	; (8002484 <MX_TIM3_Init+0x128>)
 800243c:	f003 fe20 	bl	8006080 <HAL_TIM_PWM_ConfigChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002446:	f7ff fd67 	bl	8001f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800244a:	463b      	mov	r3, r7
 800244c:	2208      	movs	r2, #8
 800244e:	4619      	mov	r1, r3
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <MX_TIM3_Init+0x128>)
 8002452:	f003 fe15 	bl	8006080 <HAL_TIM_PWM_ConfigChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800245c:	f7ff fd5c 	bl	8001f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002460:	463b      	mov	r3, r7
 8002462:	220c      	movs	r2, #12
 8002464:	4619      	mov	r1, r3
 8002466:	4807      	ldr	r0, [pc, #28]	; (8002484 <MX_TIM3_Init+0x128>)
 8002468:	f003 fe0a 	bl	8006080 <HAL_TIM_PWM_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002472:	f7ff fd51 	bl	8001f18 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <MX_TIM3_Init+0x128>)
 8002478:	f000 f9de 	bl	8002838 <HAL_TIM_MspPostInit>

}
 800247c:	bf00      	nop
 800247e:	3738      	adds	r7, #56	; 0x38
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000360 	.word	0x20000360
 8002488:	40000400 	.word	0x40000400

0800248c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	; 0x30
 8002490:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	2224      	movs	r2, #36	; 0x24
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f005 fa76 	bl	800798c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a0:	463b      	mov	r3, r7
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <MX_TIM4_Init+0xa0>)
 80024ac:	4a20      	ldr	r2, [pc, #128]	; (8002530 <MX_TIM4_Init+0xa4>)
 80024ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <MX_TIM4_Init+0xa0>)
 80024b2:	2203      	movs	r2, #3
 80024b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <MX_TIM4_Init+0xa0>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <MX_TIM4_Init+0xa0>)
 80024be:	2264      	movs	r2, #100	; 0x64
 80024c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <MX_TIM4_Init+0xa0>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <MX_TIM4_Init+0xa0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024ce:	2303      	movs	r3, #3
 80024d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80024d2:	2302      	movs	r3, #2
 80024d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024d6:	2301      	movs	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80024e2:	2302      	movs	r3, #2
 80024e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024e6:	2301      	movs	r3, #1
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80024f2:	f107 030c 	add.w	r3, r7, #12
 80024f6:	4619      	mov	r1, r3
 80024f8:	480c      	ldr	r0, [pc, #48]	; (800252c <MX_TIM4_Init+0xa0>)
 80024fa:	f003 fc0f 	bl	8005d1c <HAL_TIM_Encoder_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002504:	f7ff fd08 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002510:	463b      	mov	r3, r7
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_TIM4_Init+0xa0>)
 8002516:	f004 fb6b 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002520:	f7ff fcfa 	bl	8001f18 <Error_Handler>
  }

}
 8002524:	bf00      	nop
 8002526:	3730      	adds	r7, #48	; 0x30
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200002e0 	.word	0x200002e0
 8002530:	40000800 	.word	0x40000800

08002534 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <MX_TIM5_Init+0x94>)
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <MX_TIM5_Init+0x98>)
 8002556:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <MX_TIM5_Init+0x94>)
 800255a:	226b      	movs	r2, #107	; 0x6b
 800255c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <MX_TIM5_Init+0x94>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <MX_TIM5_Init+0x94>)
 8002566:	f04f 32ff 	mov.w	r2, #4294967295
 800256a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256c:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <MX_TIM5_Init+0x94>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <MX_TIM5_Init+0x94>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002578:	4813      	ldr	r0, [pc, #76]	; (80025c8 <MX_TIM5_Init+0x94>)
 800257a:	f003 faa9 	bl	8005ad0 <HAL_TIM_Base_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002584:	f7ff fcc8 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800258c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	4619      	mov	r1, r3
 8002594:	480c      	ldr	r0, [pc, #48]	; (80025c8 <MX_TIM5_Init+0x94>)
 8002596:	f003 fe8b 	bl	80062b0 <HAL_TIM_ConfigClockSource>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80025a0:	f7ff fcba 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4805      	ldr	r0, [pc, #20]	; (80025c8 <MX_TIM5_Init+0x94>)
 80025b2:	f004 fb1d 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80025bc:	f7ff fcac 	bl	8001f18 <Error_Handler>
  }

}
 80025c0:	bf00      	nop
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000320 	.word	0x20000320
 80025cc:	40000c00 	.word	0x40000c00

080025d0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <MX_TIM6_Init+0x64>)
 80025e2:	4a15      	ldr	r2, [pc, #84]	; (8002638 <MX_TIM6_Init+0x68>)
 80025e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <MX_TIM6_Init+0x64>)
 80025e8:	226b      	movs	r2, #107	; 0x6b
 80025ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <MX_TIM6_Init+0x64>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <MX_TIM6_Init+0x64>)
 80025f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <MX_TIM6_Init+0x64>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <MX_TIM6_Init+0x64>)
 8002602:	f003 fa65 	bl	8005ad0 <HAL_TIM_Base_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800260c:	f7ff fc84 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002610:	2320      	movs	r3, #32
 8002612:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	4619      	mov	r1, r3
 800261c:	4805      	ldr	r0, [pc, #20]	; (8002634 <MX_TIM6_Init+0x64>)
 800261e:	f004 fae7 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002628:	f7ff fc76 	bl	8001f18 <Error_Handler>
  }

}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	200003a0 	.word	0x200003a0
 8002638:	40001000 	.word	0x40001000

0800263c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <MX_TIM7_Init+0x64>)
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <MX_TIM7_Init+0x68>)
 8002650:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <MX_TIM7_Init+0x64>)
 8002654:	226b      	movs	r2, #107	; 0x6b
 8002656:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_TIM7_Init+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_TIM7_Init+0x64>)
 8002660:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002664:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_TIM7_Init+0x64>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800266c:	480c      	ldr	r0, [pc, #48]	; (80026a0 <MX_TIM7_Init+0x64>)
 800266e:	f003 fa2f 	bl	8005ad0 <HAL_TIM_Base_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002678:	f7ff fc4e 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267c:	2300      	movs	r3, #0
 800267e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	4619      	mov	r1, r3
 8002688:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_TIM7_Init+0x64>)
 800268a:	f004 fab1 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002694:	f7ff fc40 	bl	8001f18 <Error_Handler>
  }

}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000420 	.word	0x20000420
 80026a4:	40001400 	.word	0x40001400

080026a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b8:	d114      	bne.n	80026e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ba:	4b38      	ldr	r3, [pc, #224]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a37      	ldr	r2, [pc, #220]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b35      	ldr	r3, [pc, #212]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	201c      	movs	r0, #28
 80026d8:	f000 fd8b 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026dc:	201c      	movs	r0, #28
 80026de:	f000 fda4 	bl	800322a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80026e2:	e056      	b.n	8002792 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM3)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2d      	ldr	r2, [pc, #180]	; (80027a0 <HAL_TIM_Base_MspInit+0xf8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d10c      	bne.n	8002708 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ee:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a2a      	ldr	r2, [pc, #168]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	69bb      	ldr	r3, [r7, #24]
}
 8002706:	e044      	b.n	8002792 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM5)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a25      	ldr	r2, [pc, #148]	; (80027a4 <HAL_TIM_Base_MspInit+0xfc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10c      	bne.n	800272c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002712:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 8002718:	f043 0308 	orr.w	r3, r3, #8
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b1f      	ldr	r3, [pc, #124]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	697b      	ldr	r3, [r7, #20]
}
 800272a:	e032      	b.n	8002792 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM6)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <HAL_TIM_Base_MspInit+0x100>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d114      	bne.n	8002760 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 800273c:	f043 0310 	orr.w	r3, r3, #16
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	2036      	movs	r0, #54	; 0x36
 8002754:	f000 fd4d 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002758:	2036      	movs	r0, #54	; 0x36
 800275a:	f000 fd66 	bl	800322a <HAL_NVIC_EnableIRQ>
}
 800275e:	e018      	b.n	8002792 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM7)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a11      	ldr	r2, [pc, #68]	; (80027ac <HAL_TIM_Base_MspInit+0x104>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d113      	bne.n	8002792 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 8002770:	f043 0320 	orr.w	r3, r3, #32
 8002774:	6413      	str	r3, [r2, #64]	; 0x40
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_TIM_Base_MspInit+0xf4>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	2037      	movs	r0, #55	; 0x37
 8002788:	f000 fd33 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800278c:	2037      	movs	r0, #55	; 0x37
 800278e:	f000 fd4c 	bl	800322a <HAL_NVIC_EnableIRQ>
}
 8002792:	bf00      	nop
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40000c00 	.word	0x40000c00
 80027a8:	40001000 	.word	0x40001000
 80027ac:	40001400 	.word	0x40001400

080027b0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a17      	ldr	r2, [pc, #92]	; (800282c <HAL_TIM_Encoder_MspInit+0x7c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d128      	bne.n	8002824 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HAL_TIM_Encoder_MspInit+0x80>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a16      	ldr	r2, [pc, #88]	; (8002830 <HAL_TIM_Encoder_MspInit+0x80>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <HAL_TIM_Encoder_MspInit+0x80>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <HAL_TIM_Encoder_MspInit+0x80>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a10      	ldr	r2, [pc, #64]	; (8002830 <HAL_TIM_Encoder_MspInit+0x80>)
 80027f0:	f043 0308 	orr.w	r3, r3, #8
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <HAL_TIM_Encoder_MspInit+0x80>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 8002802:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002814:	2302      	movs	r3, #2
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	4805      	ldr	r0, [pc, #20]	; (8002834 <HAL_TIM_Encoder_MspInit+0x84>)
 8002820:	f001 f8f4 	bl	8003a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002824:	bf00      	nop
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40000800 	.word	0x40000800
 8002830:	40023800 	.word	0x40023800
 8002834:	40020c00 	.word	0x40020c00

08002838 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <HAL_TIM_MspPostInit+0x9c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d138      	bne.n	80028cc <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285a:	4b1f      	ldr	r3, [pc, #124]	; (80028d8 <HAL_TIM_MspPostInit+0xa0>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a1e      	ldr	r2, [pc, #120]	; (80028d8 <HAL_TIM_MspPostInit+0xa0>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <HAL_TIM_MspPostInit+0xa0>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_TIM_MspPostInit+0xa0>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_TIM_MspPostInit+0xa0>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <HAL_TIM_MspPostInit+0xa0>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin|LED_RGB_CH_R_Pin;
 800288a:	2312      	movs	r3, #18
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800289a:	2302      	movs	r3, #2
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	4619      	mov	r1, r3
 80028a4:	480d      	ldr	r0, [pc, #52]	; (80028dc <HAL_TIM_MspPostInit+0xa4>)
 80028a6:	f001 f8b1 	bl	8003a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin|LED_RGB_CH_B_Pin;
 80028aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028bc:	2302      	movs	r3, #2
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	4806      	ldr	r0, [pc, #24]	; (80028e0 <HAL_TIM_MspPostInit+0xa8>)
 80028c8:	f001 f8a0 	bl	8003a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028cc:	bf00      	nop
 80028ce:	3728      	adds	r7, #40	; 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020400 	.word	0x40020400
 80028e0:	40020800 	.word	0x40020800

080028e4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <MX_USART3_UART_Init+0x58>)
 80028ea:	4a15      	ldr	r2, [pc, #84]	; (8002940 <MX_USART3_UART_Init+0x5c>)
 80028ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <MX_USART3_UART_Init+0x58>)
 80028f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_USART3_UART_Init+0x58>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MX_USART3_UART_Init+0x58>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_USART3_UART_Init+0x58>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_USART3_UART_Init+0x58>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <MX_USART3_UART_Init+0x58>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_USART3_UART_Init+0x58>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <MX_USART3_UART_Init+0x58>)
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_USART3_UART_Init+0x58>)
 8002922:	2200      	movs	r2, #0
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_USART3_UART_Init+0x58>)
 8002928:	f004 fa0e 	bl	8006d48 <HAL_UART_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002932:	f7ff faf1 	bl	8001f18 <Error_Handler>
  }

}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000460 	.word	0x20000460
 8002940:	40004800 	.word	0x40004800

08002944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_UART_MspInit+0x8c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d130      	bne.n	80029c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_UART_MspInit+0x90>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <HAL_UART_MspInit+0x90>)
 800296c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <HAL_UART_MspInit+0x90>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <HAL_UART_MspInit+0x90>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <HAL_UART_MspInit+0x90>)
 8002984:	f043 0308 	orr.w	r3, r3, #8
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_UART_MspInit+0x90>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002996:	f44f 7340 	mov.w	r3, #768	; 0x300
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029a8:	2307      	movs	r3, #7
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	4809      	ldr	r0, [pc, #36]	; (80029d8 <HAL_UART_MspInit+0x94>)
 80029b4:	f001 f82a 	bl	8003a0c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2100      	movs	r1, #0
 80029bc:	2027      	movs	r0, #39	; 0x27
 80029be:	f000 fc18 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029c2:	2027      	movs	r0, #39	; 0x27
 80029c4:	f000 fc31 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029c8:	bf00      	nop
 80029ca:	3728      	adds	r7, #40	; 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40004800 	.word	0x40004800
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020c00 	.word	0x40020c00

080029dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029e2:	e003      	b.n	80029ec <LoopCopyDataInit>

080029e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029ea:	3104      	adds	r1, #4

080029ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029ec:	480b      	ldr	r0, [pc, #44]	; (8002a1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029f4:	d3f6      	bcc.n	80029e4 <CopyDataInit>
  ldr  r2, =_sbss
 80029f6:	4a0b      	ldr	r2, [pc, #44]	; (8002a24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029f8:	e002      	b.n	8002a00 <LoopFillZerobss>

080029fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029fc:	f842 3b04 	str.w	r3, [r2], #4

08002a00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a04:	d3f9      	bcc.n	80029fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a06:	f7ff fc45 	bl	8002294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a0a:	f004 ff9b 	bl	8007944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a0e:	f7ff f955 	bl	8001cbc <main>
  bx  lr    
 8002a12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a14:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002a18:	08008264 	.word	0x08008264
  ldr  r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a20:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 8002a24:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 8002a28:	200004e8 	.word	0x200004e8

08002a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a2c:	e7fe      	b.n	8002a2c <ADC_IRQHandler>

08002a2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a32:	2003      	movs	r0, #3
 8002a34:	f000 fbd2 	bl	80031dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f000 f805 	bl	8002a48 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002a3e:	f7ff fb49 	bl	80020d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_InitTick+0x54>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_InitTick+0x58>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fbed 	bl	8003246 <HAL_SYSTICK_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00e      	b.n	8002a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b0f      	cmp	r3, #15
 8002a7a:	d80a      	bhi.n	8002a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f000 fbb5 	bl	80031f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a88:	4a06      	ldr	r2, [pc, #24]	; (8002aa4 <HAL_InitTick+0x5c>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	2000003c 	.word	0x2000003c
 8002aa0:	20000044 	.word	0x20000044
 8002aa4:	20000040 	.word	0x20000040

08002aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_IncTick+0x20>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_IncTick+0x24>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <HAL_IncTick+0x24>)
 8002aba:	6013      	str	r3, [r2, #0]
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000044 	.word	0x20000044
 8002acc:	200004e0 	.word	0x200004e0

08002ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_GetTick+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	200004e0 	.word	0x200004e0

08002ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff ffee 	bl	8002ad0 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d005      	beq.n	8002b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_Delay+0x40>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b0e:	bf00      	nop
 8002b10:	f7ff ffde 	bl	8002ad0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d8f7      	bhi.n	8002b10 <HAL_Delay+0x28>
  {
  }
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000044 	.word	0x20000044

08002b2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e031      	b.n	8002ba6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe f9b6 	bl	8000ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d116      	bne.n	8002b98 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_ADC_Init+0x84>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f964 	bl	8002e48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f023 0303 	bic.w	r3, r3, #3
 8002b8e:	f043 0201 	orr.w	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
 8002b96:	e001      	b.n	8002b9c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	ffffeefd 	.word	0xffffeefd

08002bb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1c>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e12a      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x272>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b09      	cmp	r3, #9
 8002bde:	d93a      	bls.n	8002c56 <HAL_ADC_ConfigChannel+0xa2>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002be8:	d035      	beq.n	8002c56 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68d9      	ldr	r1, [r3, #12]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3b1e      	subs	r3, #30
 8002c00:	2207      	movs	r2, #7
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a87      	ldr	r2, [pc, #540]	; (8002e34 <HAL_ADC_ConfigChannel+0x280>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10a      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68d9      	ldr	r1, [r3, #12]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	061a      	lsls	r2, r3, #24
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c2e:	e035      	b.n	8002c9c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68d9      	ldr	r1, [r3, #12]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	4618      	mov	r0, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4403      	add	r3, r0
 8002c48:	3b1e      	subs	r3, #30
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c54:	e022      	b.n	8002c9c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6919      	ldr	r1, [r3, #16]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43da      	mvns	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	400a      	ands	r2, r1
 8002c78:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6919      	ldr	r1, [r3, #16]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4403      	add	r3, r0
 8002c92:	409a      	lsls	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	d824      	bhi.n	8002cee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b05      	subs	r3, #5
 8002cb6:	221f      	movs	r2, #31
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	3b05      	subs	r3, #5
 8002ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	635a      	str	r2, [r3, #52]	; 0x34
 8002cec:	e04c      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d824      	bhi.n	8002d40 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	3b23      	subs	r3, #35	; 0x23
 8002d08:	221f      	movs	r2, #31
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	400a      	ands	r2, r1
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	4618      	mov	r0, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	3b23      	subs	r3, #35	; 0x23
 8002d32:	fa00 f203 	lsl.w	r2, r0, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d3e:	e023      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	3b41      	subs	r3, #65	; 0x41
 8002d52:	221f      	movs	r2, #31
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43da      	mvns	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	400a      	ands	r2, r1
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	4618      	mov	r0, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	3b41      	subs	r3, #65	; 0x41
 8002d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <HAL_ADC_ConfigChannel+0x284>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10a      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x1f4>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d9a:	d105      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d9c:	4b27      	ldr	r3, [pc, #156]	; (8002e3c <HAL_ADC_ConfigChannel+0x288>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <HAL_ADC_ConfigChannel+0x288>)
 8002da2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002da6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <HAL_ADC_ConfigChannel+0x284>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d109      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x212>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b12      	cmp	r3, #18
 8002db8:	d105      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002dba:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <HAL_ADC_ConfigChannel+0x288>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <HAL_ADC_ConfigChannel+0x288>)
 8002dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dc4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <HAL_ADC_ConfigChannel+0x284>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d125      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x268>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	; (8002e34 <HAL_ADC_ConfigChannel+0x280>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <HAL_ADC_ConfigChannel+0x22e>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b11      	cmp	r3, #17
 8002de0:	d11c      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <HAL_ADC_ConfigChannel+0x288>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <HAL_ADC_ConfigChannel+0x288>)
 8002de8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <HAL_ADC_ConfigChannel+0x280>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d111      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_ADC_ConfigChannel+0x28c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a11      	ldr	r2, [pc, #68]	; (8002e44 <HAL_ADC_ConfigChannel+0x290>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0c9a      	lsrs	r2, r3, #18
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e0e:	e002      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f9      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	10000012 	.word	0x10000012
 8002e38:	40012000 	.word	0x40012000
 8002e3c:	40012300 	.word	0x40012300
 8002e40:	2000003c 	.word	0x2000003c
 8002e44:	431bde83 	.word	0x431bde83

08002e48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e50:	4b78      	ldr	r3, [pc, #480]	; (8003034 <ADC_Init+0x1ec>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a77      	ldr	r2, [pc, #476]	; (8003034 <ADC_Init+0x1ec>)
 8002e56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e5a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e5c:	4b75      	ldr	r3, [pc, #468]	; (8003034 <ADC_Init+0x1ec>)
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4973      	ldr	r1, [pc, #460]	; (8003034 <ADC_Init+0x1ec>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	021a      	lsls	r2, r3, #8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ebe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6899      	ldr	r1, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	4a58      	ldr	r2, [pc, #352]	; (8003038 <ADC_Init+0x1f0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d022      	beq.n	8002f22 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6899      	ldr	r1, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6899      	ldr	r1, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	e00f      	b.n	8002f42 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0202 	bic.w	r2, r2, #2
 8002f50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6899      	ldr	r1, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	005a      	lsls	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01b      	beq.n	8002fa8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	035a      	lsls	r2, r3, #13
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	e007      	b.n	8002fb8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	051a      	lsls	r2, r3, #20
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6899      	ldr	r1, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ffa:	025a      	lsls	r2, r3, #9
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003012:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6899      	ldr	r1, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	029a      	lsls	r2, r3, #10
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40012300 	.word	0x40012300
 8003038:	0f000001 	.word	0x0f000001

0800303c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <__NVIC_SetPriorityGrouping+0x40>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 8003066:	4313      	orrs	r3, r2
 8003068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306a:	4a04      	ldr	r2, [pc, #16]	; (800307c <__NVIC_SetPriorityGrouping+0x40>)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	60d3      	str	r3, [r2, #12]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00
 8003080:	05fa0000 	.word	0x05fa0000

08003084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <__NVIC_GetPriorityGrouping+0x18>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 0307 	and.w	r3, r3, #7
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db0b      	blt.n	80030ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4907      	ldr	r1, [pc, #28]	; (80030d8 <__NVIC_EnableIRQ+0x38>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2001      	movs	r0, #1
 80030c2:	fa00 f202 	lsl.w	r2, r0, r2
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100

080030dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db0a      	blt.n	8003106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	490c      	ldr	r1, [pc, #48]	; (8003128 <__NVIC_SetPriority+0x4c>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	440b      	add	r3, r1
 8003100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003104:	e00a      	b.n	800311c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4908      	ldr	r1, [pc, #32]	; (800312c <__NVIC_SetPriority+0x50>)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	3b04      	subs	r3, #4
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	440b      	add	r3, r1
 800311a:	761a      	strb	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f1c3 0307 	rsb	r3, r3, #7
 800314a:	2b04      	cmp	r3, #4
 800314c:	bf28      	it	cs
 800314e:	2304      	movcs	r3, #4
 8003150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3304      	adds	r3, #4
 8003156:	2b06      	cmp	r3, #6
 8003158:	d902      	bls.n	8003160 <NVIC_EncodePriority+0x30>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3b03      	subs	r3, #3
 800315e:	e000      	b.n	8003162 <NVIC_EncodePriority+0x32>
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	f04f 32ff 	mov.w	r2, #4294967295
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	401a      	ands	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003178:	f04f 31ff 	mov.w	r1, #4294967295
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43d9      	mvns	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	4313      	orrs	r3, r2
         );
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	; 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a8:	d301      	bcc.n	80031ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031aa:	2301      	movs	r3, #1
 80031ac:	e00f      	b.n	80031ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <SysTick_Config+0x40>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b6:	210f      	movs	r1, #15
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	f7ff ff8e 	bl	80030dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <SysTick_Config+0x40>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c6:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <SysTick_Config+0x40>)
 80031c8:	2207      	movs	r2, #7
 80031ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	e000e010 	.word	0xe000e010

080031dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff29 	bl	800303c <__NVIC_SetPriorityGrouping>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003204:	f7ff ff3e 	bl	8003084 <__NVIC_GetPriorityGrouping>
 8003208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	6978      	ldr	r0, [r7, #20]
 8003210:	f7ff ff8e 	bl	8003130 <NVIC_EncodePriority>
 8003214:	4602      	mov	r2, r0
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff5d 	bl	80030dc <__NVIC_SetPriority>
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff31 	bl	80030a0 <__NVIC_EnableIRQ>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ffa2 	bl	8003198 <SysTick_Config>
 8003254:	4603      	mov	r3, r0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e014      	b.n	800329a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	791b      	ldrb	r3, [r3, #4]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fd fed3 	bl	800102c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2202      	movs	r2, #2
 800328a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b8:	d118      	bne.n	80032ec <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2204      	movs	r2, #4
 80032be:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032e4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f825 	bl	8003336 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032fa:	d118      	bne.n	800332e <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2204      	movs	r2, #4
 8003300:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f043 0202 	orr.w	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003316:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003326:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f85b 	bl	80033e4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800334a:	b480      	push	{r7}
 800334c:	b087      	sub	sp, #28
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	795b      	ldrb	r3, [r3, #5]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_DAC_ConfigChannel+0x20>
 8003366:	2302      	movs	r3, #2
 8003368:	e036      	b.n	80033d8 <HAL_DAC_ConfigChannel+0x8e>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2202      	movs	r2, #2
 8003374:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800337e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4013      	ands	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6819      	ldr	r1, [r3, #0]
 80033b8:	22c0      	movs	r2, #192	; 0xc0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43da      	mvns	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	400a      	ands	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003404:	f7ff fb64 	bl	8002ad0 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e099      	b.n	8003548 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003434:	e00f      	b.n	8003456 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003436:	f7ff fb4b 	bl	8002ad0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b05      	cmp	r3, #5
 8003442:	d908      	bls.n	8003456 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2203      	movs	r2, #3
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e078      	b.n	8003548 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e8      	bne.n	8003436 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4b38      	ldr	r3, [pc, #224]	; (8003550 <HAL_DMA_Init+0x158>)
 8003470:	4013      	ands	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003482:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d107      	bne.n	80034c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	4313      	orrs	r3, r2
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0307 	bic.w	r3, r3, #7
 80034d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d117      	bne.n	800351a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00e      	beq.n	800351a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fa0b 	bl	8003918 <DMA_CheckFifoParam>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003516:	2301      	movs	r3, #1
 8003518:	e016      	b.n	8003548 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9c2 	bl	80038ac <DMA_CalcBaseAndBitshift>
 8003528:	4603      	mov	r3, r0
 800352a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	223f      	movs	r2, #63	; 0x3f
 8003532:	409a      	lsls	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	f010803f 	.word	0xf010803f

08003554 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d004      	beq.n	8003572 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2280      	movs	r2, #128	; 0x80
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e00c      	b.n	800358c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2205      	movs	r2, #5
 8003576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80035a4:	4b92      	ldr	r3, [pc, #584]	; (80037f0 <HAL_DMA_IRQHandler+0x258>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a92      	ldr	r2, [pc, #584]	; (80037f4 <HAL_DMA_IRQHandler+0x25c>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0a9b      	lsrs	r3, r3, #10
 80035b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	2208      	movs	r2, #8
 80035c4:	409a      	lsls	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01a      	beq.n	8003604 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d013      	beq.n	8003604 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0204 	bic.w	r2, r2, #4
 80035ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	2208      	movs	r2, #8
 80035f2:	409a      	lsls	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	2201      	movs	r2, #1
 800360a:	409a      	lsls	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d012      	beq.n	800363a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	2201      	movs	r2, #1
 8003628:	409a      	lsls	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	2204      	movs	r2, #4
 8003640:	409a      	lsls	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d012      	beq.n	8003670 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	2204      	movs	r2, #4
 800365e:	409a      	lsls	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003668:	f043 0204 	orr.w	r2, r3, #4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	2210      	movs	r2, #16
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d043      	beq.n	8003708 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d03c      	beq.n	8003708 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	2210      	movs	r2, #16
 8003694:	409a      	lsls	r2, r3
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d018      	beq.n	80036da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d108      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d024      	beq.n	8003708 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
 80036c6:	e01f      	b.n	8003708 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01b      	beq.n	8003708 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
 80036d8:	e016      	b.n	8003708 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d107      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0208 	bic.w	r2, r2, #8
 80036f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	2220      	movs	r2, #32
 800370e:	409a      	lsls	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 808e 	beq.w	8003836 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8086 	beq.w	8003836 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	2220      	movs	r2, #32
 8003730:	409a      	lsls	r2, r3
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b05      	cmp	r3, #5
 8003740:	d136      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0216 	bic.w	r2, r2, #22
 8003750:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003760:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <HAL_DMA_IRQHandler+0x1da>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0208 	bic.w	r2, r2, #8
 8003780:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	223f      	movs	r2, #63	; 0x3f
 8003788:	409a      	lsls	r2, r3
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d07d      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
        }
        return;
 80037ae:	e078      	b.n	80038a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01c      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d108      	bne.n	80037de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d030      	beq.n	8003836 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4798      	blx	r3
 80037dc:	e02b      	b.n	8003836 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d027      	beq.n	8003836 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
 80037ee:	e022      	b.n	8003836 <HAL_DMA_IRQHandler+0x29e>
 80037f0:	2000003c 	.word	0x2000003c
 80037f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0210 	bic.w	r2, r2, #16
 8003814:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	2b00      	cmp	r3, #0
 800383c:	d032      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d022      	beq.n	8003890 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2205      	movs	r2, #5
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3301      	adds	r3, #1
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	429a      	cmp	r2, r3
 800386c:	d307      	bcc.n	800387e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f2      	bne.n	8003862 <HAL_DMA_IRQHandler+0x2ca>
 800387c:	e000      	b.n	8003880 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800387e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
 80038a0:	e000      	b.n	80038a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80038a2:	bf00      	nop
    }
  }
}
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop

080038ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	3b10      	subs	r3, #16
 80038bc:	4a13      	ldr	r2, [pc, #76]	; (800390c <DMA_CalcBaseAndBitshift+0x60>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038c6:	4a12      	ldr	r2, [pc, #72]	; (8003910 <DMA_CalcBaseAndBitshift+0x64>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d908      	bls.n	80038ec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <DMA_CalcBaseAndBitshift+0x68>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	1d1a      	adds	r2, r3, #4
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	659a      	str	r2, [r3, #88]	; 0x58
 80038ea:	e006      	b.n	80038fa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <DMA_CalcBaseAndBitshift+0x68>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	aaaaaaab 	.word	0xaaaaaaab
 8003910:	08008218 	.word	0x08008218
 8003914:	fffffc00 	.word	0xfffffc00

08003918 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11f      	bne.n	8003972 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d855      	bhi.n	80039e4 <DMA_CheckFifoParam+0xcc>
 8003938:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <DMA_CheckFifoParam+0x28>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003951 	.word	0x08003951
 8003944:	08003963 	.word	0x08003963
 8003948:	08003951 	.word	0x08003951
 800394c:	080039e5 	.word	0x080039e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d045      	beq.n	80039e8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003960:	e042      	b.n	80039e8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800396a:	d13f      	bne.n	80039ec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003970:	e03c      	b.n	80039ec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397a:	d121      	bne.n	80039c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b03      	cmp	r3, #3
 8003980:	d836      	bhi.n	80039f0 <DMA_CheckFifoParam+0xd8>
 8003982:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <DMA_CheckFifoParam+0x70>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	08003999 	.word	0x08003999
 800398c:	0800399f 	.word	0x0800399f
 8003990:	08003999 	.word	0x08003999
 8003994:	080039b1 	.word	0x080039b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      break;
 800399c:	e02f      	b.n	80039fe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d024      	beq.n	80039f4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ae:	e021      	b.n	80039f4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039b8:	d11e      	bne.n	80039f8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039be:	e01b      	b.n	80039f8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d902      	bls.n	80039cc <DMA_CheckFifoParam+0xb4>
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d003      	beq.n	80039d2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039ca:	e018      	b.n	80039fe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      break;
 80039d0:	e015      	b.n	80039fe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
      break;
 80039e2:	e00b      	b.n	80039fc <DMA_CheckFifoParam+0xe4>
      break;
 80039e4:	bf00      	nop
 80039e6:	e00a      	b.n	80039fe <DMA_CheckFifoParam+0xe6>
      break;
 80039e8:	bf00      	nop
 80039ea:	e008      	b.n	80039fe <DMA_CheckFifoParam+0xe6>
      break;
 80039ec:	bf00      	nop
 80039ee:	e006      	b.n	80039fe <DMA_CheckFifoParam+0xe6>
      break;
 80039f0:	bf00      	nop
 80039f2:	e004      	b.n	80039fe <DMA_CheckFifoParam+0xe6>
      break;
 80039f4:	bf00      	nop
 80039f6:	e002      	b.n	80039fe <DMA_CheckFifoParam+0xe6>
      break;   
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <DMA_CheckFifoParam+0xe6>
      break;
 80039fc:	bf00      	nop
    }
  } 
  
  return status; 
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	; 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e175      	b.n	8003d18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	f040 8164 	bne.w	8003d12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d00b      	beq.n	8003a6a <HAL_GPIO_Init+0x5e>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d007      	beq.n	8003a6a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a5e:	2b11      	cmp	r3, #17
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b12      	cmp	r3, #18
 8003a68:	d130      	bne.n	8003acc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	2203      	movs	r2, #3
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 0201 	and.w	r2, r3, #1
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x100>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b12      	cmp	r3, #18
 8003b0a:	d123      	bne.n	8003b54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	08da      	lsrs	r2, r3, #3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3208      	adds	r2, #8
 8003b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	220f      	movs	r2, #15
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	08da      	lsrs	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3208      	adds	r2, #8
 8003b4e:	69b9      	ldr	r1, [r7, #24]
 8003b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0203 	and.w	r2, r3, #3
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80be 	beq.w	8003d12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_GPIO_Init+0x320>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	4a64      	ldr	r2, [pc, #400]	; (8003d2c <HAL_GPIO_Init+0x320>)
 8003b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba2:	4b62      	ldr	r3, [pc, #392]	; (8003d2c <HAL_GPIO_Init+0x320>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bae:	4a60      	ldr	r2, [pc, #384]	; (8003d30 <HAL_GPIO_Init+0x324>)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a57      	ldr	r2, [pc, #348]	; (8003d34 <HAL_GPIO_Init+0x328>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d037      	beq.n	8003c4a <HAL_GPIO_Init+0x23e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a56      	ldr	r2, [pc, #344]	; (8003d38 <HAL_GPIO_Init+0x32c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d031      	beq.n	8003c46 <HAL_GPIO_Init+0x23a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a55      	ldr	r2, [pc, #340]	; (8003d3c <HAL_GPIO_Init+0x330>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02b      	beq.n	8003c42 <HAL_GPIO_Init+0x236>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a54      	ldr	r2, [pc, #336]	; (8003d40 <HAL_GPIO_Init+0x334>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d025      	beq.n	8003c3e <HAL_GPIO_Init+0x232>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a53      	ldr	r2, [pc, #332]	; (8003d44 <HAL_GPIO_Init+0x338>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01f      	beq.n	8003c3a <HAL_GPIO_Init+0x22e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a52      	ldr	r2, [pc, #328]	; (8003d48 <HAL_GPIO_Init+0x33c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d019      	beq.n	8003c36 <HAL_GPIO_Init+0x22a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a51      	ldr	r2, [pc, #324]	; (8003d4c <HAL_GPIO_Init+0x340>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_GPIO_Init+0x226>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a50      	ldr	r2, [pc, #320]	; (8003d50 <HAL_GPIO_Init+0x344>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00d      	beq.n	8003c2e <HAL_GPIO_Init+0x222>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4f      	ldr	r2, [pc, #316]	; (8003d54 <HAL_GPIO_Init+0x348>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <HAL_GPIO_Init+0x21e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a4e      	ldr	r2, [pc, #312]	; (8003d58 <HAL_GPIO_Init+0x34c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_GPIO_Init+0x21a>
 8003c22:	2309      	movs	r3, #9
 8003c24:	e012      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c26:	230a      	movs	r3, #10
 8003c28:	e010      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	e00e      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c2e:	2307      	movs	r3, #7
 8003c30:	e00c      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c32:	2306      	movs	r3, #6
 8003c34:	e00a      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c36:	2305      	movs	r3, #5
 8003c38:	e008      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	e006      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e004      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e002      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	f002 0203 	and.w	r2, r2, #3
 8003c52:	0092      	lsls	r2, r2, #2
 8003c54:	4093      	lsls	r3, r2
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c5c:	4934      	ldr	r1, [pc, #208]	; (8003d30 <HAL_GPIO_Init+0x324>)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	089b      	lsrs	r3, r3, #2
 8003c62:	3302      	adds	r3, #2
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c6a:	4b3c      	ldr	r3, [pc, #240]	; (8003d5c <HAL_GPIO_Init+0x350>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c8e:	4a33      	ldr	r2, [pc, #204]	; (8003d5c <HAL_GPIO_Init+0x350>)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c94:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <HAL_GPIO_Init+0x350>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cb8:	4a28      	ldr	r2, [pc, #160]	; (8003d5c <HAL_GPIO_Init+0x350>)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cbe:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <HAL_GPIO_Init+0x350>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ce2:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <HAL_GPIO_Init+0x350>)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ce8:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <HAL_GPIO_Init+0x350>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d0c:	4a13      	ldr	r2, [pc, #76]	; (8003d5c <HAL_GPIO_Init+0x350>)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3301      	adds	r3, #1
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	2b0f      	cmp	r3, #15
 8003d1c:	f67f ae86 	bls.w	8003a2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d20:	bf00      	nop
 8003d22:	3724      	adds	r7, #36	; 0x24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40013800 	.word	0x40013800
 8003d34:	40020000 	.word	0x40020000
 8003d38:	40020400 	.word	0x40020400
 8003d3c:	40020800 	.word	0x40020800
 8003d40:	40020c00 	.word	0x40020c00
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40021400 	.word	0x40021400
 8003d4c:	40021800 	.word	0x40021800
 8003d50:	40021c00 	.word	0x40021c00
 8003d54:	40022000 	.word	0x40022000
 8003d58:	40022400 	.word	0x40022400
 8003d5c:	40013c00 	.word	0x40013c00

08003d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	887b      	ldrh	r3, [r7, #2]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	e001      	b.n	8003d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003da0:	787b      	ldrb	r3, [r7, #1]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003dac:	e003      	b.n	8003db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003dae:	887b      	ldrh	r3, [r7, #2]
 8003db0:	041a      	lsls	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	619a      	str	r2, [r3, #24]
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dda:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd ff08 	bl	8001bf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40013c00 	.word	0x40013c00

08003df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e07f      	b.n	8003f06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fd fc38 	bl	8001690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2224      	movs	r2, #36	; 0x24
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	e006      	b.n	8003e7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d104      	bne.n	8003e8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <HAL_I2C_Init+0x11c>)
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	ea42 0103 	orr.w	r1, r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	021a      	lsls	r2, r3, #8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69d9      	ldr	r1, [r3, #28]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	02008000 	.word	0x02008000

08003f14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	460b      	mov	r3, r1
 8003f22:	817b      	strh	r3, [r7, #10]
 8003f24:	4613      	mov	r3, r2
 8003f26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	f040 80da 	bne.w	80040ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_I2C_Master_Transmit+0x30>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e0d3      	b.n	80040ec <HAL_I2C_Master_Transmit+0x1d8>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f4c:	f7fe fdc0 	bl	8002ad0 <HAL_GetTick>
 8003f50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	2319      	movs	r3, #25
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f9e6 	bl	8004330 <I2C_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0be      	b.n	80040ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2221      	movs	r2, #33	; 0x21
 8003f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2210      	movs	r2, #16
 8003f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	893a      	ldrh	r2, [r7, #8]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2bff      	cmp	r3, #255	; 0xff
 8003f9e:	d90e      	bls.n	8003fbe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	22ff      	movs	r2, #255	; 0xff
 8003fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	8979      	ldrh	r1, [r7, #10]
 8003fae:	4b51      	ldr	r3, [pc, #324]	; (80040f4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fb48 	bl	800464c <I2C_TransferConfig>
 8003fbc:	e06c      	b.n	8004098 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	8979      	ldrh	r1, [r7, #10]
 8003fd0:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fb37 	bl	800464c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003fde:	e05b      	b.n	8004098 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	6a39      	ldr	r1, [r7, #32]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f9e3 	bl	80043b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e07b      	b.n	80040ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d034      	beq.n	8004098 <HAL_I2C_Master_Transmit+0x184>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	2b00      	cmp	r3, #0
 8004034:	d130      	bne.n	8004098 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	2200      	movs	r2, #0
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f975 	bl	8004330 <I2C_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e04d      	b.n	80040ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	2bff      	cmp	r3, #255	; 0xff
 8004058:	d90e      	bls.n	8004078 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	22ff      	movs	r2, #255	; 0xff
 800405e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	b2da      	uxtb	r2, r3
 8004066:	8979      	ldrh	r1, [r7, #10]
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 faeb 	bl	800464c <I2C_TransferConfig>
 8004076:	e00f      	b.n	8004098 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	b2da      	uxtb	r2, r3
 8004088:	8979      	ldrh	r1, [r7, #10]
 800408a:	2300      	movs	r3, #0
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fada 	bl	800464c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d19e      	bne.n	8003fe0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	6a39      	ldr	r1, [r7, #32]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f9c2 	bl	8004430 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e01a      	b.n	80040ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2220      	movs	r2, #32
 80040bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80040ca:	400b      	ands	r3, r1
 80040cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e000      	b.n	80040ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
  }
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	80002000 	.word	0x80002000
 80040f8:	fe00e800 	.word	0xfe00e800

080040fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	461a      	mov	r2, r3
 8004108:	460b      	mov	r3, r1
 800410a:	817b      	strh	r3, [r7, #10]
 800410c:	4613      	mov	r3, r2
 800410e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b20      	cmp	r3, #32
 800411a:	f040 80db 	bne.w	80042d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_I2C_Master_Receive+0x30>
 8004128:	2302      	movs	r3, #2
 800412a:	e0d4      	b.n	80042d6 <HAL_I2C_Master_Receive+0x1da>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004134:	f7fe fccc 	bl	8002ad0 <HAL_GetTick>
 8004138:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	2319      	movs	r3, #25
 8004140:	2201      	movs	r2, #1
 8004142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f8f2 	bl	8004330 <I2C_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e0bf      	b.n	80042d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2222      	movs	r2, #34	; 0x22
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2210      	movs	r2, #16
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	893a      	ldrh	r2, [r7, #8]
 8004176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	2bff      	cmp	r3, #255	; 0xff
 8004186:	d90e      	bls.n	80041a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	22ff      	movs	r2, #255	; 0xff
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	b2da      	uxtb	r2, r3
 8004194:	8979      	ldrh	r1, [r7, #10]
 8004196:	4b52      	ldr	r3, [pc, #328]	; (80042e0 <HAL_I2C_Master_Receive+0x1e4>)
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fa54 	bl	800464c <I2C_TransferConfig>
 80041a4:	e06d      	b.n	8004282 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	8979      	ldrh	r1, [r7, #10]
 80041b8:	4b49      	ldr	r3, [pc, #292]	; (80042e0 <HAL_I2C_Master_Receive+0x1e4>)
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fa43 	bl	800464c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80041c6:	e05c      	b.n	8004282 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	6a39      	ldr	r1, [r7, #32]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f96b 	bl	80044a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e07c      	b.n	80042d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d034      	beq.n	8004282 <HAL_I2C_Master_Receive+0x186>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	d130      	bne.n	8004282 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	2200      	movs	r2, #0
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f880 	bl	8004330 <I2C_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e04d      	b.n	80042d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	2bff      	cmp	r3, #255	; 0xff
 8004242:	d90e      	bls.n	8004262 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	22ff      	movs	r2, #255	; 0xff
 8004248:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	b2da      	uxtb	r2, r3
 8004250:	8979      	ldrh	r1, [r7, #10]
 8004252:	2300      	movs	r3, #0
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f9f6 	bl	800464c <I2C_TransferConfig>
 8004260:	e00f      	b.n	8004282 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	b2da      	uxtb	r2, r3
 8004272:	8979      	ldrh	r1, [r7, #10]
 8004274:	2300      	movs	r3, #0
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f9e5 	bl	800464c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d19d      	bne.n	80041c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	6a39      	ldr	r1, [r7, #32]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f8cd 	bl	8004430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e01a      	b.n	80042d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2220      	movs	r2, #32
 80042a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <HAL_I2C_Master_Receive+0x1e8>)
 80042b4:	400b      	ands	r3, r1
 80042b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	80002400 	.word	0x80002400
 80042e4:	fe00e800 	.word	0xfe00e800

080042e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d103      	bne.n	8004306 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d007      	beq.n	8004324 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	619a      	str	r2, [r3, #24]
  }
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004340:	e022      	b.n	8004388 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004348:	d01e      	beq.n	8004388 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434a:	f7fe fbc1 	bl	8002ad0 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d302      	bcc.n	8004360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d113      	bne.n	8004388 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e00f      	b.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4013      	ands	r3, r2
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	429a      	cmp	r2, r3
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d0cd      	beq.n	8004342 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043bc:	e02c      	b.n	8004418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f8dc 	bl	8004580 <I2C_IsAcknowledgeFailed>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e02a      	b.n	8004428 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d01e      	beq.n	8004418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043da:	f7fe fb79 	bl	8002ad0 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d113      	bne.n	8004418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e007      	b.n	8004428 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d1cb      	bne.n	80043be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800443c:	e028      	b.n	8004490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f89c 	bl	8004580 <I2C_IsAcknowledgeFailed>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e026      	b.n	80044a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004452:	f7fe fb3d 	bl	8002ad0 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	429a      	cmp	r2, r3
 8004460:	d302      	bcc.n	8004468 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d113      	bne.n	8004490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	f043 0220 	orr.w	r2, r3, #32
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e007      	b.n	80044a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b20      	cmp	r3, #32
 800449c:	d1cf      	bne.n	800443e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b4:	e055      	b.n	8004562 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f860 	bl	8004580 <I2C_IsAcknowledgeFailed>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e053      	b.n	8004572 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d129      	bne.n	800452c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d105      	bne.n	80044f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e03f      	b.n	8004572 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2220      	movs	r2, #32
 80044f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4b1d      	ldr	r3, [pc, #116]	; (800457c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004506:	400b      	ands	r3, r1
 8004508:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e022      	b.n	8004572 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452c:	f7fe fad0 	bl	8002ad0 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	429a      	cmp	r2, r3
 800453a:	d302      	bcc.n	8004542 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10f      	bne.n	8004562 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	f043 0220 	orr.w	r2, r3, #32
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e007      	b.n	8004572 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b04      	cmp	r3, #4
 800456e:	d1a2      	bne.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	fe00e800 	.word	0xfe00e800

08004580 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b10      	cmp	r3, #16
 8004598:	d151      	bne.n	800463e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800459a:	e022      	b.n	80045e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a2:	d01e      	beq.n	80045e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a4:	f7fe fa94 	bl	8002ad0 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d302      	bcc.n	80045ba <I2C_IsAcknowledgeFailed+0x3a>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d113      	bne.n	80045e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f043 0220 	orr.w	r2, r3, #32
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e02e      	b.n	8004640 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d1d5      	bne.n	800459c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2210      	movs	r2, #16
 80045f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2220      	movs	r2, #32
 80045fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff fe71 	bl	80042e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <I2C_IsAcknowledgeFailed+0xc8>)
 8004612:	400b      	ands	r3, r1
 8004614:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461a:	f043 0204 	orr.w	r2, r3, #4
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	fe00e800 	.word	0xfe00e800

0800464c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	460b      	mov	r3, r1
 8004658:	817b      	strh	r3, [r7, #10]
 800465a:	4613      	mov	r3, r2
 800465c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	0d5b      	lsrs	r3, r3, #21
 8004668:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800466c:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <I2C_TransferConfig+0x58>)
 800466e:	430b      	orrs	r3, r1
 8004670:	43db      	mvns	r3, r3
 8004672:	ea02 0103 	and.w	r1, r2, r3
 8004676:	897b      	ldrh	r3, [r7, #10]
 8004678:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800467c:	7a7b      	ldrb	r3, [r7, #9]
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	431a      	orrs	r2, r3
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	431a      	orrs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	03ff63ff 	.word	0x03ff63ff

080046a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	d138      	bne.n	8004730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e032      	b.n	8004732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	; 0x24
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0201 	bic.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6819      	ldr	r1, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	e000      	b.n	8004732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004730:	2302      	movs	r3, #2
  }
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b20      	cmp	r3, #32
 8004752:	d139      	bne.n	80047c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800475e:	2302      	movs	r3, #2
 8004760:	e033      	b.n	80047ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2224      	movs	r2, #36	; 0x24
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e000      	b.n	80047ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e6:	6013      	str	r3, [r2, #0]
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40007000 	.word	0x40007000

080047f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004802:	4b23      	ldr	r3, [pc, #140]	; (8004890 <HAL_PWREx_EnableOverDrive+0x98>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	4a22      	ldr	r2, [pc, #136]	; (8004890 <HAL_PWREx_EnableOverDrive+0x98>)
 8004808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480c:	6413      	str	r3, [r2, #64]	; 0x40
 800480e:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_PWREx_EnableOverDrive+0x98>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004826:	f7fe f953 	bl	8002ad0 <HAL_GetTick>
 800482a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800482c:	e009      	b.n	8004842 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800482e:	f7fe f94f 	bl	8002ad0 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800483c:	d901      	bls.n	8004842 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e022      	b.n	8004888 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004842:	4b14      	ldr	r3, [pc, #80]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484e:	d1ee      	bne.n	800482e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800485a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800485c:	f7fe f938 	bl	8002ad0 <HAL_GetTick>
 8004860:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004862:	e009      	b.n	8004878 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004864:	f7fe f934 	bl	8002ad0 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004872:	d901      	bls.n	8004878 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e007      	b.n	8004888 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004884:	d1ee      	bne.n	8004864 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40023800 	.word	0x40023800
 8004894:	40007000 	.word	0x40007000

08004898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80048a0:	2300      	movs	r3, #0
 80048a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e291      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8087 	beq.w	80049ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048bc:	4b96      	ldr	r3, [pc, #600]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d00c      	beq.n	80048e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c8:	4b93      	ldr	r3, [pc, #588]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 030c 	and.w	r3, r3, #12
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d112      	bne.n	80048fa <HAL_RCC_OscConfig+0x62>
 80048d4:	4b90      	ldr	r3, [pc, #576]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e0:	d10b      	bne.n	80048fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e2:	4b8d      	ldr	r3, [pc, #564]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d06c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x130>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d168      	bne.n	80049c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e26b      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004902:	d106      	bne.n	8004912 <HAL_RCC_OscConfig+0x7a>
 8004904:	4b84      	ldr	r3, [pc, #528]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a83      	ldr	r2, [pc, #524]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800490a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	e02e      	b.n	8004970 <HAL_RCC_OscConfig+0xd8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0x9c>
 800491a:	4b7f      	ldr	r3, [pc, #508]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a7e      	ldr	r2, [pc, #504]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b7c      	ldr	r3, [pc, #496]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a7b      	ldr	r2, [pc, #492]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800492c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e01d      	b.n	8004970 <HAL_RCC_OscConfig+0xd8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0xc0>
 800493e:	4b76      	ldr	r3, [pc, #472]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a75      	ldr	r2, [pc, #468]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b73      	ldr	r3, [pc, #460]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a72      	ldr	r2, [pc, #456]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e00b      	b.n	8004970 <HAL_RCC_OscConfig+0xd8>
 8004958:	4b6f      	ldr	r3, [pc, #444]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a6e      	ldr	r2, [pc, #440]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800495e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b6c      	ldr	r3, [pc, #432]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a6b      	ldr	r2, [pc, #428]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800496a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004978:	f7fe f8aa 	bl	8002ad0 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004980:	f7fe f8a6 	bl	8002ad0 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e21f      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b61      	ldr	r3, [pc, #388]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0xe8>
 800499e:	e014      	b.n	80049ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fe f896 	bl	8002ad0 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fe f892 	bl	8002ad0 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e20b      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ba:	4b57      	ldr	r3, [pc, #348]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x110>
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d069      	beq.n	8004aaa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049d6:	4b50      	ldr	r3, [pc, #320]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b4d      	ldr	r3, [pc, #308]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d11c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x190>
 80049ee:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fa:	4b47      	ldr	r3, [pc, #284]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_RCC_OscConfig+0x17a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e1df      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b41      	ldr	r3, [pc, #260]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	493d      	ldr	r1, [pc, #244]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	e040      	b.n	8004aaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d023      	beq.n	8004a78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a30:	4b39      	ldr	r3, [pc, #228]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a38      	ldr	r2, [pc, #224]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fe f848 	bl	8002ad0 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a44:	f7fe f844 	bl	8002ad0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e1bd      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a56:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4929      	ldr	r1, [pc, #164]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]
 8004a76:	e018      	b.n	8004aaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a78:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a26      	ldr	r2, [pc, #152]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fe f824 	bl	8002ad0 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a8c:	f7fe f820 	bl	8002ad0 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e199      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d038      	beq.n	8004b28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d019      	beq.n	8004af2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004abe:	4b16      	ldr	r3, [pc, #88]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac2:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aca:	f7fe f801 	bl	8002ad0 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad2:	f7fd fffd 	bl	8002ad0 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e176      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x23a>
 8004af0:	e01a      	b.n	8004b28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af2:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af6:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afe:	f7fd ffe7 	bl	8002ad0 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b06:	f7fd ffe3 	bl	8002ad0 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d903      	bls.n	8004b1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e15c      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
 8004b18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1c:	4b91      	ldr	r3, [pc, #580]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ee      	bne.n	8004b06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80a4 	beq.w	8004c7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b36:	4b8b      	ldr	r3, [pc, #556]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10d      	bne.n	8004b5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b42:	4b88      	ldr	r3, [pc, #544]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	4a87      	ldr	r2, [pc, #540]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4e:	4b85      	ldr	r3, [pc, #532]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5e:	4b82      	ldr	r3, [pc, #520]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d118      	bne.n	8004b9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b6a:	4b7f      	ldr	r3, [pc, #508]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a7e      	ldr	r2, [pc, #504]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b76:	f7fd ffab 	bl	8002ad0 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7e:	f7fd ffa7 	bl	8002ad0 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b64      	cmp	r3, #100	; 0x64
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e120      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b90:	4b75      	ldr	r3, [pc, #468]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x31a>
 8004ba4:	4b6f      	ldr	r3, [pc, #444]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	4a6e      	ldr	r2, [pc, #440]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb0:	e02d      	b.n	8004c0e <HAL_RCC_OscConfig+0x376>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x33c>
 8004bba:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	4a69      	ldr	r2, [pc, #420]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc6:	4b67      	ldr	r3, [pc, #412]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a66      	ldr	r2, [pc, #408]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004bcc:	f023 0304 	bic.w	r3, r3, #4
 8004bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd2:	e01c      	b.n	8004c0e <HAL_RCC_OscConfig+0x376>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b05      	cmp	r3, #5
 8004bda:	d10c      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x35e>
 8004bdc:	4b61      	ldr	r3, [pc, #388]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4a60      	ldr	r2, [pc, #384]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004be2:	f043 0304 	orr.w	r3, r3, #4
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70
 8004be8:	4b5e      	ldr	r3, [pc, #376]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	4a5d      	ldr	r2, [pc, #372]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf4:	e00b      	b.n	8004c0e <HAL_RCC_OscConfig+0x376>
 8004bf6:	4b5b      	ldr	r3, [pc, #364]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	4a5a      	ldr	r2, [pc, #360]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004bfc:	f023 0301 	bic.w	r3, r3, #1
 8004c00:	6713      	str	r3, [r2, #112]	; 0x70
 8004c02:	4b58      	ldr	r3, [pc, #352]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	4a57      	ldr	r2, [pc, #348]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004c08:	f023 0304 	bic.w	r3, r3, #4
 8004c0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d015      	beq.n	8004c42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c16:	f7fd ff5b 	bl	8002ad0 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1c:	e00a      	b.n	8004c34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1e:	f7fd ff57 	bl	8002ad0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e0ce      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c34:	4b4b      	ldr	r3, [pc, #300]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0ee      	beq.n	8004c1e <HAL_RCC_OscConfig+0x386>
 8004c40:	e014      	b.n	8004c6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c42:	f7fd ff45 	bl	8002ad0 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c48:	e00a      	b.n	8004c60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4a:	f7fd ff41 	bl	8002ad0 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e0b8      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c60:	4b40      	ldr	r3, [pc, #256]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ee      	bne.n	8004c4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d105      	bne.n	8004c7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c72:	4b3c      	ldr	r3, [pc, #240]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	4a3b      	ldr	r2, [pc, #236]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80a4 	beq.w	8004dd0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c88:	4b36      	ldr	r3, [pc, #216]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 030c 	and.w	r3, r3, #12
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d06b      	beq.n	8004d6c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d149      	bne.n	8004d30 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9c:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a30      	ldr	r2, [pc, #192]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fd ff12 	bl	8002ad0 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fd ff0e 	bl	8002ad0 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e087      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc2:	4b28      	ldr	r3, [pc, #160]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69da      	ldr	r2, [r3, #28]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	019b      	lsls	r3, r3, #6
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	085b      	lsrs	r3, r3, #1
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	061b      	lsls	r3, r3, #24
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004cf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cfa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fd fee2 	bl	8002ad0 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fd fede 	bl	8002ad0 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e057      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x478>
 8004d2e:	e04f      	b.n	8004dd0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a0b      	ldr	r2, [pc, #44]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fd fec8 	bl	8002ad0 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fd fec4 	bl	8002ad0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e03d      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d56:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x4ac>
 8004d62:	e035      	b.n	8004dd0 <HAL_RCC_OscConfig+0x538>
 8004d64:	40023800 	.word	0x40023800
 8004d68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <HAL_RCC_OscConfig+0x544>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d028      	beq.n	8004dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d121      	bne.n	8004dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d11a      	bne.n	8004dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004da2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d111      	bne.n	8004dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	085b      	lsrs	r3, r3, #1
 8004db4:	3b01      	subs	r3, #1
 8004db6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d107      	bne.n	8004dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d001      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40023800 	.word	0x40023800

08004de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0d0      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004df8:	4b6a      	ldr	r3, [pc, #424]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d910      	bls.n	8004e28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e06:	4b67      	ldr	r3, [pc, #412]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 020f 	bic.w	r2, r3, #15
 8004e0e:	4965      	ldr	r1, [pc, #404]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b63      	ldr	r3, [pc, #396]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0b8      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e40:	4b59      	ldr	r3, [pc, #356]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a58      	ldr	r2, [pc, #352]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e58:	4b53      	ldr	r3, [pc, #332]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a52      	ldr	r2, [pc, #328]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e64:	4b50      	ldr	r3, [pc, #320]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	494d      	ldr	r1, [pc, #308]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d040      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d107      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8a:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d115      	bne.n	8004ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e07f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d107      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea2:	4b41      	ldr	r3, [pc, #260]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d109      	bne.n	8004ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e073      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb2:	4b3d      	ldr	r3, [pc, #244]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e06b      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ec2:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f023 0203 	bic.w	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4936      	ldr	r1, [pc, #216]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed4:	f7fd fdfc 	bl	8002ad0 <HAL_GetTick>
 8004ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eda:	e00a      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004edc:	f7fd fdf8 	bl	8002ad0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e053      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef2:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 020c 	and.w	r2, r3, #12
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d1eb      	bne.n	8004edc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f04:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d210      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f12:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 020f 	bic.w	r2, r3, #15
 8004f1a:	4922      	ldr	r1, [pc, #136]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f22:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e032      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4916      	ldr	r1, [pc, #88]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	490e      	ldr	r1, [pc, #56]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f72:	f000 f821 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8004f76:	4601      	mov	r1, r0
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	4a0a      	ldr	r2, [pc, #40]	; (8004fac <HAL_RCC_ClockConfig+0x1cc>)
 8004f84:	5cd3      	ldrb	r3, [r2, r3]
 8004f86:	fa21 f303 	lsr.w	r3, r1, r3
 8004f8a:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <HAL_RCC_ClockConfig+0x1d0>)
 8004f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <HAL_RCC_ClockConfig+0x1d4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fd fd58 	bl	8002a48 <HAL_InitTick>

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023c00 	.word	0x40023c00
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	08008200 	.word	0x08008200
 8004fb0:	2000003c 	.word	0x2000003c
 8004fb4:	20000040 	.word	0x20000040

08004fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fce:	4b63      	ldr	r3, [pc, #396]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d007      	beq.n	8004fea <HAL_RCC_GetSysClockFreq+0x32>
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d008      	beq.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x38>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f040 80b4 	bne.w	800514c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fe4:	4b5e      	ldr	r3, [pc, #376]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004fe6:	60bb      	str	r3, [r7, #8]
      break;
 8004fe8:	e0b3      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fea:	4b5e      	ldr	r3, [pc, #376]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004fec:	60bb      	str	r3, [r7, #8]
      break;
 8004fee:	e0b0      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff0:	4b5a      	ldr	r3, [pc, #360]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ffa:	4b58      	ldr	r3, [pc, #352]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d04a      	beq.n	800509c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005006:	4b55      	ldr	r3, [pc, #340]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	099b      	lsrs	r3, r3, #6
 800500c:	f04f 0400 	mov.w	r4, #0
 8005010:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	ea03 0501 	and.w	r5, r3, r1
 800501c:	ea04 0602 	and.w	r6, r4, r2
 8005020:	4629      	mov	r1, r5
 8005022:	4632      	mov	r2, r6
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	f04f 0400 	mov.w	r4, #0
 800502c:	0154      	lsls	r4, r2, #5
 800502e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005032:	014b      	lsls	r3, r1, #5
 8005034:	4619      	mov	r1, r3
 8005036:	4622      	mov	r2, r4
 8005038:	1b49      	subs	r1, r1, r5
 800503a:	eb62 0206 	sbc.w	r2, r2, r6
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	f04f 0400 	mov.w	r4, #0
 8005046:	0194      	lsls	r4, r2, #6
 8005048:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800504c:	018b      	lsls	r3, r1, #6
 800504e:	1a5b      	subs	r3, r3, r1
 8005050:	eb64 0402 	sbc.w	r4, r4, r2
 8005054:	f04f 0100 	mov.w	r1, #0
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	00e2      	lsls	r2, r4, #3
 800505e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005062:	00d9      	lsls	r1, r3, #3
 8005064:	460b      	mov	r3, r1
 8005066:	4614      	mov	r4, r2
 8005068:	195b      	adds	r3, r3, r5
 800506a:	eb44 0406 	adc.w	r4, r4, r6
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	0262      	lsls	r2, r4, #9
 8005078:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800507c:	0259      	lsls	r1, r3, #9
 800507e:	460b      	mov	r3, r1
 8005080:	4614      	mov	r4, r2
 8005082:	4618      	mov	r0, r3
 8005084:	4621      	mov	r1, r4
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f04f 0400 	mov.w	r4, #0
 800508c:	461a      	mov	r2, r3
 800508e:	4623      	mov	r3, r4
 8005090:	f7fb fd34 	bl	8000afc <__aeabi_uldivmod>
 8005094:	4603      	mov	r3, r0
 8005096:	460c      	mov	r4, r1
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	e049      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800509c:	4b2f      	ldr	r3, [pc, #188]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	099b      	lsrs	r3, r3, #6
 80050a2:	f04f 0400 	mov.w	r4, #0
 80050a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	ea03 0501 	and.w	r5, r3, r1
 80050b2:	ea04 0602 	and.w	r6, r4, r2
 80050b6:	4629      	mov	r1, r5
 80050b8:	4632      	mov	r2, r6
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	f04f 0400 	mov.w	r4, #0
 80050c2:	0154      	lsls	r4, r2, #5
 80050c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050c8:	014b      	lsls	r3, r1, #5
 80050ca:	4619      	mov	r1, r3
 80050cc:	4622      	mov	r2, r4
 80050ce:	1b49      	subs	r1, r1, r5
 80050d0:	eb62 0206 	sbc.w	r2, r2, r6
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	f04f 0400 	mov.w	r4, #0
 80050dc:	0194      	lsls	r4, r2, #6
 80050de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050e2:	018b      	lsls	r3, r1, #6
 80050e4:	1a5b      	subs	r3, r3, r1
 80050e6:	eb64 0402 	sbc.w	r4, r4, r2
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	00e2      	lsls	r2, r4, #3
 80050f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050f8:	00d9      	lsls	r1, r3, #3
 80050fa:	460b      	mov	r3, r1
 80050fc:	4614      	mov	r4, r2
 80050fe:	195b      	adds	r3, r3, r5
 8005100:	eb44 0406 	adc.w	r4, r4, r6
 8005104:	f04f 0100 	mov.w	r1, #0
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	02a2      	lsls	r2, r4, #10
 800510e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005112:	0299      	lsls	r1, r3, #10
 8005114:	460b      	mov	r3, r1
 8005116:	4614      	mov	r4, r2
 8005118:	4618      	mov	r0, r3
 800511a:	4621      	mov	r1, r4
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f04f 0400 	mov.w	r4, #0
 8005122:	461a      	mov	r2, r3
 8005124:	4623      	mov	r3, r4
 8005126:	f7fb fce9 	bl	8000afc <__aeabi_uldivmod>
 800512a:	4603      	mov	r3, r0
 800512c:	460c      	mov	r4, r1
 800512e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	3301      	adds	r3, #1
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	60bb      	str	r3, [r7, #8]
      break;
 800514a:	e002      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800514e:	60bb      	str	r3, [r7, #8]
      break;
 8005150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005152:	68bb      	ldr	r3, [r7, #8]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800515c:	40023800 	.word	0x40023800
 8005160:	00f42400 	.word	0x00f42400
 8005164:	007a1200 	.word	0x007a1200

08005168 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_RCC_GetHCLKFreq+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	2000003c 	.word	0x2000003c

08005180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005184:	f7ff fff0 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8005188:	4601      	mov	r1, r0
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0a9b      	lsrs	r3, r3, #10
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4a03      	ldr	r2, [pc, #12]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005196:	5cd3      	ldrb	r3, [r2, r3]
 8005198:	fa21 f303 	lsr.w	r3, r1, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40023800 	.word	0x40023800
 80051a4:	08008210 	.word	0x08008210

080051a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051ac:	f7ff ffdc 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80051b0:	4601      	mov	r1, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0b5b      	lsrs	r3, r3, #13
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4a03      	ldr	r2, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051be:	5cd3      	ldrb	r3, [r2, r3]
 80051c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	08008210 	.word	0x08008210

080051d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d012      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051f8:	4b69      	ldr	r3, [pc, #420]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	4a68      	ldr	r2, [pc, #416]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005202:	6093      	str	r3, [r2, #8]
 8005204:	4b66      	ldr	r3, [pc, #408]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	4964      	ldr	r1, [pc, #400]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800521a:	2301      	movs	r3, #1
 800521c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d017      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800522a:	4b5d      	ldr	r3, [pc, #372]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005230:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	4959      	ldr	r1, [pc, #356]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005248:	d101      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800524a:	2301      	movs	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005256:	2301      	movs	r3, #1
 8005258:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d017      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005266:	4b4e      	ldr	r3, [pc, #312]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	494a      	ldr	r1, [pc, #296]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005284:	d101      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005286:	2301      	movs	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005292:	2301      	movs	r3, #1
 8005294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80052a2:	2301      	movs	r3, #1
 80052a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 808b 	beq.w	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052b4:	4b3a      	ldr	r3, [pc, #232]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	4a39      	ldr	r2, [pc, #228]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052be:	6413      	str	r3, [r2, #64]	; 0x40
 80052c0:	4b37      	ldr	r3, [pc, #220]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052cc:	4b35      	ldr	r3, [pc, #212]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a34      	ldr	r2, [pc, #208]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d8:	f7fd fbfa 	bl	8002ad0 <HAL_GetTick>
 80052dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e0:	f7fd fbf6 	bl	8002ad0 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b64      	cmp	r3, #100	; 0x64
 80052ec:	d901      	bls.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e355      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052f2:	4b2c      	ldr	r3, [pc, #176]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052fe:	4b28      	ldr	r3, [pc, #160]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005306:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d035      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	429a      	cmp	r2, r3
 800531a:	d02e      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800531c:	4b20      	ldr	r3, [pc, #128]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005324:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005326:	4b1e      	ldr	r3, [pc, #120]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532a:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005330:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005332:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	4a1a      	ldr	r2, [pc, #104]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800533e:	4a18      	ldr	r2, [pc, #96]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005344:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d114      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fd fbbe 	bl	8002ad0 <HAL_GetTick>
 8005354:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005356:	e00a      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005358:	f7fd fbba 	bl	8002ad0 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	; 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e317      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0ee      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005386:	d111      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005396:	400b      	ands	r3, r1
 8005398:	4901      	ldr	r1, [pc, #4]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
 800539e:	e00b      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80053a0:	40023800 	.word	0x40023800
 80053a4:	40007000 	.word	0x40007000
 80053a8:	0ffffcff 	.word	0x0ffffcff
 80053ac:	4bb0      	ldr	r3, [pc, #704]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4aaf      	ldr	r2, [pc, #700]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053b6:	6093      	str	r3, [r2, #8]
 80053b8:	4bad      	ldr	r3, [pc, #692]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c4:	49aa      	ldr	r1, [pc, #680]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d010      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053d6:	4ba6      	ldr	r3, [pc, #664]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053dc:	4aa4      	ldr	r2, [pc, #656]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80053e6:	4ba2      	ldr	r3, [pc, #648]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	499f      	ldr	r1, [pc, #636]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005404:	4b9a      	ldr	r3, [pc, #616]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005412:	4997      	ldr	r1, [pc, #604]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005426:	4b92      	ldr	r3, [pc, #584]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005434:	498e      	ldr	r1, [pc, #568]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005448:	4b89      	ldr	r3, [pc, #548]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005456:	4986      	ldr	r1, [pc, #536]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800546a:	4b81      	ldr	r3, [pc, #516]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	497d      	ldr	r1, [pc, #500]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800548c:	4b78      	ldr	r3, [pc, #480]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	f023 0203 	bic.w	r2, r3, #3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	4975      	ldr	r1, [pc, #468]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054ae:	4b70      	ldr	r3, [pc, #448]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b4:	f023 020c 	bic.w	r2, r3, #12
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054bc:	496c      	ldr	r1, [pc, #432]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054d0:	4b67      	ldr	r3, [pc, #412]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054de:	4964      	ldr	r1, [pc, #400]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054f2:	4b5f      	ldr	r3, [pc, #380]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005500:	495b      	ldr	r1, [pc, #364]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005514:	4b56      	ldr	r3, [pc, #344]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	4953      	ldr	r1, [pc, #332]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005536:	4b4e      	ldr	r3, [pc, #312]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005544:	494a      	ldr	r1, [pc, #296]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005558:	4b45      	ldr	r3, [pc, #276]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005566:	4942      	ldr	r1, [pc, #264]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800557a:	4b3d      	ldr	r3, [pc, #244]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005580:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005588:	4939      	ldr	r1, [pc, #228]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800559c:	4b34      	ldr	r3, [pc, #208]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055aa:	4931      	ldr	r1, [pc, #196]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d011      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80055be:	4b2c      	ldr	r3, [pc, #176]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055cc:	4928      	ldr	r1, [pc, #160]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055dc:	d101      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80055ee:	2301      	movs	r3, #1
 80055f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055fe:	4b1c      	ldr	r3, [pc, #112]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005604:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560c:	4918      	ldr	r1, [pc, #96]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005620:	4b13      	ldr	r3, [pc, #76]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005626:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005630:	490f      	ldr	r1, [pc, #60]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d005      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005646:	f040 80d8 	bne.w	80057fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800564a:	4b09      	ldr	r3, [pc, #36]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a08      	ldr	r2, [pc, #32]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005650:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005656:	f7fd fa3b 	bl	8002ad0 <HAL_GetTick>
 800565a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800565c:	e00a      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800565e:	f7fd fa37 	bl	8002ad0 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b64      	cmp	r3, #100	; 0x64
 800566a:	d903      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e196      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005670:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005674:	4b6c      	ldr	r3, [pc, #432]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1ee      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d021      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005690:	2b00      	cmp	r3, #0
 8005692:	d11d      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005694:	4b64      	ldr	r3, [pc, #400]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800569a:	0c1b      	lsrs	r3, r3, #16
 800569c:	f003 0303 	and.w	r3, r3, #3
 80056a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056a2:	4b61      	ldr	r3, [pc, #388]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a8:	0e1b      	lsrs	r3, r3, #24
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	019a      	lsls	r2, r3, #6
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	041b      	lsls	r3, r3, #16
 80056ba:	431a      	orrs	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	061b      	lsls	r3, r3, #24
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	071b      	lsls	r3, r3, #28
 80056c8:	4957      	ldr	r1, [pc, #348]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d02e      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056fa:	d129      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056fc:	4b4a      	ldr	r3, [pc, #296]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005702:	0c1b      	lsrs	r3, r3, #16
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800570a:	4b47      	ldr	r3, [pc, #284]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800570c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005710:	0f1b      	lsrs	r3, r3, #28
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	019a      	lsls	r2, r3, #6
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	041b      	lsls	r3, r3, #16
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	061b      	lsls	r3, r3, #24
 800572a:	431a      	orrs	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	071b      	lsls	r3, r3, #28
 8005730:	493d      	ldr	r1, [pc, #244]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005738:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800573a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800573e:	f023 021f 	bic.w	r2, r3, #31
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	3b01      	subs	r3, #1
 8005748:	4937      	ldr	r1, [pc, #220]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01d      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800575c:	4b32      	ldr	r3, [pc, #200]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800575e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005762:	0e1b      	lsrs	r3, r3, #24
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800576a:	4b2f      	ldr	r3, [pc, #188]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800576c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005770:	0f1b      	lsrs	r3, r3, #28
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	019a      	lsls	r2, r3, #6
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	431a      	orrs	r2, r3
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	431a      	orrs	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	071b      	lsls	r3, r3, #28
 8005790:	4925      	ldr	r1, [pc, #148]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d011      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	019a      	lsls	r2, r3, #6
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	061b      	lsls	r3, r3, #24
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	071b      	lsls	r3, r3, #28
 80057c0:	4919      	ldr	r1, [pc, #100]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057c8:	4b17      	ldr	r3, [pc, #92]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a16      	ldr	r2, [pc, #88]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d4:	f7fd f97c 	bl	8002ad0 <HAL_GetTick>
 80057d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057dc:	f7fd f978 	bl	8002ad0 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b64      	cmp	r3, #100	; 0x64
 80057e8:	d901      	bls.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e0d7      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057ee:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f0      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	f040 80cd 	bne.w	800599c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a08      	ldr	r2, [pc, #32]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800580c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580e:	f7fd f95f 	bl	8002ad0 <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005814:	e00a      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005816:	f7fd f95b 	bl	8002ad0 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b64      	cmp	r3, #100	; 0x64
 8005822:	d903      	bls.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e0ba      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005828:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800582c:	4b5e      	ldr	r3, [pc, #376]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005838:	d0ed      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005856:	2b00      	cmp	r3, #0
 8005858:	d02e      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d12a      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005862:	4b51      	ldr	r3, [pc, #324]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005868:	0c1b      	lsrs	r3, r3, #16
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005870:	4b4d      	ldr	r3, [pc, #308]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	0f1b      	lsrs	r3, r3, #28
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	019a      	lsls	r2, r3, #6
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	061b      	lsls	r3, r3, #24
 8005890:	431a      	orrs	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	071b      	lsls	r3, r3, #28
 8005896:	4944      	ldr	r1, [pc, #272]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800589e:	4b42      	ldr	r3, [pc, #264]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80058a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	3b01      	subs	r3, #1
 80058ae:	021b      	lsls	r3, r3, #8
 80058b0:	493d      	ldr	r1, [pc, #244]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d022      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058cc:	d11d      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058ce:	4b36      	ldr	r3, [pc, #216]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d4:	0e1b      	lsrs	r3, r3, #24
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058dc:	4b32      	ldr	r3, [pc, #200]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e2:	0f1b      	lsrs	r3, r3, #28
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	019a      	lsls	r2, r3, #6
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	041b      	lsls	r3, r3, #16
 80058f6:	431a      	orrs	r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	061b      	lsls	r3, r3, #24
 80058fc:	431a      	orrs	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	071b      	lsls	r3, r3, #28
 8005902:	4929      	ldr	r1, [pc, #164]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d028      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005916:	4b24      	ldr	r3, [pc, #144]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591c:	0e1b      	lsrs	r3, r3, #24
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005924:	4b20      	ldr	r3, [pc, #128]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592a:	0c1b      	lsrs	r3, r3, #16
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	019a      	lsls	r2, r3, #6
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	431a      	orrs	r2, r3
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	061b      	lsls	r3, r3, #24
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	071b      	lsls	r3, r3, #28
 800594a:	4917      	ldr	r1, [pc, #92]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4911      	ldr	r1, [pc, #68]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005968:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a0e      	ldr	r2, [pc, #56]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800596e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005974:	f7fd f8ac 	bl	8002ad0 <HAL_GetTick>
 8005978:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800597a:	e008      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800597c:	f7fd f8a8 	bl	8002ad0 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b64      	cmp	r3, #100	; 0x64
 8005988:	d901      	bls.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e007      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800598e:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800599a:	d1ef      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40023800 	.word	0x40023800

080059ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e084      	b.n	8005ac8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d106      	bne.n	80059de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7fc fb37 	bl	800204c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2202      	movs	r2, #2
 80059e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059fe:	d902      	bls.n	8005a06 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e002      	b.n	8005a0c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a0a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a14:	d007      	beq.n	8005a26 <HAL_SPI_Init+0x7a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10b      	bne.n	8005a46 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a36:	d903      	bls.n	8005a40 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8005a3e:	e002      	b.n	8005a46 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	ea42 0103 	orr.w	r1, r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	0c1b      	lsrs	r3, r3, #16
 8005a86:	f003 0204 	and.w	r2, r3, #4
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	ea42 0103 	orr.w	r1, r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69da      	ldr	r2, [r3, #28]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ab6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e01d      	b.n	8005b1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fc fdd6 	bl	80026a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f000 fcb0 	bl	8006474 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <HAL_TIM_Base_Start+0x50>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b06      	cmp	r3, #6
 8005b48:	d00b      	beq.n	8005b62 <HAL_TIM_Base_Start+0x3a>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b50:	d007      	beq.n	8005b62 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0201 	orr.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	00010007 	.word	0x00010007

08005b7c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6a1a      	ldr	r2, [r3, #32]
 8005b92:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b96:	4013      	ands	r3, r2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10f      	bne.n	8005bbc <HAL_TIM_Base_Stop+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6a1a      	ldr	r2, [r3, #32]
 8005ba2:	f240 4344 	movw	r3, #1092	; 0x444
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d107      	bne.n	8005bbc <HAL_TIM_Base_Stop+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0201 	bic.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <HAL_TIM_Base_Start_IT+0x50>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b06      	cmp	r3, #6
 8005bfc:	d00b      	beq.n	8005c16 <HAL_TIM_Base_Start_IT+0x42>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c04:	d007      	beq.n	8005c16 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	00010007 	.word	0x00010007

08005c28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e01d      	b.n	8005c76 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f815 	bl	8005c7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4619      	mov	r1, r3
 8005c66:	4610      	mov	r0, r2
 8005c68:	f000 fc04 	bl	8006474 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 ff7c 	bl	8006ba4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <HAL_TIM_PWM_Start+0x7c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_TIM_PWM_Start+0x2c>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a16      	ldr	r2, [pc, #88]	; (8005d14 <HAL_TIM_PWM_Start+0x80>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIM_PWM_Start+0x30>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x32>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <HAL_TIM_PWM_Start+0x84>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b06      	cmp	r3, #6
 8005cea:	d00b      	beq.n	8005d04 <HAL_TIM_PWM_Start+0x70>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf2:	d007      	beq.n	8005d04 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40010400 	.word	0x40010400
 8005d18:	00010007 	.word	0x00010007

08005d1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e07b      	b.n	8005e28 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fc fd33 	bl	80027b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6899      	ldr	r1, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	4b34      	ldr	r3, [pc, #208]	; (8005e30 <HAL_TIM_Encoder_Init+0x114>)
 8005d5e:	400b      	ands	r3, r1
 8005d60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f000 fb81 	bl	8006474 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <HAL_TIM_Encoder_Init+0x118>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	4313      	orrs	r3, r2
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4b21      	ldr	r3, [pc, #132]	; (8005e38 <HAL_TIM_Encoder_Init+0x11c>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <HAL_TIM_Encoder_Init+0x120>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	011a      	lsls	r2, r3, #4
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	031b      	lsls	r3, r3, #12
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005dea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005df2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	fffebff8 	.word	0xfffebff8
 8005e34:	fffffcfc 	.word	0xfffffcfc
 8005e38:	fffff3f3 	.word	0xfffff3f3
 8005e3c:	ffff0f0f 	.word	0xffff0f0f

08005e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d122      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d11b      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0202 	mvn.w	r2, #2
 8005e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fad8 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 faca 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fadb 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d122      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d11b      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0204 	mvn.w	r2, #4
 8005ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 faae 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8005edc:	e005      	b.n	8005eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 faa0 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fab1 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d122      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d11b      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0208 	mvn.w	r2, #8
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2204      	movs	r2, #4
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa84 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa76 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fa87 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b10      	cmp	r3, #16
 8005f50:	d122      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b10      	cmp	r3, #16
 8005f5e:	d11b      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0210 	mvn.w	r2, #16
 8005f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa5a 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8005f84:	e005      	b.n	8005f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fa4c 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fa5d 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d10e      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d107      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0201 	mvn.w	r2, #1
 8005fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fb fd38 	bl	8001a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fce:	2b80      	cmp	r3, #128	; 0x80
 8005fd0:	d10e      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fdc:	2b80      	cmp	r3, #128	; 0x80
 8005fde:	d107      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fe98 	bl	8006d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffe:	d10e      	bne.n	800601e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d107      	bne.n	800601e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fe8b 	bl	8006d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d10e      	bne.n	800604a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	d107      	bne.n	800604a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fa0b 	bl	8006460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b20      	cmp	r3, #32
 8006056:	d10e      	bne.n	8006076 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b20      	cmp	r3, #32
 8006064:	d107      	bne.n	8006076 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f06f 0220 	mvn.w	r2, #32
 800606e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fe4b 	bl	8006d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006096:	2302      	movs	r3, #2
 8006098:	e105      	b.n	80062a6 <HAL_TIM_PWM_ConfigChannel+0x226>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2202      	movs	r2, #2
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b14      	cmp	r3, #20
 80060ae:	f200 80f0 	bhi.w	8006292 <HAL_TIM_PWM_ConfigChannel+0x212>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	08006293 	.word	0x08006293
 80060c0:	08006293 	.word	0x08006293
 80060c4:	08006293 	.word	0x08006293
 80060c8:	0800614d 	.word	0x0800614d
 80060cc:	08006293 	.word	0x08006293
 80060d0:	08006293 	.word	0x08006293
 80060d4:	08006293 	.word	0x08006293
 80060d8:	0800618f 	.word	0x0800618f
 80060dc:	08006293 	.word	0x08006293
 80060e0:	08006293 	.word	0x08006293
 80060e4:	08006293 	.word	0x08006293
 80060e8:	080061cf 	.word	0x080061cf
 80060ec:	08006293 	.word	0x08006293
 80060f0:	08006293 	.word	0x08006293
 80060f4:	08006293 	.word	0x08006293
 80060f8:	08006211 	.word	0x08006211
 80060fc:	08006293 	.word	0x08006293
 8006100:	08006293 	.word	0x08006293
 8006104:	08006293 	.word	0x08006293
 8006108:	08006251 	.word	0x08006251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fa4e 	bl	80065b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0208 	orr.w	r2, r2, #8
 8006126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0204 	bic.w	r2, r2, #4
 8006136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6999      	ldr	r1, [r3, #24]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	619a      	str	r2, [r3, #24]
      break;
 800614a:	e0a3      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 faa0 	bl	8006698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6999      	ldr	r1, [r3, #24]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	021a      	lsls	r2, r3, #8
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	619a      	str	r2, [r3, #24]
      break;
 800618c:	e082      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 faf7 	bl	8006788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0208 	orr.w	r2, r2, #8
 80061a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0204 	bic.w	r2, r2, #4
 80061b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69d9      	ldr	r1, [r3, #28]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	61da      	str	r2, [r3, #28]
      break;
 80061cc:	e062      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fb4d 	bl	8006874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69d9      	ldr	r1, [r3, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	021a      	lsls	r2, r3, #8
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	61da      	str	r2, [r3, #28]
      break;
 800620e:	e041      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fb84 	bl	8006924 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0208 	orr.w	r2, r2, #8
 800622a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0204 	bic.w	r2, r2, #4
 800623a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800624e:	e021      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fbb6 	bl	80069c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800626a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	021a      	lsls	r2, r3, #8
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006290:	e000      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006292:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop

080062b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_TIM_ConfigClockSource+0x18>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e0a6      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x166>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4b4f      	ldr	r3, [pc, #316]	; (8006420 <HAL_TIM_ConfigClockSource+0x170>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d067      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0x120>
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	d80b      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x6c>
 8006304:	2b10      	cmp	r3, #16
 8006306:	d073      	beq.n	80063f0 <HAL_TIM_ConfigClockSource+0x140>
 8006308:	2b10      	cmp	r3, #16
 800630a:	d802      	bhi.n	8006312 <HAL_TIM_ConfigClockSource+0x62>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d06f      	beq.n	80063f0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006310:	e078      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006312:	2b20      	cmp	r3, #32
 8006314:	d06c      	beq.n	80063f0 <HAL_TIM_ConfigClockSource+0x140>
 8006316:	2b30      	cmp	r3, #48	; 0x30
 8006318:	d06a      	beq.n	80063f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800631a:	e073      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800631c:	2b70      	cmp	r3, #112	; 0x70
 800631e:	d00d      	beq.n	800633c <HAL_TIM_ConfigClockSource+0x8c>
 8006320:	2b70      	cmp	r3, #112	; 0x70
 8006322:	d804      	bhi.n	800632e <HAL_TIM_ConfigClockSource+0x7e>
 8006324:	2b50      	cmp	r3, #80	; 0x50
 8006326:	d033      	beq.n	8006390 <HAL_TIM_ConfigClockSource+0xe0>
 8006328:	2b60      	cmp	r3, #96	; 0x60
 800632a:	d041      	beq.n	80063b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800632c:	e06a      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006332:	d066      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0x152>
 8006334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006338:	d017      	beq.n	800636a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800633a:	e063      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	6899      	ldr	r1, [r3, #8]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f000 fc0a 	bl	8006b64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800635e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	609a      	str	r2, [r3, #8]
      break;
 8006368:	e04c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6899      	ldr	r1, [r3, #8]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f000 fbf3 	bl	8006b64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800638c:	609a      	str	r2, [r3, #8]
      break;
 800638e:	e039      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	6859      	ldr	r1, [r3, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	461a      	mov	r2, r3
 800639e:	f000 fb67 	bl	8006a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2150      	movs	r1, #80	; 0x50
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fbc0 	bl	8006b2e <TIM_ITRx_SetConfig>
      break;
 80063ae:	e029      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	6859      	ldr	r1, [r3, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	461a      	mov	r2, r3
 80063be:	f000 fb86 	bl	8006ace <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2160      	movs	r1, #96	; 0x60
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fbb0 	bl	8006b2e <TIM_ITRx_SetConfig>
      break;
 80063ce:	e019      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	6859      	ldr	r1, [r3, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	461a      	mov	r2, r3
 80063de:	f000 fb47 	bl	8006a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2140      	movs	r1, #64	; 0x40
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fba0 	bl	8006b2e <TIM_ITRx_SetConfig>
      break;
 80063ee:	e009      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f000 fb97 	bl	8006b2e <TIM_ITRx_SetConfig>
      break;
 8006400:	e000      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	fffeff88 	.word	0xfffeff88

08006424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a40      	ldr	r2, [pc, #256]	; (8006588 <TIM_Base_SetConfig+0x114>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d013      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006492:	d00f      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a3d      	ldr	r2, [pc, #244]	; (800658c <TIM_Base_SetConfig+0x118>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00b      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a3c      	ldr	r2, [pc, #240]	; (8006590 <TIM_Base_SetConfig+0x11c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d007      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a3b      	ldr	r2, [pc, #236]	; (8006594 <TIM_Base_SetConfig+0x120>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a3a      	ldr	r2, [pc, #232]	; (8006598 <TIM_Base_SetConfig+0x124>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d108      	bne.n	80064c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a2f      	ldr	r2, [pc, #188]	; (8006588 <TIM_Base_SetConfig+0x114>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d02b      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d4:	d027      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2c      	ldr	r2, [pc, #176]	; (800658c <TIM_Base_SetConfig+0x118>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d023      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2b      	ldr	r2, [pc, #172]	; (8006590 <TIM_Base_SetConfig+0x11c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01f      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2a      	ldr	r2, [pc, #168]	; (8006594 <TIM_Base_SetConfig+0x120>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d01b      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a29      	ldr	r2, [pc, #164]	; (8006598 <TIM_Base_SetConfig+0x124>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d017      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a28      	ldr	r2, [pc, #160]	; (800659c <TIM_Base_SetConfig+0x128>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a27      	ldr	r2, [pc, #156]	; (80065a0 <TIM_Base_SetConfig+0x12c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00f      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a26      	ldr	r2, [pc, #152]	; (80065a4 <TIM_Base_SetConfig+0x130>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00b      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <TIM_Base_SetConfig+0x134>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d007      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a24      	ldr	r2, [pc, #144]	; (80065ac <TIM_Base_SetConfig+0x138>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d003      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a23      	ldr	r2, [pc, #140]	; (80065b0 <TIM_Base_SetConfig+0x13c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d108      	bne.n	8006538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a0a      	ldr	r2, [pc, #40]	; (8006588 <TIM_Base_SetConfig+0x114>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d003      	beq.n	800656c <TIM_Base_SetConfig+0xf8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a0c      	ldr	r2, [pc, #48]	; (8006598 <TIM_Base_SetConfig+0x124>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d103      	bne.n	8006574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	615a      	str	r2, [r3, #20]
}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40010400 	.word	0x40010400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800
 80065a8:	40001800 	.word	0x40001800
 80065ac:	40001c00 	.word	0x40001c00
 80065b0:	40002000 	.word	0x40002000

080065b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f023 0201 	bic.w	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4b2b      	ldr	r3, [pc, #172]	; (800668c <TIM_OC1_SetConfig+0xd8>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0303 	bic.w	r3, r3, #3
 80065ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f023 0302 	bic.w	r3, r3, #2
 80065fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a21      	ldr	r2, [pc, #132]	; (8006690 <TIM_OC1_SetConfig+0xdc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_OC1_SetConfig+0x64>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a20      	ldr	r2, [pc, #128]	; (8006694 <TIM_OC1_SetConfig+0xe0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10c      	bne.n	8006632 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f023 0308 	bic.w	r3, r3, #8
 800661e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f023 0304 	bic.w	r3, r3, #4
 8006630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a16      	ldr	r2, [pc, #88]	; (8006690 <TIM_OC1_SetConfig+0xdc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d003      	beq.n	8006642 <TIM_OC1_SetConfig+0x8e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a15      	ldr	r2, [pc, #84]	; (8006694 <TIM_OC1_SetConfig+0xe0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d111      	bne.n	8006666 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	621a      	str	r2, [r3, #32]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	fffeff8f 	.word	0xfffeff8f
 8006690:	40010000 	.word	0x40010000
 8006694:	40010400 	.word	0x40010400

08006698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f023 0210 	bic.w	r2, r3, #16
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4b2e      	ldr	r3, [pc, #184]	; (800677c <TIM_OC2_SetConfig+0xe4>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	021b      	lsls	r3, r3, #8
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f023 0320 	bic.w	r3, r3, #32
 80066e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a23      	ldr	r2, [pc, #140]	; (8006780 <TIM_OC2_SetConfig+0xe8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d003      	beq.n	8006700 <TIM_OC2_SetConfig+0x68>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a22      	ldr	r2, [pc, #136]	; (8006784 <TIM_OC2_SetConfig+0xec>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d10d      	bne.n	800671c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a18      	ldr	r2, [pc, #96]	; (8006780 <TIM_OC2_SetConfig+0xe8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d003      	beq.n	800672c <TIM_OC2_SetConfig+0x94>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a17      	ldr	r2, [pc, #92]	; (8006784 <TIM_OC2_SetConfig+0xec>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d113      	bne.n	8006754 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800673a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	feff8fff 	.word	0xfeff8fff
 8006780:	40010000 	.word	0x40010000
 8006784:	40010400 	.word	0x40010400

08006788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4b2d      	ldr	r3, [pc, #180]	; (8006868 <TIM_OC3_SetConfig+0xe0>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0303 	bic.w	r3, r3, #3
 80067be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	021b      	lsls	r3, r3, #8
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a22      	ldr	r2, [pc, #136]	; (800686c <TIM_OC3_SetConfig+0xe4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <TIM_OC3_SetConfig+0x66>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a21      	ldr	r2, [pc, #132]	; (8006870 <TIM_OC3_SetConfig+0xe8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d10d      	bne.n	800680a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a17      	ldr	r2, [pc, #92]	; (800686c <TIM_OC3_SetConfig+0xe4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d003      	beq.n	800681a <TIM_OC3_SetConfig+0x92>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a16      	ldr	r2, [pc, #88]	; (8006870 <TIM_OC3_SetConfig+0xe8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d113      	bne.n	8006842 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	621a      	str	r2, [r3, #32]
}
 800685c:	bf00      	nop
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	fffeff8f 	.word	0xfffeff8f
 800686c:	40010000 	.word	0x40010000
 8006870:	40010400 	.word	0x40010400

08006874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4b1e      	ldr	r3, [pc, #120]	; (8006918 <TIM_OC4_SetConfig+0xa4>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	031b      	lsls	r3, r3, #12
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a13      	ldr	r2, [pc, #76]	; (800691c <TIM_OC4_SetConfig+0xa8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_OC4_SetConfig+0x68>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a12      	ldr	r2, [pc, #72]	; (8006920 <TIM_OC4_SetConfig+0xac>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d109      	bne.n	80068f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	019b      	lsls	r3, r3, #6
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	feff8fff 	.word	0xfeff8fff
 800691c:	40010000 	.word	0x40010000
 8006920:	40010400 	.word	0x40010400

08006924 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4b1b      	ldr	r3, [pc, #108]	; (80069bc <TIM_OC5_SetConfig+0x98>)
 8006950:	4013      	ands	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	041b      	lsls	r3, r3, #16
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a12      	ldr	r2, [pc, #72]	; (80069c0 <TIM_OC5_SetConfig+0x9c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC5_SetConfig+0x5e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a11      	ldr	r2, [pc, #68]	; (80069c4 <TIM_OC5_SetConfig+0xa0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d109      	bne.n	8006996 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006988:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	621a      	str	r2, [r3, #32]
}
 80069b0:	bf00      	nop
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	fffeff8f 	.word	0xfffeff8f
 80069c0:	40010000 	.word	0x40010000
 80069c4:	40010400 	.word	0x40010400

080069c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <TIM_OC6_SetConfig+0x9c>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	051b      	lsls	r3, r3, #20
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a13      	ldr	r2, [pc, #76]	; (8006a68 <TIM_OC6_SetConfig+0xa0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d003      	beq.n	8006a28 <TIM_OC6_SetConfig+0x60>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a12      	ldr	r2, [pc, #72]	; (8006a6c <TIM_OC6_SetConfig+0xa4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d109      	bne.n	8006a3c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	029b      	lsls	r3, r3, #10
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	621a      	str	r2, [r3, #32]
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	feff8fff 	.word	0xfeff8fff
 8006a68:	40010000 	.word	0x40010000
 8006a6c:	40010400 	.word	0x40010400

08006a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	f023 0201 	bic.w	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f023 030a 	bic.w	r3, r3, #10
 8006aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b087      	sub	sp, #28
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f023 0210 	bic.w	r2, r3, #16
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	031b      	lsls	r3, r3, #12
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b085      	sub	sp, #20
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f043 0307 	orr.w	r3, r3, #7
 8006b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	609a      	str	r2, [r3, #8]
}
 8006b58:	bf00      	nop
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	021a      	lsls	r2, r3, #8
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	431a      	orrs	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	609a      	str	r2, [r3, #8]
}
 8006b98:	bf00      	nop
 8006b9a:	371c      	adds	r7, #28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f003 031f 	and.w	r3, r3, #31
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a1a      	ldr	r2, [r3, #32]
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	401a      	ands	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a1a      	ldr	r2, [r3, #32]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 031f 	and.w	r3, r3, #31
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	621a      	str	r2, [r3, #32]
}
 8006be2:	bf00      	nop
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
	...

08006bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e06d      	b.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a30      	ldr	r2, [pc, #192]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2f      	ldr	r2, [pc, #188]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d108      	bne.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a20      	ldr	r2, [pc, #128]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d022      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7a:	d01d      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a1d      	ldr	r2, [pc, #116]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d018      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a1a      	ldr	r2, [pc, #104]	; (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00e      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a15      	ldr	r2, [pc, #84]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d009      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a16      	ldr	r2, [pc, #88]	; (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a15      	ldr	r2, [pc, #84]	; (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d10c      	bne.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40010400 	.word	0x40010400
 8006cf8:	40000400 	.word	0x40000400
 8006cfc:	40000800 	.word	0x40000800
 8006d00:	40000c00 	.word	0x40000c00
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40001800 	.word	0x40001800

08006d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e040      	b.n	8006ddc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fb fdea 	bl	8002944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2224      	movs	r2, #36	; 0x24
 8006d74:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f972 	bl	8007070 <UART_SetConfig>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e022      	b.n	8006ddc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fc10 	bl	80075c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0201 	orr.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fc97 	bl	8007708 <UART_CheckIdleState>
 8006dda:	4603      	mov	r3, r0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d113      	bne.n	8006e3c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00e      	beq.n	8006e3c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d009      	beq.n	8006e3c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8100 	beq.w	8007032 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
      }
      return;
 8006e3a:	e0fa      	b.n	8007032 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80d5 	beq.w	8006fee <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d105      	bne.n	8006e5a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 80ca 	beq.w	8006fee <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00e      	beq.n	8006e82 <HAL_UART_IRQHandler+0x9e>
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2201      	movs	r2, #1
 8006e74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e7a:	f043 0201 	orr.w	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00e      	beq.n	8006eaa <HAL_UART_IRQHandler+0xc6>
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea2:	f043 0204 	orr.w	r2, r3, #4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00e      	beq.n	8006ed2 <HAL_UART_IRQHandler+0xee>
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eca:	f043 0202 	orr.w	r2, r3, #2
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d013      	beq.n	8006f04 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d104      	bne.n	8006ef0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006efc:	f043 0208 	orr.w	r2, r3, #8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00f      	beq.n	8006f2e <HAL_UART_IRQHandler+0x14a>
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00a      	beq.n	8006f2e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f26:	f043 0220 	orr.w	r2, r3, #32
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d07f      	beq.n	8007036 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00c      	beq.n	8006f5a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d007      	beq.n	8006f5a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f5e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	d004      	beq.n	8006f78 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d031      	beq.n	8006fdc <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fc6f 	bl	800785c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f88:	2b40      	cmp	r3, #64	; 0x40
 8006f8a:	d123      	bne.n	8006fd4 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f9a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d013      	beq.n	8006fcc <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa8:	4a26      	ldr	r2, [pc, #152]	; (8007044 <HAL_UART_IRQHandler+0x260>)
 8006faa:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fc facf 	bl	8003554 <HAL_DMA_Abort_IT>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d016      	beq.n	8006fea <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fca:	e00e      	b.n	8006fea <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f845 	bl	800705c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd2:	e00a      	b.n	8006fea <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f841 	bl	800705c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fda:	e006      	b.n	8006fea <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f83d 	bl	800705c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006fe8:	e025      	b.n	8007036 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fea:	bf00      	nop
    return;
 8006fec:	e023      	b.n	8007036 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00d      	beq.n	8007014 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d008      	beq.n	8007014 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007006:	2b00      	cmp	r3, #0
 8007008:	d017      	beq.n	800703a <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	4798      	blx	r3
    }
    return;
 8007012:	e012      	b.n	800703a <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00e      	beq.n	800703c <HAL_UART_IRQHandler+0x258>
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d009      	beq.n	800703c <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fc4d 	bl	80078c8 <UART_EndTransmit_IT>
    return;
 800702e:	bf00      	nop
 8007030:	e004      	b.n	800703c <HAL_UART_IRQHandler+0x258>
      return;
 8007032:	bf00      	nop
 8007034:	e002      	b.n	800703c <HAL_UART_IRQHandler+0x258>
    return;
 8007036:	bf00      	nop
 8007038:	e000      	b.n	800703c <HAL_UART_IRQHandler+0x258>
    return;
 800703a:	bf00      	nop
  }

}
 800703c:	3720      	adds	r7, #32
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	0800789d 	.word	0x0800789d

08007048 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007078:	2300      	movs	r3, #0
 800707a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	4bb1      	ldr	r3, [pc, #708]	; (8007364 <UART_SetConfig+0x2f4>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6812      	ldr	r2, [r2, #0]
 80070a6:	6939      	ldr	r1, [r7, #16]
 80070a8:	430b      	orrs	r3, r1
 80070aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a9f      	ldr	r2, [pc, #636]	; (8007368 <UART_SetConfig+0x2f8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d121      	bne.n	8007134 <UART_SetConfig+0xc4>
 80070f0:	4b9e      	ldr	r3, [pc, #632]	; (800736c <UART_SetConfig+0x2fc>)
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d816      	bhi.n	800712c <UART_SetConfig+0xbc>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <UART_SetConfig+0x94>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007115 	.word	0x08007115
 8007108:	08007121 	.word	0x08007121
 800710c:	0800711b 	.word	0x0800711b
 8007110:	08007127 	.word	0x08007127
 8007114:	2301      	movs	r3, #1
 8007116:	77fb      	strb	r3, [r7, #31]
 8007118:	e151      	b.n	80073be <UART_SetConfig+0x34e>
 800711a:	2302      	movs	r3, #2
 800711c:	77fb      	strb	r3, [r7, #31]
 800711e:	e14e      	b.n	80073be <UART_SetConfig+0x34e>
 8007120:	2304      	movs	r3, #4
 8007122:	77fb      	strb	r3, [r7, #31]
 8007124:	e14b      	b.n	80073be <UART_SetConfig+0x34e>
 8007126:	2308      	movs	r3, #8
 8007128:	77fb      	strb	r3, [r7, #31]
 800712a:	e148      	b.n	80073be <UART_SetConfig+0x34e>
 800712c:	2310      	movs	r3, #16
 800712e:	77fb      	strb	r3, [r7, #31]
 8007130:	bf00      	nop
 8007132:	e144      	b.n	80073be <UART_SetConfig+0x34e>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a8d      	ldr	r2, [pc, #564]	; (8007370 <UART_SetConfig+0x300>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d134      	bne.n	80071a8 <UART_SetConfig+0x138>
 800713e:	4b8b      	ldr	r3, [pc, #556]	; (800736c <UART_SetConfig+0x2fc>)
 8007140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007144:	f003 030c 	and.w	r3, r3, #12
 8007148:	2b0c      	cmp	r3, #12
 800714a:	d829      	bhi.n	80071a0 <UART_SetConfig+0x130>
 800714c:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <UART_SetConfig+0xe4>)
 800714e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007152:	bf00      	nop
 8007154:	08007189 	.word	0x08007189
 8007158:	080071a1 	.word	0x080071a1
 800715c:	080071a1 	.word	0x080071a1
 8007160:	080071a1 	.word	0x080071a1
 8007164:	08007195 	.word	0x08007195
 8007168:	080071a1 	.word	0x080071a1
 800716c:	080071a1 	.word	0x080071a1
 8007170:	080071a1 	.word	0x080071a1
 8007174:	0800718f 	.word	0x0800718f
 8007178:	080071a1 	.word	0x080071a1
 800717c:	080071a1 	.word	0x080071a1
 8007180:	080071a1 	.word	0x080071a1
 8007184:	0800719b 	.word	0x0800719b
 8007188:	2300      	movs	r3, #0
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e117      	b.n	80073be <UART_SetConfig+0x34e>
 800718e:	2302      	movs	r3, #2
 8007190:	77fb      	strb	r3, [r7, #31]
 8007192:	e114      	b.n	80073be <UART_SetConfig+0x34e>
 8007194:	2304      	movs	r3, #4
 8007196:	77fb      	strb	r3, [r7, #31]
 8007198:	e111      	b.n	80073be <UART_SetConfig+0x34e>
 800719a:	2308      	movs	r3, #8
 800719c:	77fb      	strb	r3, [r7, #31]
 800719e:	e10e      	b.n	80073be <UART_SetConfig+0x34e>
 80071a0:	2310      	movs	r3, #16
 80071a2:	77fb      	strb	r3, [r7, #31]
 80071a4:	bf00      	nop
 80071a6:	e10a      	b.n	80073be <UART_SetConfig+0x34e>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a71      	ldr	r2, [pc, #452]	; (8007374 <UART_SetConfig+0x304>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d120      	bne.n	80071f4 <UART_SetConfig+0x184>
 80071b2:	4b6e      	ldr	r3, [pc, #440]	; (800736c <UART_SetConfig+0x2fc>)
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071bc:	2b10      	cmp	r3, #16
 80071be:	d00f      	beq.n	80071e0 <UART_SetConfig+0x170>
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d802      	bhi.n	80071ca <UART_SetConfig+0x15a>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <UART_SetConfig+0x164>
 80071c8:	e010      	b.n	80071ec <UART_SetConfig+0x17c>
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d005      	beq.n	80071da <UART_SetConfig+0x16a>
 80071ce:	2b30      	cmp	r3, #48	; 0x30
 80071d0:	d009      	beq.n	80071e6 <UART_SetConfig+0x176>
 80071d2:	e00b      	b.n	80071ec <UART_SetConfig+0x17c>
 80071d4:	2300      	movs	r3, #0
 80071d6:	77fb      	strb	r3, [r7, #31]
 80071d8:	e0f1      	b.n	80073be <UART_SetConfig+0x34e>
 80071da:	2302      	movs	r3, #2
 80071dc:	77fb      	strb	r3, [r7, #31]
 80071de:	e0ee      	b.n	80073be <UART_SetConfig+0x34e>
 80071e0:	2304      	movs	r3, #4
 80071e2:	77fb      	strb	r3, [r7, #31]
 80071e4:	e0eb      	b.n	80073be <UART_SetConfig+0x34e>
 80071e6:	2308      	movs	r3, #8
 80071e8:	77fb      	strb	r3, [r7, #31]
 80071ea:	e0e8      	b.n	80073be <UART_SetConfig+0x34e>
 80071ec:	2310      	movs	r3, #16
 80071ee:	77fb      	strb	r3, [r7, #31]
 80071f0:	bf00      	nop
 80071f2:	e0e4      	b.n	80073be <UART_SetConfig+0x34e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a5f      	ldr	r2, [pc, #380]	; (8007378 <UART_SetConfig+0x308>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d120      	bne.n	8007240 <UART_SetConfig+0x1d0>
 80071fe:	4b5b      	ldr	r3, [pc, #364]	; (800736c <UART_SetConfig+0x2fc>)
 8007200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007204:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007208:	2b40      	cmp	r3, #64	; 0x40
 800720a:	d00f      	beq.n	800722c <UART_SetConfig+0x1bc>
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	d802      	bhi.n	8007216 <UART_SetConfig+0x1a6>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d005      	beq.n	8007220 <UART_SetConfig+0x1b0>
 8007214:	e010      	b.n	8007238 <UART_SetConfig+0x1c8>
 8007216:	2b80      	cmp	r3, #128	; 0x80
 8007218:	d005      	beq.n	8007226 <UART_SetConfig+0x1b6>
 800721a:	2bc0      	cmp	r3, #192	; 0xc0
 800721c:	d009      	beq.n	8007232 <UART_SetConfig+0x1c2>
 800721e:	e00b      	b.n	8007238 <UART_SetConfig+0x1c8>
 8007220:	2300      	movs	r3, #0
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e0cb      	b.n	80073be <UART_SetConfig+0x34e>
 8007226:	2302      	movs	r3, #2
 8007228:	77fb      	strb	r3, [r7, #31]
 800722a:	e0c8      	b.n	80073be <UART_SetConfig+0x34e>
 800722c:	2304      	movs	r3, #4
 800722e:	77fb      	strb	r3, [r7, #31]
 8007230:	e0c5      	b.n	80073be <UART_SetConfig+0x34e>
 8007232:	2308      	movs	r3, #8
 8007234:	77fb      	strb	r3, [r7, #31]
 8007236:	e0c2      	b.n	80073be <UART_SetConfig+0x34e>
 8007238:	2310      	movs	r3, #16
 800723a:	77fb      	strb	r3, [r7, #31]
 800723c:	bf00      	nop
 800723e:	e0be      	b.n	80073be <UART_SetConfig+0x34e>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a4d      	ldr	r2, [pc, #308]	; (800737c <UART_SetConfig+0x30c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d124      	bne.n	8007294 <UART_SetConfig+0x224>
 800724a:	4b48      	ldr	r3, [pc, #288]	; (800736c <UART_SetConfig+0x2fc>)
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007258:	d012      	beq.n	8007280 <UART_SetConfig+0x210>
 800725a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725e:	d802      	bhi.n	8007266 <UART_SetConfig+0x1f6>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <UART_SetConfig+0x204>
 8007264:	e012      	b.n	800728c <UART_SetConfig+0x21c>
 8007266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800726a:	d006      	beq.n	800727a <UART_SetConfig+0x20a>
 800726c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007270:	d009      	beq.n	8007286 <UART_SetConfig+0x216>
 8007272:	e00b      	b.n	800728c <UART_SetConfig+0x21c>
 8007274:	2300      	movs	r3, #0
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e0a1      	b.n	80073be <UART_SetConfig+0x34e>
 800727a:	2302      	movs	r3, #2
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	e09e      	b.n	80073be <UART_SetConfig+0x34e>
 8007280:	2304      	movs	r3, #4
 8007282:	77fb      	strb	r3, [r7, #31]
 8007284:	e09b      	b.n	80073be <UART_SetConfig+0x34e>
 8007286:	2308      	movs	r3, #8
 8007288:	77fb      	strb	r3, [r7, #31]
 800728a:	e098      	b.n	80073be <UART_SetConfig+0x34e>
 800728c:	2310      	movs	r3, #16
 800728e:	77fb      	strb	r3, [r7, #31]
 8007290:	bf00      	nop
 8007292:	e094      	b.n	80073be <UART_SetConfig+0x34e>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a39      	ldr	r2, [pc, #228]	; (8007380 <UART_SetConfig+0x310>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d124      	bne.n	80072e8 <UART_SetConfig+0x278>
 800729e:	4b33      	ldr	r3, [pc, #204]	; (800736c <UART_SetConfig+0x2fc>)
 80072a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ac:	d012      	beq.n	80072d4 <UART_SetConfig+0x264>
 80072ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b2:	d802      	bhi.n	80072ba <UART_SetConfig+0x24a>
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d007      	beq.n	80072c8 <UART_SetConfig+0x258>
 80072b8:	e012      	b.n	80072e0 <UART_SetConfig+0x270>
 80072ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072be:	d006      	beq.n	80072ce <UART_SetConfig+0x25e>
 80072c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072c4:	d009      	beq.n	80072da <UART_SetConfig+0x26a>
 80072c6:	e00b      	b.n	80072e0 <UART_SetConfig+0x270>
 80072c8:	2301      	movs	r3, #1
 80072ca:	77fb      	strb	r3, [r7, #31]
 80072cc:	e077      	b.n	80073be <UART_SetConfig+0x34e>
 80072ce:	2302      	movs	r3, #2
 80072d0:	77fb      	strb	r3, [r7, #31]
 80072d2:	e074      	b.n	80073be <UART_SetConfig+0x34e>
 80072d4:	2304      	movs	r3, #4
 80072d6:	77fb      	strb	r3, [r7, #31]
 80072d8:	e071      	b.n	80073be <UART_SetConfig+0x34e>
 80072da:	2308      	movs	r3, #8
 80072dc:	77fb      	strb	r3, [r7, #31]
 80072de:	e06e      	b.n	80073be <UART_SetConfig+0x34e>
 80072e0:	2310      	movs	r3, #16
 80072e2:	77fb      	strb	r3, [r7, #31]
 80072e4:	bf00      	nop
 80072e6:	e06a      	b.n	80073be <UART_SetConfig+0x34e>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a25      	ldr	r2, [pc, #148]	; (8007384 <UART_SetConfig+0x314>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d124      	bne.n	800733c <UART_SetConfig+0x2cc>
 80072f2:	4b1e      	ldr	r3, [pc, #120]	; (800736c <UART_SetConfig+0x2fc>)
 80072f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007300:	d012      	beq.n	8007328 <UART_SetConfig+0x2b8>
 8007302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007306:	d802      	bhi.n	800730e <UART_SetConfig+0x29e>
 8007308:	2b00      	cmp	r3, #0
 800730a:	d007      	beq.n	800731c <UART_SetConfig+0x2ac>
 800730c:	e012      	b.n	8007334 <UART_SetConfig+0x2c4>
 800730e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007312:	d006      	beq.n	8007322 <UART_SetConfig+0x2b2>
 8007314:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007318:	d009      	beq.n	800732e <UART_SetConfig+0x2be>
 800731a:	e00b      	b.n	8007334 <UART_SetConfig+0x2c4>
 800731c:	2300      	movs	r3, #0
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e04d      	b.n	80073be <UART_SetConfig+0x34e>
 8007322:	2302      	movs	r3, #2
 8007324:	77fb      	strb	r3, [r7, #31]
 8007326:	e04a      	b.n	80073be <UART_SetConfig+0x34e>
 8007328:	2304      	movs	r3, #4
 800732a:	77fb      	strb	r3, [r7, #31]
 800732c:	e047      	b.n	80073be <UART_SetConfig+0x34e>
 800732e:	2308      	movs	r3, #8
 8007330:	77fb      	strb	r3, [r7, #31]
 8007332:	e044      	b.n	80073be <UART_SetConfig+0x34e>
 8007334:	2310      	movs	r3, #16
 8007336:	77fb      	strb	r3, [r7, #31]
 8007338:	bf00      	nop
 800733a:	e040      	b.n	80073be <UART_SetConfig+0x34e>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a11      	ldr	r2, [pc, #68]	; (8007388 <UART_SetConfig+0x318>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d139      	bne.n	80073ba <UART_SetConfig+0x34a>
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <UART_SetConfig+0x2fc>)
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007354:	d027      	beq.n	80073a6 <UART_SetConfig+0x336>
 8007356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800735a:	d817      	bhi.n	800738c <UART_SetConfig+0x31c>
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01c      	beq.n	800739a <UART_SetConfig+0x32a>
 8007360:	e027      	b.n	80073b2 <UART_SetConfig+0x342>
 8007362:	bf00      	nop
 8007364:	efff69f3 	.word	0xefff69f3
 8007368:	40011000 	.word	0x40011000
 800736c:	40023800 	.word	0x40023800
 8007370:	40004400 	.word	0x40004400
 8007374:	40004800 	.word	0x40004800
 8007378:	40004c00 	.word	0x40004c00
 800737c:	40005000 	.word	0x40005000
 8007380:	40011400 	.word	0x40011400
 8007384:	40007800 	.word	0x40007800
 8007388:	40007c00 	.word	0x40007c00
 800738c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007390:	d006      	beq.n	80073a0 <UART_SetConfig+0x330>
 8007392:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007396:	d009      	beq.n	80073ac <UART_SetConfig+0x33c>
 8007398:	e00b      	b.n	80073b2 <UART_SetConfig+0x342>
 800739a:	2300      	movs	r3, #0
 800739c:	77fb      	strb	r3, [r7, #31]
 800739e:	e00e      	b.n	80073be <UART_SetConfig+0x34e>
 80073a0:	2302      	movs	r3, #2
 80073a2:	77fb      	strb	r3, [r7, #31]
 80073a4:	e00b      	b.n	80073be <UART_SetConfig+0x34e>
 80073a6:	2304      	movs	r3, #4
 80073a8:	77fb      	strb	r3, [r7, #31]
 80073aa:	e008      	b.n	80073be <UART_SetConfig+0x34e>
 80073ac:	2308      	movs	r3, #8
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e005      	b.n	80073be <UART_SetConfig+0x34e>
 80073b2:	2310      	movs	r3, #16
 80073b4:	77fb      	strb	r3, [r7, #31]
 80073b6:	bf00      	nop
 80073b8:	e001      	b.n	80073be <UART_SetConfig+0x34e>
 80073ba:	2310      	movs	r3, #16
 80073bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073c6:	d17f      	bne.n	80074c8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80073c8:	7ffb      	ldrb	r3, [r7, #31]
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d85c      	bhi.n	8007488 <UART_SetConfig+0x418>
 80073ce:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <UART_SetConfig+0x364>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	080073f9 	.word	0x080073f9
 80073d8:	08007419 	.word	0x08007419
 80073dc:	08007439 	.word	0x08007439
 80073e0:	08007489 	.word	0x08007489
 80073e4:	08007451 	.word	0x08007451
 80073e8:	08007489 	.word	0x08007489
 80073ec:	08007489 	.word	0x08007489
 80073f0:	08007489 	.word	0x08007489
 80073f4:	08007471 	.word	0x08007471
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f8:	f7fd fec2 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 80073fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	005a      	lsls	r2, r3, #1
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	085b      	lsrs	r3, r3, #1
 8007408:	441a      	add	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007412:	b29b      	uxth	r3, r3
 8007414:	61bb      	str	r3, [r7, #24]
        break;
 8007416:	e03a      	b.n	800748e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007418:	f7fd fec6 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 800741c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	005a      	lsls	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	085b      	lsrs	r3, r3, #1
 8007428:	441a      	add	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007432:	b29b      	uxth	r3, r3
 8007434:	61bb      	str	r3, [r7, #24]
        break;
 8007436:	e02a      	b.n	800748e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	085a      	lsrs	r2, r3, #1
 800743e:	4b5f      	ldr	r3, [pc, #380]	; (80075bc <UART_SetConfig+0x54c>)
 8007440:	4413      	add	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6852      	ldr	r2, [r2, #4]
 8007446:	fbb3 f3f2 	udiv	r3, r3, r2
 800744a:	b29b      	uxth	r3, r3
 800744c:	61bb      	str	r3, [r7, #24]
        break;
 800744e:	e01e      	b.n	800748e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007450:	f7fd fdb2 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8007454:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	005a      	lsls	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	441a      	add	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	fbb2 f3f3 	udiv	r3, r2, r3
 800746a:	b29b      	uxth	r3, r3
 800746c:	61bb      	str	r3, [r7, #24]
        break;
 800746e:	e00e      	b.n	800748e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	085b      	lsrs	r3, r3, #1
 8007476:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007482:	b29b      	uxth	r3, r3
 8007484:	61bb      	str	r3, [r7, #24]
        break;
 8007486:	e002      	b.n	800748e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	75fb      	strb	r3, [r7, #23]
        break;
 800748c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b0f      	cmp	r3, #15
 8007492:	d916      	bls.n	80074c2 <UART_SetConfig+0x452>
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800749a:	d212      	bcs.n	80074c2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f023 030f 	bic.w	r3, r3, #15
 80074a4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	085b      	lsrs	r3, r3, #1
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	897b      	ldrh	r3, [r7, #10]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	897a      	ldrh	r2, [r7, #10]
 80074be:	60da      	str	r2, [r3, #12]
 80074c0:	e070      	b.n	80075a4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	75fb      	strb	r3, [r7, #23]
 80074c6:	e06d      	b.n	80075a4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80074c8:	7ffb      	ldrb	r3, [r7, #31]
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d859      	bhi.n	8007582 <UART_SetConfig+0x512>
 80074ce:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <UART_SetConfig+0x464>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	080074f9 	.word	0x080074f9
 80074d8:	08007517 	.word	0x08007517
 80074dc:	08007535 	.word	0x08007535
 80074e0:	08007583 	.word	0x08007583
 80074e4:	0800754d 	.word	0x0800754d
 80074e8:	08007583 	.word	0x08007583
 80074ec:	08007583 	.word	0x08007583
 80074f0:	08007583 	.word	0x08007583
 80074f4:	0800756b 	.word	0x0800756b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074f8:	f7fd fe42 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 80074fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	085a      	lsrs	r2, r3, #1
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	441a      	add	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007510:	b29b      	uxth	r3, r3
 8007512:	61bb      	str	r3, [r7, #24]
        break;
 8007514:	e038      	b.n	8007588 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007516:	f7fd fe47 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 800751a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	085a      	lsrs	r2, r3, #1
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	441a      	add	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	fbb2 f3f3 	udiv	r3, r2, r3
 800752e:	b29b      	uxth	r3, r3
 8007530:	61bb      	str	r3, [r7, #24]
        break;
 8007532:	e029      	b.n	8007588 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	085a      	lsrs	r2, r3, #1
 800753a:	4b21      	ldr	r3, [pc, #132]	; (80075c0 <UART_SetConfig+0x550>)
 800753c:	4413      	add	r3, r2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6852      	ldr	r2, [r2, #4]
 8007542:	fbb3 f3f2 	udiv	r3, r3, r2
 8007546:	b29b      	uxth	r3, r3
 8007548:	61bb      	str	r3, [r7, #24]
        break;
 800754a:	e01d      	b.n	8007588 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800754c:	f7fd fd34 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8007550:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	085a      	lsrs	r2, r3, #1
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	441a      	add	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	fbb2 f3f3 	udiv	r3, r2, r3
 8007564:	b29b      	uxth	r3, r3
 8007566:	61bb      	str	r3, [r7, #24]
        break;
 8007568:	e00e      	b.n	8007588 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	085b      	lsrs	r3, r3, #1
 8007570:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	fbb2 f3f3 	udiv	r3, r2, r3
 800757c:	b29b      	uxth	r3, r3
 800757e:	61bb      	str	r3, [r7, #24]
        break;
 8007580:	e002      	b.n	8007588 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	75fb      	strb	r3, [r7, #23]
        break;
 8007586:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b0f      	cmp	r3, #15
 800758c:	d908      	bls.n	80075a0 <UART_SetConfig+0x530>
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007594:	d204      	bcs.n	80075a0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	60da      	str	r2, [r3, #12]
 800759e:	e001      	b.n	80075a4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3720      	adds	r7, #32
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	01e84800 	.word	0x01e84800
 80075c0:	00f42400 	.word	0x00f42400

080075c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01a      	beq.n	80076da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076c2:	d10a      	bne.n	80076da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af02      	add	r7, sp, #8
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007716:	f7fb f9db 	bl	8002ad0 <HAL_GetTick>
 800771a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b08      	cmp	r3, #8
 8007728:	d10e      	bne.n	8007748 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800772a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f814 	bl	8007766 <UART_WaitOnFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e00a      	b.n	800775e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2220      	movs	r2, #32
 8007752:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	4613      	mov	r3, r2
 8007774:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007776:	e05d      	b.n	8007834 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777e:	d059      	beq.n	8007834 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007780:	f7fb f9a6 	bl	8002ad0 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	429a      	cmp	r2, r3
 800778e:	d302      	bcc.n	8007796 <UART_WaitOnFlagUntilTimeout+0x30>
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d11b      	bne.n	80077ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f022 0201 	bic.w	r2, r2, #1
 80077b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2220      	movs	r2, #32
 80077ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2220      	movs	r2, #32
 80077c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e042      	b.n	8007854 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d02b      	beq.n	8007834 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ea:	d123      	bne.n	8007834 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077f4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007804:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0201 	bic.w	r2, r2, #1
 8007814:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2220      	movs	r2, #32
 800781a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2220      	movs	r2, #32
 8007820:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2220      	movs	r2, #32
 8007826:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e00f      	b.n	8007854 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69da      	ldr	r2, [r3, #28]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	4013      	ands	r3, r2
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	429a      	cmp	r2, r3
 8007842:	bf0c      	ite	eq
 8007844:	2301      	moveq	r3, #1
 8007846:	2300      	movne	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	461a      	mov	r2, r3
 800784c:	79fb      	ldrb	r3, [r7, #7]
 800784e:	429a      	cmp	r2, r3
 8007850:	d092      	beq.n	8007778 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007872:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0201 	bic.w	r2, r2, #1
 8007882:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f7ff fbce 	bl	800705c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078de:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2220      	movs	r2, #32
 80078e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff fbab 	bl	8007048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <arm_pid_init_f32>:
 80078fc:	ed90 7a08 	vldr	s14, [r0, #32]
 8007900:	edd0 7a06 	vldr	s15, [r0, #24]
 8007904:	ed90 6a07 	vldr	s12, [r0, #28]
 8007908:	eef1 6a67 	vneg.f32	s13, s15
 800790c:	ed80 7a02 	vstr	s14, [r0, #8]
 8007910:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007914:	ee37 6a07 	vadd.f32	s12, s14, s14
 8007918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800791c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8007920:	edc0 7a00 	vstr	s15, [r0]
 8007924:	ed80 7a01 	vstr	s14, [r0, #4]
 8007928:	b901      	cbnz	r1, 800792c <arm_pid_init_f32+0x30>
 800792a:	4770      	bx	lr
 800792c:	2300      	movs	r3, #0
 800792e:	60c3      	str	r3, [r0, #12]
 8007930:	6103      	str	r3, [r0, #16]
 8007932:	6143      	str	r3, [r0, #20]
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop

08007938 <__errno>:
 8007938:	4b01      	ldr	r3, [pc, #4]	; (8007940 <__errno+0x8>)
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000048 	.word	0x20000048

08007944 <__libc_init_array>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	4e0d      	ldr	r6, [pc, #52]	; (800797c <__libc_init_array+0x38>)
 8007948:	4c0d      	ldr	r4, [pc, #52]	; (8007980 <__libc_init_array+0x3c>)
 800794a:	1ba4      	subs	r4, r4, r6
 800794c:	10a4      	asrs	r4, r4, #2
 800794e:	2500      	movs	r5, #0
 8007950:	42a5      	cmp	r5, r4
 8007952:	d109      	bne.n	8007968 <__libc_init_array+0x24>
 8007954:	4e0b      	ldr	r6, [pc, #44]	; (8007984 <__libc_init_array+0x40>)
 8007956:	4c0c      	ldr	r4, [pc, #48]	; (8007988 <__libc_init_array+0x44>)
 8007958:	f000 fc26 	bl	80081a8 <_init>
 800795c:	1ba4      	subs	r4, r4, r6
 800795e:	10a4      	asrs	r4, r4, #2
 8007960:	2500      	movs	r5, #0
 8007962:	42a5      	cmp	r5, r4
 8007964:	d105      	bne.n	8007972 <__libc_init_array+0x2e>
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800796c:	4798      	blx	r3
 800796e:	3501      	adds	r5, #1
 8007970:	e7ee      	b.n	8007950 <__libc_init_array+0xc>
 8007972:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007976:	4798      	blx	r3
 8007978:	3501      	adds	r5, #1
 800797a:	e7f2      	b.n	8007962 <__libc_init_array+0x1e>
 800797c:	0800825c 	.word	0x0800825c
 8007980:	0800825c 	.word	0x0800825c
 8007984:	0800825c 	.word	0x0800825c
 8007988:	08008260 	.word	0x08008260

0800798c <memset>:
 800798c:	4402      	add	r2, r0
 800798e:	4603      	mov	r3, r0
 8007990:	4293      	cmp	r3, r2
 8007992:	d100      	bne.n	8007996 <memset+0xa>
 8007994:	4770      	bx	lr
 8007996:	f803 1b01 	strb.w	r1, [r3], #1
 800799a:	e7f9      	b.n	8007990 <memset+0x4>

0800799c <_vsiprintf_r>:
 800799c:	b500      	push	{lr}
 800799e:	b09b      	sub	sp, #108	; 0x6c
 80079a0:	9100      	str	r1, [sp, #0]
 80079a2:	9104      	str	r1, [sp, #16]
 80079a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079a8:	9105      	str	r1, [sp, #20]
 80079aa:	9102      	str	r1, [sp, #8]
 80079ac:	4905      	ldr	r1, [pc, #20]	; (80079c4 <_vsiprintf_r+0x28>)
 80079ae:	9103      	str	r1, [sp, #12]
 80079b0:	4669      	mov	r1, sp
 80079b2:	f000 f86d 	bl	8007a90 <_svfiprintf_r>
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]
 80079bc:	b01b      	add	sp, #108	; 0x6c
 80079be:	f85d fb04 	ldr.w	pc, [sp], #4
 80079c2:	bf00      	nop
 80079c4:	ffff0208 	.word	0xffff0208

080079c8 <vsiprintf>:
 80079c8:	4613      	mov	r3, r2
 80079ca:	460a      	mov	r2, r1
 80079cc:	4601      	mov	r1, r0
 80079ce:	4802      	ldr	r0, [pc, #8]	; (80079d8 <vsiprintf+0x10>)
 80079d0:	6800      	ldr	r0, [r0, #0]
 80079d2:	f7ff bfe3 	b.w	800799c <_vsiprintf_r>
 80079d6:	bf00      	nop
 80079d8:	20000048 	.word	0x20000048

080079dc <__ssputs_r>:
 80079dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e0:	688e      	ldr	r6, [r1, #8]
 80079e2:	429e      	cmp	r6, r3
 80079e4:	4682      	mov	sl, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	4690      	mov	r8, r2
 80079ea:	4699      	mov	r9, r3
 80079ec:	d837      	bhi.n	8007a5e <__ssputs_r+0x82>
 80079ee:	898a      	ldrh	r2, [r1, #12]
 80079f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079f4:	d031      	beq.n	8007a5a <__ssputs_r+0x7e>
 80079f6:	6825      	ldr	r5, [r4, #0]
 80079f8:	6909      	ldr	r1, [r1, #16]
 80079fa:	1a6f      	subs	r7, r5, r1
 80079fc:	6965      	ldr	r5, [r4, #20]
 80079fe:	2302      	movs	r3, #2
 8007a00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a04:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a08:	f109 0301 	add.w	r3, r9, #1
 8007a0c:	443b      	add	r3, r7
 8007a0e:	429d      	cmp	r5, r3
 8007a10:	bf38      	it	cc
 8007a12:	461d      	movcc	r5, r3
 8007a14:	0553      	lsls	r3, r2, #21
 8007a16:	d530      	bpl.n	8007a7a <__ssputs_r+0x9e>
 8007a18:	4629      	mov	r1, r5
 8007a1a:	f000 fb2b 	bl	8008074 <_malloc_r>
 8007a1e:	4606      	mov	r6, r0
 8007a20:	b950      	cbnz	r0, 8007a38 <__ssputs_r+0x5c>
 8007a22:	230c      	movs	r3, #12
 8007a24:	f8ca 3000 	str.w	r3, [sl]
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295
 8007a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a38:	463a      	mov	r2, r7
 8007a3a:	6921      	ldr	r1, [r4, #16]
 8007a3c:	f000 faa8 	bl	8007f90 <memcpy>
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4a:	81a3      	strh	r3, [r4, #12]
 8007a4c:	6126      	str	r6, [r4, #16]
 8007a4e:	6165      	str	r5, [r4, #20]
 8007a50:	443e      	add	r6, r7
 8007a52:	1bed      	subs	r5, r5, r7
 8007a54:	6026      	str	r6, [r4, #0]
 8007a56:	60a5      	str	r5, [r4, #8]
 8007a58:	464e      	mov	r6, r9
 8007a5a:	454e      	cmp	r6, r9
 8007a5c:	d900      	bls.n	8007a60 <__ssputs_r+0x84>
 8007a5e:	464e      	mov	r6, r9
 8007a60:	4632      	mov	r2, r6
 8007a62:	4641      	mov	r1, r8
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	f000 fa9e 	bl	8007fa6 <memmove>
 8007a6a:	68a3      	ldr	r3, [r4, #8]
 8007a6c:	1b9b      	subs	r3, r3, r6
 8007a6e:	60a3      	str	r3, [r4, #8]
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	441e      	add	r6, r3
 8007a74:	6026      	str	r6, [r4, #0]
 8007a76:	2000      	movs	r0, #0
 8007a78:	e7dc      	b.n	8007a34 <__ssputs_r+0x58>
 8007a7a:	462a      	mov	r2, r5
 8007a7c:	f000 fb54 	bl	8008128 <_realloc_r>
 8007a80:	4606      	mov	r6, r0
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d1e2      	bne.n	8007a4c <__ssputs_r+0x70>
 8007a86:	6921      	ldr	r1, [r4, #16]
 8007a88:	4650      	mov	r0, sl
 8007a8a:	f000 faa5 	bl	8007fd8 <_free_r>
 8007a8e:	e7c8      	b.n	8007a22 <__ssputs_r+0x46>

08007a90 <_svfiprintf_r>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	461d      	mov	r5, r3
 8007a96:	898b      	ldrh	r3, [r1, #12]
 8007a98:	061f      	lsls	r7, r3, #24
 8007a9a:	b09d      	sub	sp, #116	; 0x74
 8007a9c:	4680      	mov	r8, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	4616      	mov	r6, r2
 8007aa2:	d50f      	bpl.n	8007ac4 <_svfiprintf_r+0x34>
 8007aa4:	690b      	ldr	r3, [r1, #16]
 8007aa6:	b96b      	cbnz	r3, 8007ac4 <_svfiprintf_r+0x34>
 8007aa8:	2140      	movs	r1, #64	; 0x40
 8007aaa:	f000 fae3 	bl	8008074 <_malloc_r>
 8007aae:	6020      	str	r0, [r4, #0]
 8007ab0:	6120      	str	r0, [r4, #16]
 8007ab2:	b928      	cbnz	r0, 8007ac0 <_svfiprintf_r+0x30>
 8007ab4:	230c      	movs	r3, #12
 8007ab6:	f8c8 3000 	str.w	r3, [r8]
 8007aba:	f04f 30ff 	mov.w	r0, #4294967295
 8007abe:	e0c8      	b.n	8007c52 <_svfiprintf_r+0x1c2>
 8007ac0:	2340      	movs	r3, #64	; 0x40
 8007ac2:	6163      	str	r3, [r4, #20]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac8:	2320      	movs	r3, #32
 8007aca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ace:	2330      	movs	r3, #48	; 0x30
 8007ad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ad4:	9503      	str	r5, [sp, #12]
 8007ad6:	f04f 0b01 	mov.w	fp, #1
 8007ada:	4637      	mov	r7, r6
 8007adc:	463d      	mov	r5, r7
 8007ade:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ae2:	b10b      	cbz	r3, 8007ae8 <_svfiprintf_r+0x58>
 8007ae4:	2b25      	cmp	r3, #37	; 0x25
 8007ae6:	d13e      	bne.n	8007b66 <_svfiprintf_r+0xd6>
 8007ae8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007aec:	d00b      	beq.n	8007b06 <_svfiprintf_r+0x76>
 8007aee:	4653      	mov	r3, sl
 8007af0:	4632      	mov	r2, r6
 8007af2:	4621      	mov	r1, r4
 8007af4:	4640      	mov	r0, r8
 8007af6:	f7ff ff71 	bl	80079dc <__ssputs_r>
 8007afa:	3001      	adds	r0, #1
 8007afc:	f000 80a4 	beq.w	8007c48 <_svfiprintf_r+0x1b8>
 8007b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b02:	4453      	add	r3, sl
 8007b04:	9309      	str	r3, [sp, #36]	; 0x24
 8007b06:	783b      	ldrb	r3, [r7, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 809d 	beq.w	8007c48 <_svfiprintf_r+0x1b8>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f04f 32ff 	mov.w	r2, #4294967295
 8007b14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b18:	9304      	str	r3, [sp, #16]
 8007b1a:	9307      	str	r3, [sp, #28]
 8007b1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b20:	931a      	str	r3, [sp, #104]	; 0x68
 8007b22:	462f      	mov	r7, r5
 8007b24:	2205      	movs	r2, #5
 8007b26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b2a:	4850      	ldr	r0, [pc, #320]	; (8007c6c <_svfiprintf_r+0x1dc>)
 8007b2c:	f7f8 fb78 	bl	8000220 <memchr>
 8007b30:	9b04      	ldr	r3, [sp, #16]
 8007b32:	b9d0      	cbnz	r0, 8007b6a <_svfiprintf_r+0xda>
 8007b34:	06d9      	lsls	r1, r3, #27
 8007b36:	bf44      	itt	mi
 8007b38:	2220      	movmi	r2, #32
 8007b3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b3e:	071a      	lsls	r2, r3, #28
 8007b40:	bf44      	itt	mi
 8007b42:	222b      	movmi	r2, #43	; 0x2b
 8007b44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b48:	782a      	ldrb	r2, [r5, #0]
 8007b4a:	2a2a      	cmp	r2, #42	; 0x2a
 8007b4c:	d015      	beq.n	8007b7a <_svfiprintf_r+0xea>
 8007b4e:	9a07      	ldr	r2, [sp, #28]
 8007b50:	462f      	mov	r7, r5
 8007b52:	2000      	movs	r0, #0
 8007b54:	250a      	movs	r5, #10
 8007b56:	4639      	mov	r1, r7
 8007b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b5c:	3b30      	subs	r3, #48	; 0x30
 8007b5e:	2b09      	cmp	r3, #9
 8007b60:	d94d      	bls.n	8007bfe <_svfiprintf_r+0x16e>
 8007b62:	b1b8      	cbz	r0, 8007b94 <_svfiprintf_r+0x104>
 8007b64:	e00f      	b.n	8007b86 <_svfiprintf_r+0xf6>
 8007b66:	462f      	mov	r7, r5
 8007b68:	e7b8      	b.n	8007adc <_svfiprintf_r+0x4c>
 8007b6a:	4a40      	ldr	r2, [pc, #256]	; (8007c6c <_svfiprintf_r+0x1dc>)
 8007b6c:	1a80      	subs	r0, r0, r2
 8007b6e:	fa0b f000 	lsl.w	r0, fp, r0
 8007b72:	4318      	orrs	r0, r3
 8007b74:	9004      	str	r0, [sp, #16]
 8007b76:	463d      	mov	r5, r7
 8007b78:	e7d3      	b.n	8007b22 <_svfiprintf_r+0x92>
 8007b7a:	9a03      	ldr	r2, [sp, #12]
 8007b7c:	1d11      	adds	r1, r2, #4
 8007b7e:	6812      	ldr	r2, [r2, #0]
 8007b80:	9103      	str	r1, [sp, #12]
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	db01      	blt.n	8007b8a <_svfiprintf_r+0xfa>
 8007b86:	9207      	str	r2, [sp, #28]
 8007b88:	e004      	b.n	8007b94 <_svfiprintf_r+0x104>
 8007b8a:	4252      	negs	r2, r2
 8007b8c:	f043 0302 	orr.w	r3, r3, #2
 8007b90:	9207      	str	r2, [sp, #28]
 8007b92:	9304      	str	r3, [sp, #16]
 8007b94:	783b      	ldrb	r3, [r7, #0]
 8007b96:	2b2e      	cmp	r3, #46	; 0x2e
 8007b98:	d10c      	bne.n	8007bb4 <_svfiprintf_r+0x124>
 8007b9a:	787b      	ldrb	r3, [r7, #1]
 8007b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9e:	d133      	bne.n	8007c08 <_svfiprintf_r+0x178>
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	1d1a      	adds	r2, r3, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	9203      	str	r2, [sp, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bfb8      	it	lt
 8007bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bb0:	3702      	adds	r7, #2
 8007bb2:	9305      	str	r3, [sp, #20]
 8007bb4:	4d2e      	ldr	r5, [pc, #184]	; (8007c70 <_svfiprintf_r+0x1e0>)
 8007bb6:	7839      	ldrb	r1, [r7, #0]
 8007bb8:	2203      	movs	r2, #3
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f7f8 fb30 	bl	8000220 <memchr>
 8007bc0:	b138      	cbz	r0, 8007bd2 <_svfiprintf_r+0x142>
 8007bc2:	2340      	movs	r3, #64	; 0x40
 8007bc4:	1b40      	subs	r0, r0, r5
 8007bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8007bca:	9b04      	ldr	r3, [sp, #16]
 8007bcc:	4303      	orrs	r3, r0
 8007bce:	3701      	adds	r7, #1
 8007bd0:	9304      	str	r3, [sp, #16]
 8007bd2:	7839      	ldrb	r1, [r7, #0]
 8007bd4:	4827      	ldr	r0, [pc, #156]	; (8007c74 <_svfiprintf_r+0x1e4>)
 8007bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bda:	2206      	movs	r2, #6
 8007bdc:	1c7e      	adds	r6, r7, #1
 8007bde:	f7f8 fb1f 	bl	8000220 <memchr>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d038      	beq.n	8007c58 <_svfiprintf_r+0x1c8>
 8007be6:	4b24      	ldr	r3, [pc, #144]	; (8007c78 <_svfiprintf_r+0x1e8>)
 8007be8:	bb13      	cbnz	r3, 8007c30 <_svfiprintf_r+0x1a0>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	3307      	adds	r3, #7
 8007bee:	f023 0307 	bic.w	r3, r3, #7
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	9303      	str	r3, [sp, #12]
 8007bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf8:	444b      	add	r3, r9
 8007bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfc:	e76d      	b.n	8007ada <_svfiprintf_r+0x4a>
 8007bfe:	fb05 3202 	mla	r2, r5, r2, r3
 8007c02:	2001      	movs	r0, #1
 8007c04:	460f      	mov	r7, r1
 8007c06:	e7a6      	b.n	8007b56 <_svfiprintf_r+0xc6>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	3701      	adds	r7, #1
 8007c0c:	9305      	str	r3, [sp, #20]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	250a      	movs	r5, #10
 8007c12:	4638      	mov	r0, r7
 8007c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c18:	3a30      	subs	r2, #48	; 0x30
 8007c1a:	2a09      	cmp	r2, #9
 8007c1c:	d903      	bls.n	8007c26 <_svfiprintf_r+0x196>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0c8      	beq.n	8007bb4 <_svfiprintf_r+0x124>
 8007c22:	9105      	str	r1, [sp, #20]
 8007c24:	e7c6      	b.n	8007bb4 <_svfiprintf_r+0x124>
 8007c26:	fb05 2101 	mla	r1, r5, r1, r2
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	e7f0      	b.n	8007c12 <_svfiprintf_r+0x182>
 8007c30:	ab03      	add	r3, sp, #12
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	4622      	mov	r2, r4
 8007c36:	4b11      	ldr	r3, [pc, #68]	; (8007c7c <_svfiprintf_r+0x1ec>)
 8007c38:	a904      	add	r1, sp, #16
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	f3af 8000 	nop.w
 8007c40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c44:	4681      	mov	r9, r0
 8007c46:	d1d6      	bne.n	8007bf6 <_svfiprintf_r+0x166>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	065b      	lsls	r3, r3, #25
 8007c4c:	f53f af35 	bmi.w	8007aba <_svfiprintf_r+0x2a>
 8007c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c52:	b01d      	add	sp, #116	; 0x74
 8007c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c58:	ab03      	add	r3, sp, #12
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <_svfiprintf_r+0x1ec>)
 8007c60:	a904      	add	r1, sp, #16
 8007c62:	4640      	mov	r0, r8
 8007c64:	f000 f882 	bl	8007d6c <_printf_i>
 8007c68:	e7ea      	b.n	8007c40 <_svfiprintf_r+0x1b0>
 8007c6a:	bf00      	nop
 8007c6c:	08008220 	.word	0x08008220
 8007c70:	08008226 	.word	0x08008226
 8007c74:	0800822a 	.word	0x0800822a
 8007c78:	00000000 	.word	0x00000000
 8007c7c:	080079dd 	.word	0x080079dd

08007c80 <_printf_common>:
 8007c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c84:	4691      	mov	r9, r2
 8007c86:	461f      	mov	r7, r3
 8007c88:	688a      	ldr	r2, [r1, #8]
 8007c8a:	690b      	ldr	r3, [r1, #16]
 8007c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c90:	4293      	cmp	r3, r2
 8007c92:	bfb8      	it	lt
 8007c94:	4613      	movlt	r3, r2
 8007c96:	f8c9 3000 	str.w	r3, [r9]
 8007c9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	b112      	cbz	r2, 8007caa <_printf_common+0x2a>
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	f8c9 3000 	str.w	r3, [r9]
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	0699      	lsls	r1, r3, #26
 8007cae:	bf42      	ittt	mi
 8007cb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007cb4:	3302      	addmi	r3, #2
 8007cb6:	f8c9 3000 	strmi.w	r3, [r9]
 8007cba:	6825      	ldr	r5, [r4, #0]
 8007cbc:	f015 0506 	ands.w	r5, r5, #6
 8007cc0:	d107      	bne.n	8007cd2 <_printf_common+0x52>
 8007cc2:	f104 0a19 	add.w	sl, r4, #25
 8007cc6:	68e3      	ldr	r3, [r4, #12]
 8007cc8:	f8d9 2000 	ldr.w	r2, [r9]
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	42ab      	cmp	r3, r5
 8007cd0:	dc28      	bgt.n	8007d24 <_printf_common+0xa4>
 8007cd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007cd6:	6822      	ldr	r2, [r4, #0]
 8007cd8:	3300      	adds	r3, #0
 8007cda:	bf18      	it	ne
 8007cdc:	2301      	movne	r3, #1
 8007cde:	0692      	lsls	r2, r2, #26
 8007ce0:	d42d      	bmi.n	8007d3e <_printf_common+0xbe>
 8007ce2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	4630      	mov	r0, r6
 8007cea:	47c0      	blx	r8
 8007cec:	3001      	adds	r0, #1
 8007cee:	d020      	beq.n	8007d32 <_printf_common+0xb2>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	68e5      	ldr	r5, [r4, #12]
 8007cf4:	f8d9 2000 	ldr.w	r2, [r9]
 8007cf8:	f003 0306 	and.w	r3, r3, #6
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	bf08      	it	eq
 8007d00:	1aad      	subeq	r5, r5, r2
 8007d02:	68a3      	ldr	r3, [r4, #8]
 8007d04:	6922      	ldr	r2, [r4, #16]
 8007d06:	bf0c      	ite	eq
 8007d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d0c:	2500      	movne	r5, #0
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	bfc4      	itt	gt
 8007d12:	1a9b      	subgt	r3, r3, r2
 8007d14:	18ed      	addgt	r5, r5, r3
 8007d16:	f04f 0900 	mov.w	r9, #0
 8007d1a:	341a      	adds	r4, #26
 8007d1c:	454d      	cmp	r5, r9
 8007d1e:	d11a      	bne.n	8007d56 <_printf_common+0xd6>
 8007d20:	2000      	movs	r0, #0
 8007d22:	e008      	b.n	8007d36 <_printf_common+0xb6>
 8007d24:	2301      	movs	r3, #1
 8007d26:	4652      	mov	r2, sl
 8007d28:	4639      	mov	r1, r7
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	47c0      	blx	r8
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d103      	bne.n	8007d3a <_printf_common+0xba>
 8007d32:	f04f 30ff 	mov.w	r0, #4294967295
 8007d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d3a:	3501      	adds	r5, #1
 8007d3c:	e7c3      	b.n	8007cc6 <_printf_common+0x46>
 8007d3e:	18e1      	adds	r1, r4, r3
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	2030      	movs	r0, #48	; 0x30
 8007d44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d48:	4422      	add	r2, r4
 8007d4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d52:	3302      	adds	r3, #2
 8007d54:	e7c5      	b.n	8007ce2 <_printf_common+0x62>
 8007d56:	2301      	movs	r3, #1
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	47c0      	blx	r8
 8007d60:	3001      	adds	r0, #1
 8007d62:	d0e6      	beq.n	8007d32 <_printf_common+0xb2>
 8007d64:	f109 0901 	add.w	r9, r9, #1
 8007d68:	e7d8      	b.n	8007d1c <_printf_common+0x9c>
	...

08007d6c <_printf_i>:
 8007d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d74:	460c      	mov	r4, r1
 8007d76:	7e09      	ldrb	r1, [r1, #24]
 8007d78:	b085      	sub	sp, #20
 8007d7a:	296e      	cmp	r1, #110	; 0x6e
 8007d7c:	4617      	mov	r7, r2
 8007d7e:	4606      	mov	r6, r0
 8007d80:	4698      	mov	r8, r3
 8007d82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d84:	f000 80b3 	beq.w	8007eee <_printf_i+0x182>
 8007d88:	d822      	bhi.n	8007dd0 <_printf_i+0x64>
 8007d8a:	2963      	cmp	r1, #99	; 0x63
 8007d8c:	d036      	beq.n	8007dfc <_printf_i+0x90>
 8007d8e:	d80a      	bhi.n	8007da6 <_printf_i+0x3a>
 8007d90:	2900      	cmp	r1, #0
 8007d92:	f000 80b9 	beq.w	8007f08 <_printf_i+0x19c>
 8007d96:	2958      	cmp	r1, #88	; 0x58
 8007d98:	f000 8083 	beq.w	8007ea2 <_printf_i+0x136>
 8007d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007da0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007da4:	e032      	b.n	8007e0c <_printf_i+0xa0>
 8007da6:	2964      	cmp	r1, #100	; 0x64
 8007da8:	d001      	beq.n	8007dae <_printf_i+0x42>
 8007daa:	2969      	cmp	r1, #105	; 0x69
 8007dac:	d1f6      	bne.n	8007d9c <_printf_i+0x30>
 8007dae:	6820      	ldr	r0, [r4, #0]
 8007db0:	6813      	ldr	r3, [r2, #0]
 8007db2:	0605      	lsls	r5, r0, #24
 8007db4:	f103 0104 	add.w	r1, r3, #4
 8007db8:	d52a      	bpl.n	8007e10 <_printf_i+0xa4>
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6011      	str	r1, [r2, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	da03      	bge.n	8007dca <_printf_i+0x5e>
 8007dc2:	222d      	movs	r2, #45	; 0x2d
 8007dc4:	425b      	negs	r3, r3
 8007dc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007dca:	486f      	ldr	r0, [pc, #444]	; (8007f88 <_printf_i+0x21c>)
 8007dcc:	220a      	movs	r2, #10
 8007dce:	e039      	b.n	8007e44 <_printf_i+0xd8>
 8007dd0:	2973      	cmp	r1, #115	; 0x73
 8007dd2:	f000 809d 	beq.w	8007f10 <_printf_i+0x1a4>
 8007dd6:	d808      	bhi.n	8007dea <_printf_i+0x7e>
 8007dd8:	296f      	cmp	r1, #111	; 0x6f
 8007dda:	d020      	beq.n	8007e1e <_printf_i+0xb2>
 8007ddc:	2970      	cmp	r1, #112	; 0x70
 8007dde:	d1dd      	bne.n	8007d9c <_printf_i+0x30>
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	f043 0320 	orr.w	r3, r3, #32
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	e003      	b.n	8007df2 <_printf_i+0x86>
 8007dea:	2975      	cmp	r1, #117	; 0x75
 8007dec:	d017      	beq.n	8007e1e <_printf_i+0xb2>
 8007dee:	2978      	cmp	r1, #120	; 0x78
 8007df0:	d1d4      	bne.n	8007d9c <_printf_i+0x30>
 8007df2:	2378      	movs	r3, #120	; 0x78
 8007df4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007df8:	4864      	ldr	r0, [pc, #400]	; (8007f8c <_printf_i+0x220>)
 8007dfa:	e055      	b.n	8007ea8 <_printf_i+0x13c>
 8007dfc:	6813      	ldr	r3, [r2, #0]
 8007dfe:	1d19      	adds	r1, r3, #4
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6011      	str	r1, [r2, #0]
 8007e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e08c      	b.n	8007f2a <_printf_i+0x1be>
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6011      	str	r1, [r2, #0]
 8007e14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e18:	bf18      	it	ne
 8007e1a:	b21b      	sxthne	r3, r3
 8007e1c:	e7cf      	b.n	8007dbe <_printf_i+0x52>
 8007e1e:	6813      	ldr	r3, [r2, #0]
 8007e20:	6825      	ldr	r5, [r4, #0]
 8007e22:	1d18      	adds	r0, r3, #4
 8007e24:	6010      	str	r0, [r2, #0]
 8007e26:	0628      	lsls	r0, r5, #24
 8007e28:	d501      	bpl.n	8007e2e <_printf_i+0xc2>
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	e002      	b.n	8007e34 <_printf_i+0xc8>
 8007e2e:	0668      	lsls	r0, r5, #25
 8007e30:	d5fb      	bpl.n	8007e2a <_printf_i+0xbe>
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	4854      	ldr	r0, [pc, #336]	; (8007f88 <_printf_i+0x21c>)
 8007e36:	296f      	cmp	r1, #111	; 0x6f
 8007e38:	bf14      	ite	ne
 8007e3a:	220a      	movne	r2, #10
 8007e3c:	2208      	moveq	r2, #8
 8007e3e:	2100      	movs	r1, #0
 8007e40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e44:	6865      	ldr	r5, [r4, #4]
 8007e46:	60a5      	str	r5, [r4, #8]
 8007e48:	2d00      	cmp	r5, #0
 8007e4a:	f2c0 8095 	blt.w	8007f78 <_printf_i+0x20c>
 8007e4e:	6821      	ldr	r1, [r4, #0]
 8007e50:	f021 0104 	bic.w	r1, r1, #4
 8007e54:	6021      	str	r1, [r4, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d13d      	bne.n	8007ed6 <_printf_i+0x16a>
 8007e5a:	2d00      	cmp	r5, #0
 8007e5c:	f040 808e 	bne.w	8007f7c <_printf_i+0x210>
 8007e60:	4665      	mov	r5, ip
 8007e62:	2a08      	cmp	r2, #8
 8007e64:	d10b      	bne.n	8007e7e <_printf_i+0x112>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	07db      	lsls	r3, r3, #31
 8007e6a:	d508      	bpl.n	8007e7e <_printf_i+0x112>
 8007e6c:	6923      	ldr	r3, [r4, #16]
 8007e6e:	6862      	ldr	r2, [r4, #4]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	bfde      	ittt	le
 8007e74:	2330      	movle	r3, #48	; 0x30
 8007e76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e7e:	ebac 0305 	sub.w	r3, ip, r5
 8007e82:	6123      	str	r3, [r4, #16]
 8007e84:	f8cd 8000 	str.w	r8, [sp]
 8007e88:	463b      	mov	r3, r7
 8007e8a:	aa03      	add	r2, sp, #12
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f7ff fef6 	bl	8007c80 <_printf_common>
 8007e94:	3001      	adds	r0, #1
 8007e96:	d14d      	bne.n	8007f34 <_printf_i+0x1c8>
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	b005      	add	sp, #20
 8007e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ea2:	4839      	ldr	r0, [pc, #228]	; (8007f88 <_printf_i+0x21c>)
 8007ea4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007ea8:	6813      	ldr	r3, [r2, #0]
 8007eaa:	6821      	ldr	r1, [r4, #0]
 8007eac:	1d1d      	adds	r5, r3, #4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6015      	str	r5, [r2, #0]
 8007eb2:	060a      	lsls	r2, r1, #24
 8007eb4:	d50b      	bpl.n	8007ece <_printf_i+0x162>
 8007eb6:	07ca      	lsls	r2, r1, #31
 8007eb8:	bf44      	itt	mi
 8007eba:	f041 0120 	orrmi.w	r1, r1, #32
 8007ebe:	6021      	strmi	r1, [r4, #0]
 8007ec0:	b91b      	cbnz	r3, 8007eca <_printf_i+0x15e>
 8007ec2:	6822      	ldr	r2, [r4, #0]
 8007ec4:	f022 0220 	bic.w	r2, r2, #32
 8007ec8:	6022      	str	r2, [r4, #0]
 8007eca:	2210      	movs	r2, #16
 8007ecc:	e7b7      	b.n	8007e3e <_printf_i+0xd2>
 8007ece:	064d      	lsls	r5, r1, #25
 8007ed0:	bf48      	it	mi
 8007ed2:	b29b      	uxthmi	r3, r3
 8007ed4:	e7ef      	b.n	8007eb6 <_printf_i+0x14a>
 8007ed6:	4665      	mov	r5, ip
 8007ed8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007edc:	fb02 3311 	mls	r3, r2, r1, r3
 8007ee0:	5cc3      	ldrb	r3, [r0, r3]
 8007ee2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	2900      	cmp	r1, #0
 8007eea:	d1f5      	bne.n	8007ed8 <_printf_i+0x16c>
 8007eec:	e7b9      	b.n	8007e62 <_printf_i+0xf6>
 8007eee:	6813      	ldr	r3, [r2, #0]
 8007ef0:	6825      	ldr	r5, [r4, #0]
 8007ef2:	6961      	ldr	r1, [r4, #20]
 8007ef4:	1d18      	adds	r0, r3, #4
 8007ef6:	6010      	str	r0, [r2, #0]
 8007ef8:	0628      	lsls	r0, r5, #24
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	d501      	bpl.n	8007f02 <_printf_i+0x196>
 8007efe:	6019      	str	r1, [r3, #0]
 8007f00:	e002      	b.n	8007f08 <_printf_i+0x19c>
 8007f02:	066a      	lsls	r2, r5, #25
 8007f04:	d5fb      	bpl.n	8007efe <_printf_i+0x192>
 8007f06:	8019      	strh	r1, [r3, #0]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6123      	str	r3, [r4, #16]
 8007f0c:	4665      	mov	r5, ip
 8007f0e:	e7b9      	b.n	8007e84 <_printf_i+0x118>
 8007f10:	6813      	ldr	r3, [r2, #0]
 8007f12:	1d19      	adds	r1, r3, #4
 8007f14:	6011      	str	r1, [r2, #0]
 8007f16:	681d      	ldr	r5, [r3, #0]
 8007f18:	6862      	ldr	r2, [r4, #4]
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f7f8 f97f 	bl	8000220 <memchr>
 8007f22:	b108      	cbz	r0, 8007f28 <_printf_i+0x1bc>
 8007f24:	1b40      	subs	r0, r0, r5
 8007f26:	6060      	str	r0, [r4, #4]
 8007f28:	6863      	ldr	r3, [r4, #4]
 8007f2a:	6123      	str	r3, [r4, #16]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f32:	e7a7      	b.n	8007e84 <_printf_i+0x118>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	462a      	mov	r2, r5
 8007f38:	4639      	mov	r1, r7
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	47c0      	blx	r8
 8007f3e:	3001      	adds	r0, #1
 8007f40:	d0aa      	beq.n	8007e98 <_printf_i+0x12c>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	079b      	lsls	r3, r3, #30
 8007f46:	d413      	bmi.n	8007f70 <_printf_i+0x204>
 8007f48:	68e0      	ldr	r0, [r4, #12]
 8007f4a:	9b03      	ldr	r3, [sp, #12]
 8007f4c:	4298      	cmp	r0, r3
 8007f4e:	bfb8      	it	lt
 8007f50:	4618      	movlt	r0, r3
 8007f52:	e7a3      	b.n	8007e9c <_printf_i+0x130>
 8007f54:	2301      	movs	r3, #1
 8007f56:	464a      	mov	r2, r9
 8007f58:	4639      	mov	r1, r7
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	47c0      	blx	r8
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d09a      	beq.n	8007e98 <_printf_i+0x12c>
 8007f62:	3501      	adds	r5, #1
 8007f64:	68e3      	ldr	r3, [r4, #12]
 8007f66:	9a03      	ldr	r2, [sp, #12]
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	42ab      	cmp	r3, r5
 8007f6c:	dcf2      	bgt.n	8007f54 <_printf_i+0x1e8>
 8007f6e:	e7eb      	b.n	8007f48 <_printf_i+0x1dc>
 8007f70:	2500      	movs	r5, #0
 8007f72:	f104 0919 	add.w	r9, r4, #25
 8007f76:	e7f5      	b.n	8007f64 <_printf_i+0x1f8>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1ac      	bne.n	8007ed6 <_printf_i+0x16a>
 8007f7c:	7803      	ldrb	r3, [r0, #0]
 8007f7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f86:	e76c      	b.n	8007e62 <_printf_i+0xf6>
 8007f88:	08008231 	.word	0x08008231
 8007f8c:	08008242 	.word	0x08008242

08007f90 <memcpy>:
 8007f90:	b510      	push	{r4, lr}
 8007f92:	1e43      	subs	r3, r0, #1
 8007f94:	440a      	add	r2, r1
 8007f96:	4291      	cmp	r1, r2
 8007f98:	d100      	bne.n	8007f9c <memcpy+0xc>
 8007f9a:	bd10      	pop	{r4, pc}
 8007f9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa4:	e7f7      	b.n	8007f96 <memcpy+0x6>

08007fa6 <memmove>:
 8007fa6:	4288      	cmp	r0, r1
 8007fa8:	b510      	push	{r4, lr}
 8007faa:	eb01 0302 	add.w	r3, r1, r2
 8007fae:	d807      	bhi.n	8007fc0 <memmove+0x1a>
 8007fb0:	1e42      	subs	r2, r0, #1
 8007fb2:	4299      	cmp	r1, r3
 8007fb4:	d00a      	beq.n	8007fcc <memmove+0x26>
 8007fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fba:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007fbe:	e7f8      	b.n	8007fb2 <memmove+0xc>
 8007fc0:	4283      	cmp	r3, r0
 8007fc2:	d9f5      	bls.n	8007fb0 <memmove+0xa>
 8007fc4:	1881      	adds	r1, r0, r2
 8007fc6:	1ad2      	subs	r2, r2, r3
 8007fc8:	42d3      	cmn	r3, r2
 8007fca:	d100      	bne.n	8007fce <memmove+0x28>
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fd2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007fd6:	e7f7      	b.n	8007fc8 <memmove+0x22>

08007fd8 <_free_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4605      	mov	r5, r0
 8007fdc:	2900      	cmp	r1, #0
 8007fde:	d045      	beq.n	800806c <_free_r+0x94>
 8007fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fe4:	1f0c      	subs	r4, r1, #4
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bfb8      	it	lt
 8007fea:	18e4      	addlt	r4, r4, r3
 8007fec:	f000 f8d2 	bl	8008194 <__malloc_lock>
 8007ff0:	4a1f      	ldr	r2, [pc, #124]	; (8008070 <_free_r+0x98>)
 8007ff2:	6813      	ldr	r3, [r2, #0]
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	b933      	cbnz	r3, 8008006 <_free_r+0x2e>
 8007ff8:	6063      	str	r3, [r4, #4]
 8007ffa:	6014      	str	r4, [r2, #0]
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008002:	f000 b8c8 	b.w	8008196 <__malloc_unlock>
 8008006:	42a3      	cmp	r3, r4
 8008008:	d90c      	bls.n	8008024 <_free_r+0x4c>
 800800a:	6821      	ldr	r1, [r4, #0]
 800800c:	1862      	adds	r2, r4, r1
 800800e:	4293      	cmp	r3, r2
 8008010:	bf04      	itt	eq
 8008012:	681a      	ldreq	r2, [r3, #0]
 8008014:	685b      	ldreq	r3, [r3, #4]
 8008016:	6063      	str	r3, [r4, #4]
 8008018:	bf04      	itt	eq
 800801a:	1852      	addeq	r2, r2, r1
 800801c:	6022      	streq	r2, [r4, #0]
 800801e:	6004      	str	r4, [r0, #0]
 8008020:	e7ec      	b.n	8007ffc <_free_r+0x24>
 8008022:	4613      	mov	r3, r2
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	b10a      	cbz	r2, 800802c <_free_r+0x54>
 8008028:	42a2      	cmp	r2, r4
 800802a:	d9fa      	bls.n	8008022 <_free_r+0x4a>
 800802c:	6819      	ldr	r1, [r3, #0]
 800802e:	1858      	adds	r0, r3, r1
 8008030:	42a0      	cmp	r0, r4
 8008032:	d10b      	bne.n	800804c <_free_r+0x74>
 8008034:	6820      	ldr	r0, [r4, #0]
 8008036:	4401      	add	r1, r0
 8008038:	1858      	adds	r0, r3, r1
 800803a:	4282      	cmp	r2, r0
 800803c:	6019      	str	r1, [r3, #0]
 800803e:	d1dd      	bne.n	8007ffc <_free_r+0x24>
 8008040:	6810      	ldr	r0, [r2, #0]
 8008042:	6852      	ldr	r2, [r2, #4]
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	4401      	add	r1, r0
 8008048:	6019      	str	r1, [r3, #0]
 800804a:	e7d7      	b.n	8007ffc <_free_r+0x24>
 800804c:	d902      	bls.n	8008054 <_free_r+0x7c>
 800804e:	230c      	movs	r3, #12
 8008050:	602b      	str	r3, [r5, #0]
 8008052:	e7d3      	b.n	8007ffc <_free_r+0x24>
 8008054:	6820      	ldr	r0, [r4, #0]
 8008056:	1821      	adds	r1, r4, r0
 8008058:	428a      	cmp	r2, r1
 800805a:	bf04      	itt	eq
 800805c:	6811      	ldreq	r1, [r2, #0]
 800805e:	6852      	ldreq	r2, [r2, #4]
 8008060:	6062      	str	r2, [r4, #4]
 8008062:	bf04      	itt	eq
 8008064:	1809      	addeq	r1, r1, r0
 8008066:	6021      	streq	r1, [r4, #0]
 8008068:	605c      	str	r4, [r3, #4]
 800806a:	e7c7      	b.n	8007ffc <_free_r+0x24>
 800806c:	bd38      	pop	{r3, r4, r5, pc}
 800806e:	bf00      	nop
 8008070:	200000e8 	.word	0x200000e8

08008074 <_malloc_r>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	1ccd      	adds	r5, r1, #3
 8008078:	f025 0503 	bic.w	r5, r5, #3
 800807c:	3508      	adds	r5, #8
 800807e:	2d0c      	cmp	r5, #12
 8008080:	bf38      	it	cc
 8008082:	250c      	movcc	r5, #12
 8008084:	2d00      	cmp	r5, #0
 8008086:	4606      	mov	r6, r0
 8008088:	db01      	blt.n	800808e <_malloc_r+0x1a>
 800808a:	42a9      	cmp	r1, r5
 800808c:	d903      	bls.n	8008096 <_malloc_r+0x22>
 800808e:	230c      	movs	r3, #12
 8008090:	6033      	str	r3, [r6, #0]
 8008092:	2000      	movs	r0, #0
 8008094:	bd70      	pop	{r4, r5, r6, pc}
 8008096:	f000 f87d 	bl	8008194 <__malloc_lock>
 800809a:	4a21      	ldr	r2, [pc, #132]	; (8008120 <_malloc_r+0xac>)
 800809c:	6814      	ldr	r4, [r2, #0]
 800809e:	4621      	mov	r1, r4
 80080a0:	b991      	cbnz	r1, 80080c8 <_malloc_r+0x54>
 80080a2:	4c20      	ldr	r4, [pc, #128]	; (8008124 <_malloc_r+0xb0>)
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	b91b      	cbnz	r3, 80080b0 <_malloc_r+0x3c>
 80080a8:	4630      	mov	r0, r6
 80080aa:	f000 f863 	bl	8008174 <_sbrk_r>
 80080ae:	6020      	str	r0, [r4, #0]
 80080b0:	4629      	mov	r1, r5
 80080b2:	4630      	mov	r0, r6
 80080b4:	f000 f85e 	bl	8008174 <_sbrk_r>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d124      	bne.n	8008106 <_malloc_r+0x92>
 80080bc:	230c      	movs	r3, #12
 80080be:	6033      	str	r3, [r6, #0]
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 f868 	bl	8008196 <__malloc_unlock>
 80080c6:	e7e4      	b.n	8008092 <_malloc_r+0x1e>
 80080c8:	680b      	ldr	r3, [r1, #0]
 80080ca:	1b5b      	subs	r3, r3, r5
 80080cc:	d418      	bmi.n	8008100 <_malloc_r+0x8c>
 80080ce:	2b0b      	cmp	r3, #11
 80080d0:	d90f      	bls.n	80080f2 <_malloc_r+0x7e>
 80080d2:	600b      	str	r3, [r1, #0]
 80080d4:	50cd      	str	r5, [r1, r3]
 80080d6:	18cc      	adds	r4, r1, r3
 80080d8:	4630      	mov	r0, r6
 80080da:	f000 f85c 	bl	8008196 <__malloc_unlock>
 80080de:	f104 000b 	add.w	r0, r4, #11
 80080e2:	1d23      	adds	r3, r4, #4
 80080e4:	f020 0007 	bic.w	r0, r0, #7
 80080e8:	1ac3      	subs	r3, r0, r3
 80080ea:	d0d3      	beq.n	8008094 <_malloc_r+0x20>
 80080ec:	425a      	negs	r2, r3
 80080ee:	50e2      	str	r2, [r4, r3]
 80080f0:	e7d0      	b.n	8008094 <_malloc_r+0x20>
 80080f2:	428c      	cmp	r4, r1
 80080f4:	684b      	ldr	r3, [r1, #4]
 80080f6:	bf16      	itet	ne
 80080f8:	6063      	strne	r3, [r4, #4]
 80080fa:	6013      	streq	r3, [r2, #0]
 80080fc:	460c      	movne	r4, r1
 80080fe:	e7eb      	b.n	80080d8 <_malloc_r+0x64>
 8008100:	460c      	mov	r4, r1
 8008102:	6849      	ldr	r1, [r1, #4]
 8008104:	e7cc      	b.n	80080a0 <_malloc_r+0x2c>
 8008106:	1cc4      	adds	r4, r0, #3
 8008108:	f024 0403 	bic.w	r4, r4, #3
 800810c:	42a0      	cmp	r0, r4
 800810e:	d005      	beq.n	800811c <_malloc_r+0xa8>
 8008110:	1a21      	subs	r1, r4, r0
 8008112:	4630      	mov	r0, r6
 8008114:	f000 f82e 	bl	8008174 <_sbrk_r>
 8008118:	3001      	adds	r0, #1
 800811a:	d0cf      	beq.n	80080bc <_malloc_r+0x48>
 800811c:	6025      	str	r5, [r4, #0]
 800811e:	e7db      	b.n	80080d8 <_malloc_r+0x64>
 8008120:	200000e8 	.word	0x200000e8
 8008124:	200000ec 	.word	0x200000ec

08008128 <_realloc_r>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	4607      	mov	r7, r0
 800812c:	4614      	mov	r4, r2
 800812e:	460e      	mov	r6, r1
 8008130:	b921      	cbnz	r1, 800813c <_realloc_r+0x14>
 8008132:	4611      	mov	r1, r2
 8008134:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008138:	f7ff bf9c 	b.w	8008074 <_malloc_r>
 800813c:	b922      	cbnz	r2, 8008148 <_realloc_r+0x20>
 800813e:	f7ff ff4b 	bl	8007fd8 <_free_r>
 8008142:	4625      	mov	r5, r4
 8008144:	4628      	mov	r0, r5
 8008146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008148:	f000 f826 	bl	8008198 <_malloc_usable_size_r>
 800814c:	42a0      	cmp	r0, r4
 800814e:	d20f      	bcs.n	8008170 <_realloc_r+0x48>
 8008150:	4621      	mov	r1, r4
 8008152:	4638      	mov	r0, r7
 8008154:	f7ff ff8e 	bl	8008074 <_malloc_r>
 8008158:	4605      	mov	r5, r0
 800815a:	2800      	cmp	r0, #0
 800815c:	d0f2      	beq.n	8008144 <_realloc_r+0x1c>
 800815e:	4631      	mov	r1, r6
 8008160:	4622      	mov	r2, r4
 8008162:	f7ff ff15 	bl	8007f90 <memcpy>
 8008166:	4631      	mov	r1, r6
 8008168:	4638      	mov	r0, r7
 800816a:	f7ff ff35 	bl	8007fd8 <_free_r>
 800816e:	e7e9      	b.n	8008144 <_realloc_r+0x1c>
 8008170:	4635      	mov	r5, r6
 8008172:	e7e7      	b.n	8008144 <_realloc_r+0x1c>

08008174 <_sbrk_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4c06      	ldr	r4, [pc, #24]	; (8008190 <_sbrk_r+0x1c>)
 8008178:	2300      	movs	r3, #0
 800817a:	4605      	mov	r5, r0
 800817c:	4608      	mov	r0, r1
 800817e:	6023      	str	r3, [r4, #0]
 8008180:	f7fa f852 	bl	8002228 <_sbrk>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_sbrk_r+0x1a>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	b103      	cbz	r3, 800818e <_sbrk_r+0x1a>
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	200004e4 	.word	0x200004e4

08008194 <__malloc_lock>:
 8008194:	4770      	bx	lr

08008196 <__malloc_unlock>:
 8008196:	4770      	bx	lr

08008198 <_malloc_usable_size_r>:
 8008198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800819c:	1f18      	subs	r0, r3, #4
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bfbc      	itt	lt
 80081a2:	580b      	ldrlt	r3, [r1, r0]
 80081a4:	18c0      	addlt	r0, r0, r3
 80081a6:	4770      	bx	lr

080081a8 <_init>:
 80081a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081aa:	bf00      	nop
 80081ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ae:	bc08      	pop	{r3}
 80081b0:	469e      	mov	lr, r3
 80081b2:	4770      	bx	lr

080081b4 <_fini>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	bf00      	nop
 80081b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ba:	bc08      	pop	{r3}
 80081bc:	469e      	mov	lr, r3
 80081be:	4770      	bx	lr
