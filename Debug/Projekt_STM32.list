
Projekt_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aee4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800b0b8  0800b0b8  0001b0b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b464  0800b464  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800b464  0800b464  0001b464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b46c  0800b46c  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b46c  0800b46c  0001b46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b470  0800b470  0001b470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800b474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000220  0800b694  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800b694  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f96  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003190  00000000  00000000  000371e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  0003a378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  0003b580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028925  00000000  00000000  0003c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d97  00000000  00000000  00064ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2833  00000000  00000000  00075c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f4  00000000  00000000  001684af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a74  00000000  00000000  001685a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b09c 	.word	0x0800b09c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800b09c 	.word	0x0800b09c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fde:	4bb3      	ldr	r3, [pc, #716]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4ab2      	ldr	r2, [pc, #712]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8000fe4:	f043 0310 	orr.w	r3, r3, #16
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4bb0      	ldr	r3, [pc, #704]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	623b      	str	r3, [r7, #32]
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	4bad      	ldr	r3, [pc, #692]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4aac      	ldr	r2, [pc, #688]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4baa      	ldr	r3, [pc, #680]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800100e:	4ba7      	ldr	r3, [pc, #668]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4aa6      	ldr	r2, [pc, #664]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001014:	f043 0320 	orr.w	r3, r3, #32
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4ba4      	ldr	r3, [pc, #656]	; (80012ac <MX_GPIO_Init+0x2e4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0320 	and.w	r3, r3, #32
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	4ba1      	ldr	r3, [pc, #644]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4aa0      	ldr	r2, [pc, #640]	; (80012ac <MX_GPIO_Init+0x2e4>)
 800102c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b9e      	ldr	r3, [pc, #632]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b9b      	ldr	r3, [pc, #620]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a9a      	ldr	r2, [pc, #616]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b98      	ldr	r3, [pc, #608]	; (80012ac <MX_GPIO_Init+0x2e4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b95      	ldr	r3, [pc, #596]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a94      	ldr	r2, [pc, #592]	; (80012ac <MX_GPIO_Init+0x2e4>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b92      	ldr	r3, [pc, #584]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800106e:	4b8f      	ldr	r3, [pc, #572]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a8e      	ldr	r2, [pc, #568]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b8c      	ldr	r3, [pc, #560]	; (80012ac <MX_GPIO_Init+0x2e4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001086:	4b89      	ldr	r3, [pc, #548]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a88      	ldr	r2, [pc, #544]	; (80012ac <MX_GPIO_Init+0x2e4>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b86      	ldr	r3, [pc, #536]	; (80012ac <MX_GPIO_Init+0x2e4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2118      	movs	r1, #24
 80010a2:	4883      	ldr	r0, [pc, #524]	; (80012b0 <MX_GPIO_Init+0x2e8>)
 80010a4:	f001 ff22 	bl	8002eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISP_F_Pin|DISP_E_Pin|DISP_2_Pin|DISP_1_Pin
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 80010ae:	4881      	ldr	r0, [pc, #516]	; (80012b4 <MX_GPIO_Init+0x2ec>)
 80010b0:	f001 ff1c 	bl	8002eec <HAL_GPIO_WritePin>
                          |DISP_3_Pin|DISP_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_H_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2149      	movs	r1, #73	; 0x49
 80010b8:	487f      	ldr	r0, [pc, #508]	; (80012b8 <MX_GPIO_Init+0x2f0>)
 80010ba:	f001 ff17 	bl	8002eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2108      	movs	r1, #8
 80010c2:	487e      	ldr	r0, [pc, #504]	; (80012bc <MX_GPIO_Init+0x2f4>)
 80010c4:	f001 ff12 	bl	8002eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 80010c8:	2200      	movs	r2, #0
 80010ca:	f644 4181 	movw	r1, #19585	; 0x4c81
 80010ce:	487c      	ldr	r0, [pc, #496]	; (80012c0 <MX_GPIO_Init+0x2f8>)
 80010d0:	f001 ff0c 	bl	8002eec <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISP_A_Pin|DISP_4_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2143      	movs	r1, #67	; 0x43
 80010d8:	487a      	ldr	r0, [pc, #488]	; (80012c4 <MX_GPIO_Init+0x2fc>)
 80010da:	f001 ff07 	bl	8002eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e4:	4872      	ldr	r0, [pc, #456]	; (80012b0 <MX_GPIO_Init+0x2e8>)
 80010e6:	f001 ff01 	bl	8002eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISP_C_Pin|DISP_B_Pin|DISP_G_Pin|LCD_D4_Pin
 80010ea:	2200      	movs	r2, #0
 80010ec:	21fb      	movs	r1, #251	; 0xfb
 80010ee:	4876      	ldr	r0, [pc, #472]	; (80012c8 <MX_GPIO_Init+0x300>)
 80010f0:	f001 fefc 	bl	8002eec <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001104:	2305      	movs	r3, #5
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4868      	ldr	r0, [pc, #416]	; (80012b0 <MX_GPIO_Init+0x2e8>)
 8001110:	f001 fd2a 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 8001114:	2318      	movs	r3, #24
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	4861      	ldr	r0, [pc, #388]	; (80012b0 <MX_GPIO_Init+0x2e8>)
 800112c:	f001 fd1c 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001136:	4b65      	ldr	r3, [pc, #404]	; (80012cc <MX_GPIO_Init+0x304>)
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	485c      	ldr	r0, [pc, #368]	; (80012b8 <MX_GPIO_Init+0x2f0>)
 8001146:	f001 fd0f 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_F_Pin|DISP_E_Pin|DISP_D_Pin;
 800114a:	f44f 6385 	mov.w	r3, #1064	; 0x428
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001150:	2311      	movs	r3, #17
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001154:	2301      	movs	r3, #1
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	4854      	ldr	r0, [pc, #336]	; (80012b4 <MX_GPIO_Init+0x2ec>)
 8001164:	f001 fd00 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_2_Pin|DISP_1_Pin|DISP_3_Pin;
 8001168:	f44f 7360 	mov.w	r3, #896	; 0x380
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	484c      	ldr	r0, [pc, #304]	; (80012b4 <MX_GPIO_Init+0x2ec>)
 8001182:	f001 fcf1 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_H_Pin;
 8001186:	2301      	movs	r3, #1
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800118a:	2311      	movs	r3, #17
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118e:	2301      	movs	r3, #1
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_H_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	4846      	ldr	r0, [pc, #280]	; (80012b8 <MX_GPIO_Init+0x2f0>)
 800119e:	f001 fce3 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011a2:	2332      	movs	r3, #50	; 0x32
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b2:	230b      	movs	r3, #11
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	483e      	ldr	r0, [pc, #248]	; (80012b8 <MX_GPIO_Init+0x2f0>)
 80011be:	f001 fcd3 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POT1_AIN_Pin;
 80011c2:	2304      	movs	r3, #4
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c6:	2303      	movs	r3, #3
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POT1_AIN_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	4619      	mov	r1, r3
 80011d4:	4838      	ldr	r0, [pc, #224]	; (80012b8 <MX_GPIO_Init+0x2f0>)
 80011d6:	f001 fcc7 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80011da:	2308      	movs	r3, #8
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4831      	ldr	r0, [pc, #196]	; (80012b8 <MX_GPIO_Init+0x2f0>)
 80011f2:	f001 fcb9 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80011f6:	2306      	movs	r3, #6
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001206:	230b      	movs	r3, #11
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	482a      	ldr	r0, [pc, #168]	; (80012bc <MX_GPIO_Init+0x2f4>)
 8001212:	f001 fca9 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8001216:	2308      	movs	r3, #8
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122a:	4619      	mov	r1, r3
 800122c:	4823      	ldr	r0, [pc, #140]	; (80012bc <MX_GPIO_Init+0x2f4>)
 800122e:	f001 fc9b 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OSC_AOUT_Pin|POT2_AIN_Pin;
 8001232:	2350      	movs	r3, #80	; 0x50
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	4619      	mov	r1, r3
 8001244:	481d      	ldr	r0, [pc, #116]	; (80012bc <MX_GPIO_Init+0x2f4>)
 8001246:	f001 fc8f 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 800124a:	2320      	movs	r3, #32
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_GPIO_Init+0x308>)
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	4817      	ldr	r0, [pc, #92]	; (80012bc <MX_GPIO_Init+0x2f4>)
 800125e:	f001 fc83 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001262:	f644 4381 	movw	r3, #19585	; 0x4c81
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	4811      	ldr	r0, [pc, #68]	; (80012c0 <MX_GPIO_Init+0x2f8>)
 800127c:	f001 fc74 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_GPIO_Init+0x304>)
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_GPIO_Init+0x2ec>)
 8001296:	f001 fc67 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_A_Pin;
 800129a:	2301      	movs	r3, #1
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800129e:	2311      	movs	r3, #17
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e014      	b.n	80012d4 <MX_GPIO_Init+0x30c>
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	10110000 	.word	0x10110000
 80012d0:	10210000 	.word	0x10210000
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_A_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	4619      	mov	r1, r3
 80012dc:	4868      	ldr	r0, [pc, #416]	; (8001480 <MX_GPIO_Init+0x4b8>)
 80012de:	f001 fc43 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_4_Pin|USB_PowerSwitchOn_Pin;
 80012e2:	2342      	movs	r3, #66	; 0x42
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4861      	ldr	r0, [pc, #388]	; (8001480 <MX_GPIO_Init+0x4b8>)
 80012fa:	f001 fc35 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 80012fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	4619      	mov	r1, r3
 8001316:	485b      	ldr	r0, [pc, #364]	; (8001484 <MX_GPIO_Init+0x4bc>)
 8001318:	f001 fc26 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132e:	230b      	movs	r3, #11
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	4853      	ldr	r0, [pc, #332]	; (8001488 <MX_GPIO_Init+0x4c0>)
 800133a:	f001 fc15 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 800133e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001344:	4b51      	ldr	r3, [pc, #324]	; (800148c <MX_GPIO_Init+0x4c4>)
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	4619      	mov	r1, r3
 8001352:	484d      	ldr	r0, [pc, #308]	; (8001488 <MX_GPIO_Init+0x4c0>)
 8001354:	f001 fc08 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800135e:	4b4c      	ldr	r3, [pc, #304]	; (8001490 <MX_GPIO_Init+0x4c8>)
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	4849      	ldr	r0, [pc, #292]	; (8001494 <MX_GPIO_Init+0x4cc>)
 800136e:	f001 fbfb 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	4843      	ldr	r0, [pc, #268]	; (8001494 <MX_GPIO_Init+0x4cc>)
 8001388:	f001 fbee 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	4838      	ldr	r0, [pc, #224]	; (8001480 <MX_GPIO_Init+0x4b8>)
 80013a0:	f001 fbe2 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 80013a4:	2340      	movs	r3, #64	; 0x40
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b0:	2302      	movs	r3, #2
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4837      	ldr	r0, [pc, #220]	; (8001498 <MX_GPIO_Init+0x4d0>)
 80013bc:	f001 fbd4 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013c0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013d2:	230a      	movs	r3, #10
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	482f      	ldr	r0, [pc, #188]	; (800149c <MX_GPIO_Init+0x4d4>)
 80013de:	f001 fbc3 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	4829      	ldr	r0, [pc, #164]	; (800149c <MX_GPIO_Init+0x4d4>)
 80013f8:	f001 fbb6 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DISP_C_Pin|DISP_B_Pin|DISP_G_Pin;
 80013fc:	230b      	movs	r3, #11
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001400:	2311      	movs	r3, #17
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001404:	2301      	movs	r3, #1
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4619      	mov	r1, r3
 8001412:	4820      	ldr	r0, [pc, #128]	; (8001494 <MX_GPIO_Init+0x4cc>)
 8001414:	f001 fba8 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8001418:	23f0      	movs	r3, #240	; 0xf0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	4619      	mov	r1, r3
 800142e:	4819      	ldr	r0, [pc, #100]	; (8001494 <MX_GPIO_Init+0x4cc>)
 8001430:	f001 fb9a 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001434:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001446:	230b      	movs	r3, #11
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <MX_GPIO_Init+0x4b8>)
 8001452:	f001 fb89 	bl	8002b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2017      	movs	r0, #23
 800145c:	f001 fb2b 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001460:	2017      	movs	r0, #23
 8001462:	f001 fb44 	bl	8002aee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2028      	movs	r0, #40	; 0x28
 800146c:	f001 fb23 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001470:	2028      	movs	r0, #40	; 0x28
 8001472:	f001 fb3c 	bl	8002aee <HAL_NVIC_EnableIRQ>

}
 8001476:	bf00      	nop
 8001478:	3738      	adds	r7, #56	; 0x38
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40021800 	.word	0x40021800
 8001484:	40021000 	.word	0x40021000
 8001488:	40020400 	.word	0x40020400
 800148c:	10110000 	.word	0x10110000
 8001490:	10210000 	.word	0x10210000
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40020800 	.word	0x40020800
 800149c:	40020000 	.word	0x40020000

080014a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <MX_I2C1_Init+0x74>)
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <MX_I2C1_Init+0x78>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_I2C1_Init+0x74>)
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <MX_I2C1_Init+0x7c>)
 80014ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_I2C1_Init+0x74>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_I2C1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_I2C1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <MX_I2C1_Init+0x74>)
 80014dc:	f001 fd38 	bl	8002f50 <HAL_I2C_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014e6:	f000 fd41 	bl	8001f6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4809      	ldr	r0, [pc, #36]	; (8001514 <MX_I2C1_Init+0x74>)
 80014ee:	f002 f989 	bl	8003804 <HAL_I2CEx_ConfigAnalogFilter>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014f8:	f000 fd38 	bl	8001f6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_I2C1_Init+0x74>)
 8001500:	f002 f9cb 	bl	800389a <HAL_I2CEx_ConfigDigitalFilter>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800150a:	f000 fd2f 	bl	8001f6c <Error_Handler>
  }

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000270 	.word	0x20000270
 8001518:	40005400 	.word	0x40005400
 800151c:	20404768 	.word	0x20404768

08001520 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_I2C_MspInit+0x7c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d128      	bne.n	8001594 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_I2C_MspInit+0x80>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <HAL_I2C_MspInit+0x80>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_I2C_MspInit+0x80>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 800155a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001564:	2301      	movs	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156c:	2304      	movs	r3, #4
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	480b      	ldr	r0, [pc, #44]	; (80015a4 <HAL_I2C_MspInit+0x84>)
 8001578:	f001 faf6 	bl	8002b68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_I2C_MspInit+0x80>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_I2C_MspInit+0x80>)
 8001582:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_I2C_MspInit+0x80>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40005400 	.word	0x40005400
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400

080015a8 <lcd_write_command>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6898      	ldr	r0, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	899b      	ldrh	r3, [r3, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	4619      	mov	r1, r3
 80015c0:	f001 fc94 	bl	8002eec <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7d9b      	ldrb	r3, [r3, #22]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d111      	bne.n	80015f0 <lcd_write_command+0x48>
  {
    lcd_write(hlcd, (command >> 4), LCD_NIB);
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2204      	movs	r2, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f861 	bl	800169e <lcd_write>
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2204      	movs	r2, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f858 	bl	800169e <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 80015ee:	e005      	b.n	80015fc <lcd_write_command+0x54>
     lcd_write(hlcd, command, LCD_BYTE);
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	2208      	movs	r2, #8
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f851 	bl	800169e <lcd_write>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <lcd_write_4bit_command>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_4bit_command(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7d9b      	ldrb	r3, [r3, #22]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d110      	bne.n	800163a <lcd_write_4bit_command+0x36>
  {
	HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6898      	ldr	r0, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	899b      	ldrh	r3, [r3, #12]
 8001620:	2201      	movs	r2, #1
 8001622:	4619      	mov	r1, r3
 8001624:	f001 fc62 	bl	8002eec <HAL_GPIO_WritePin>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2204      	movs	r2, #4
 8001632:	4619      	mov	r1, r3
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f832 	bl	800169e <lcd_write>
  }
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6898      	ldr	r0, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	899b      	ldrh	r3, [r3, #12]
 8001656:	2201      	movs	r2, #1
 8001658:	4619      	mov	r1, r3
 800165a:	f001 fc47 	bl	8002eec <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7d9b      	ldrb	r3, [r3, #22]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d111      	bne.n	800168a <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2204      	movs	r2, #4
 800166e:	4619      	mov	r1, r3
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f814 	bl	800169e <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2204      	movs	r2, #4
 8001680:	4619      	mov	r1, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f80b 	bl	800169e <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 8001688:	e005      	b.n	8001696 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	2208      	movs	r2, #8
 800168e:	4619      	mov	r1, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f804 	bl	800169e <lcd_write>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	460b      	mov	r3, r1
 80016a8:	70fb      	strb	r3, [r7, #3]
 80016aa:	4613      	mov	r3, r2
 80016ac:	70bb      	strb	r3, [r7, #2]
  for(uint8_t i = 0; i < len; i++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	e019      	b.n	80016e8 <lcd_write+0x4a>
  {
    HAL_GPIO_WritePin(hlcd->Data_Port[i], hlcd->Data_Pin[i], (data >> i) & 0x01);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	8819      	ldrh	r1, [r3, #0]
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	fa42 f303 	asr.w	r3, r2, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	f001 fc05 	bl	8002eec <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	3301      	adds	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	78bb      	ldrb	r3, [r7, #2]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d3e1      	bcc.n	80016b4 <lcd_write+0x16>
  }

  HAL_GPIO_WritePin(hlcd->EN_Port, hlcd->EN_Pin, GPIO_PIN_SET);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6918      	ldr	r0, [r3, #16]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	8a9b      	ldrh	r3, [r3, #20]
 80016f8:	2201      	movs	r2, #1
 80016fa:	4619      	mov	r1, r3
 80016fc:	f001 fbf6 	bl	8002eec <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 8001700:	2132      	movs	r1, #50	; 0x32
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f80c 	bl	8001720 <lcd_delay_us>
  HAL_GPIO_WritePin(hlcd->EN_Port, hlcd->EN_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6918      	ldr	r0, [r3, #16]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	8a9b      	ldrh	r3, [r3, #20]
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	f001 fbea 	bl	8002eec <HAL_GPIO_WritePin>
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fa11 	bl	8004b60 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 800173e:	bf00      	nop
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d8f8      	bhi.n	8001740 <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fa2e 	bl	8004bb4 <HAL_TIM_Base_Stop>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  __LCD_Delay(hlcd, 15.2);              // >15 ms
 8001768:	f643 315f 	movw	r1, #15199	; 0x3b5f
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ffd7 	bl	8001720 <lcd_delay_us>
  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7d9b      	ldrb	r3, [r3, #22]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d11d      	bne.n	80017b6 <LCD_Init+0x56>
  {
    lcd_write_4bit_command(hlcd, 0x03); // 0011
 800177a:	2103      	movs	r1, #3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff41 	bl	8001604 <lcd_write_4bit_command>
    __LCD_Delay(hlcd, 4.2);             // > 4.1 ms
 8001782:	f241 0167 	movw	r1, #4199	; 0x1067
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffca 	bl	8001720 <lcd_delay_us>
    lcd_write_4bit_command(hlcd, 0x03); // 0011
 800178c:	2103      	movs	r1, #3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff38 	bl	8001604 <lcd_write_4bit_command>
    __LCD_Delay(hlcd, 0.2);             // > 0.1 ms
 8001794:	21c8      	movs	r1, #200	; 0xc8
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffc2 	bl	8001720 <lcd_delay_us>
    lcd_write_4bit_command(hlcd, 0x03); // 0011
 800179c:	2103      	movs	r1, #3
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff30 	bl	8001604 <lcd_write_4bit_command>
    lcd_write_4bit_command(hlcd, 0x02); // 0010
 80017a4:	2102      	movs	r1, #2
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff2c 	bl	8001604 <lcd_write_4bit_command>

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 80017ac:	2128      	movs	r1, #40	; 0x28
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fefa 	bl	80015a8 <lcd_write_command>
 80017b4:	e01c      	b.n	80017f0 <LCD_Init+0x90>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7d9b      	ldrb	r3, [r3, #22]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d118      	bne.n	80017f0 <LCD_Init+0x90>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80017be:	2130      	movs	r1, #48	; 0x30
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fef1 	bl	80015a8 <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 80017c6:	f241 0167 	movw	r1, #4199	; 0x1067
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffa8 	bl	8001720 <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80017d0:	2130      	movs	r1, #48	; 0x30
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fee8 	bl	80015a8 <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 80017d8:	21c8      	movs	r1, #200	; 0xc8
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffa0 	bl	8001720 <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80017e0:	2130      	movs	r1, #48	; 0x30
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fee0 	bl	80015a8 <lcd_write_command>

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 80017e8:	2138      	movs	r1, #56	; 0x38
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fedc 	bl	80015a8 <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 80017f0:	2101      	movs	r1, #1
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fed8 	bl	80015a8 <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 80017f8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff8f 	bl	8001720 <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001802:	210c      	movs	r1, #12
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fecf 	bl	80015a8 <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 800180a:	2106      	movs	r1, #6
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fecb 	bl	80015a8 <lcd_write_command>

}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 800181a:	b590      	push	{r4, r7, lr}
 800181c:	b085      	sub	sp, #20
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e00a      	b.n	8001840 <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	4413      	add	r3, r2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff04 	bl	8001642 <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	3301      	adds	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	7bfc      	ldrb	r4, [r7, #15]
 8001842:	6838      	ldr	r0, [r7, #0]
 8001844:	f7fe fce4 	bl	8000210 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	429c      	cmp	r4, r3
 800184c:	d3ed      	bcc.n	800182a <LCD_printStr+0x10>
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bd90      	pop	{r4, r7, pc}
	...

08001858 <LCD_SetCursor>:
 * @param[in] row  Display row (line): 0 to N
 * @param[in] col  Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_SetCursor(LCD_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
 8001864:	4613      	mov	r3, r2
 8001866:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	4a07      	ldr	r2, [pc, #28]	; (8001888 <LCD_SetCursor+0x30>)
 800186c:	5cd2      	ldrb	r2, [r2, r3]
 800186e:	78bb      	ldrb	r3, [r7, #2]
 8001870:	4413      	add	r3, r2
 8001872:	b2db      	uxtb	r3, r3
 8001874:	3b80      	subs	r3, #128	; 0x80
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4619      	mov	r1, r3
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fe94 	bl	80015a8 <lcd_write_command>
  #endif
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	0800b11c 	.word	0x0800b11c

0800188c <LCD_printf>:
 * @param[in] format Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    Variadic arguments
 * @return None
 */
void LCD_printf(LCD_HandleTypeDef * lcd, const char* format, ...)
{
 800188c:	b40e      	push	{r1, r2, r3}
 800188e:	b580      	push	{r7, lr}
 8001890:	b095      	sub	sp, #84	; 0x54
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 8001896:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800189a:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80018a4:	4618      	mov	r0, r3
 80018a6:	f006 ffc3 	bl	8008830 <vsiprintf>
  LCD_printStr(lcd, buffer);
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4619      	mov	r1, r3
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffb2 	bl	800181a <LCD_printStr>
  va_end(args);
}
 80018b6:	bf00      	nop
 80018b8:	3754      	adds	r7, #84	; 0x54
 80018ba:	46bd      	mov	sp, r7
 80018bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018c0:	b003      	add	sp, #12
 80018c2:	4770      	bx	lr

080018c4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d4:	f040 80fa 	bne.w	8001acc <HAL_TIM_PeriodElapsedCallback+0x208>
	{
		// reading from the sensor and writing the value to the variable LED_lux
		LED_lux = SENSOR_BH1750_ReadLux(&hbh1750_1);
 80018d8:	487e      	ldr	r0, [pc, #504]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80018da:	f000 fb71 	bl	8001fc0 <SENSOR_BH1750_ReadLux>
 80018de:	eef0 7a40 	vmov.f32	s15, s0
 80018e2:	4b7d      	ldr	r3, [pc, #500]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80018e4:	edc3 7a00 	vstr	s15, [r3]
		// convert float32_t to uint32_t
		LED_lux_int = (uint32_t)LED_lux;
 80018e8:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f2:	ee17 2a90 	vmov	r2, s15
 80018f6:	4b79      	ldr	r3, [pc, #484]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x218>)
 80018f8:	601a      	str	r2, [r3, #0]
		tx_n = sprintf(tx_buffer, "%03x", LED_lux_int);
 80018fa:	4b78      	ldr	r3, [pc, #480]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x218>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	4977      	ldr	r1, [pc, #476]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001902:	4878      	ldr	r0, [pc, #480]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001904:	f006 f884 	bl	8007a10 <siprintf>
 8001908:	4603      	mov	r3, r0
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b76      	ldr	r3, [pc, #472]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800190e:	701a      	strb	r2, [r3, #0]
		// send a message if the condition is true
		if(tx_n == SP_MSG_SIZE )
 8001910:	4b75      	ldr	r3, [pc, #468]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d107      	bne.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x64>
			 HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, tx_n, 1);
 8001918:	4b73      	ldr	r3, [pc, #460]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b29a      	uxth	r2, r3
 800191e:	2301      	movs	r3, #1
 8001920:	4970      	ldr	r1, [pc, #448]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001922:	4872      	ldr	r0, [pc, #456]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001924:	f004 fa7a 	bl	8005e1c <HAL_UART_Transmit>


		/* CONTROL PROCESS PID */
		PID_error = set_point - LED_lux;
 8001928:	4b71      	ldr	r3, [pc, #452]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001934:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193e:	4b6d      	ldr	r3, [pc, #436]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001940:	edc3 7a00 	vstr	s15, [r3]
		PID_error_in_procent = (fabs(PID_error) / (enc_counter_max - enc_counter_min)) * 100;
 8001944:	4b6b      	ldr	r3, [pc, #428]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	eef0 7ae7 	vabs.f32	s15, s15
 800194e:	ee17 0a90 	vmov	r0, s15
 8001952:	f7fe fe19 	bl	8000588 <__aeabi_f2d>
 8001956:	4604      	mov	r4, r0
 8001958:	460d      	mov	r5, r1
 800195a:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	3b02      	subs	r3, #2
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fdff 	bl	8000564 <__aeabi_i2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4620      	mov	r0, r4
 800196c:	4629      	mov	r1, r5
 800196e:	f7fe ff8d 	bl	800088c <__aeabi_ddiv>
 8001972:	4603      	mov	r3, r0
 8001974:	460c      	mov	r4, r1
 8001976:	4618      	mov	r0, r3
 8001978:	4621      	mov	r1, r4
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	4b5f      	ldr	r3, [pc, #380]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001980:	f7fe fe5a 	bl	8000638 <__aeabi_dmul>
 8001984:	4603      	mov	r3, r0
 8001986:	460c      	mov	r4, r1
 8001988:	4618      	mov	r0, r3
 800198a:	4621      	mov	r1, r4
 800198c:	f7ff f94c 	bl	8000c28 <__aeabi_d2f>
 8001990:	4602      	mov	r2, r0
 8001992:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001994:	601a      	str	r2, [r3, #0]
		PID_out = arm_pid_f32(&pid, PID_error);
 8001996:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a5a      	ldr	r2, [pc, #360]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800199c:	617a      	str	r2, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	ed93 7a00 	vldr	s14, [r3]
 80019a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019aa:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80019ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80019be:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80019ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80019dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e0:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4a43      	ldr	r2, [pc, #268]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80019fc:	6013      	str	r3, [r2, #0]


		// Additional visualization of the correctness of the regulation system
		if(PID_error_in_procent <= 1.0 )
 80019fe:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	d80b      	bhi.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x166>
		{
			// if correct turn green LED (LD1) on and turn red LED (LD3) off
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	2101      	movs	r1, #1
 8001a16:	483d      	ldr	r0, [pc, #244]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a18:	f001 fa68 	bl	8002eec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a22:	483a      	ldr	r0, [pc, #232]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a24:	f001 fa62 	bl	8002eec <HAL_GPIO_WritePin>
 8001a28:	e00a      	b.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x17c>
		}
		else
		{
			// if not correct turn green LED (LD1) off and turn red LED (LD3) on
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a30:	4836      	ldr	r0, [pc, #216]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a32:	f001 fa5b 	bl	8002eec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4834      	ldr	r0, [pc, #208]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a3c:	f001 fa56 	bl	8002eec <HAL_GPIO_WritePin>
		}

		// Output saturation
		if(PID_out > 1000)
 8001a40:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001b10 <HAL_TIM_PeriodElapsedCallback+0x24c>
 8001a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	dd03      	ble.n	8001a5c <HAL_TIM_PeriodElapsedCallback+0x198>
		{
			d_PWM = 1000;
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a56:	4a30      	ldr	r2, [pc, #192]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e010      	b.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x1ba>
		}
		else if(PID_out < 0)
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	d504      	bpl.n	8001a76 <HAL_TIM_PeriodElapsedCallback+0x1b2>
		{
			d_PWM = 0;
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e003      	b.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x1ba>
		}
		else
		{
			d_PWM = PID_out;
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a7c:	6013      	str	r3, [r2, #0]
		}

		// PWM filling control of diodes
		if(BTN_State_1)
 8001a7e:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d014      	beq.n	8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1ec>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, d_PWM);
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a94:	ee17 2a90 	vmov	r2, s15
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, d_PWM);
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aa8:	ee17 2a90 	vmov	r2, s15
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, d_PWM);
		}
	}
}
 8001aae:	e00d      	b.n	8001acc <HAL_TIM_PeriodElapsedCallback+0x208>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, d_PWM);
 8001ab8:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac6:	ee17 2a90 	vmov	r2, s15
 8001aca:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001acc:	bf00      	nop
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad4:	2000003c 	.word	0x2000003c
 8001ad8:	20000244 	.word	0x20000244
 8001adc:	20000240 	.word	0x20000240
 8001ae0:	0800b0b8 	.word	0x0800b0b8
 8001ae4:	200002e4 	.word	0x200002e4
 8001ae8:	200002e0 	.word	0x200002e0
 8001aec:	2000041c 	.word	0x2000041c
 8001af0:	2000023c 	.word	0x2000023c
 8001af4:	2000024c 	.word	0x2000024c
 8001af8:	20000034 	.word	0x20000034
 8001afc:	40590000 	.word	0x40590000
 8001b00:	20000250 	.word	0x20000250
 8001b04:	200002bc 	.word	0x200002bc
 8001b08:	20000248 	.word	0x20000248
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	447a0000 	.word	0x447a0000
 8001b14:	20000254 	.word	0x20000254
 8001b18:	447a0000 	.word	0x447a0000
 8001b1c:	20000258 	.word	0x20000258
 8001b20:	2000039c 	.word	0x2000039c

08001b24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ENC_CLK_Pin) // Rotary pulser for setting the value of control 'set_point'
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b34:	d128      	bne.n	8001b88 <HAL_GPIO_EXTI_Callback+0x64>
	{
		 if (HAL_GPIO_ReadPin(ENC_DT_GPIO_Port, ENC_DT_Pin) == GPIO_PIN_RESET)
 8001b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b3a:	482f      	ldr	r0, [pc, #188]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001b3c:	f001 f9be 	bl	8002ebc <HAL_GPIO_ReadPin>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d113      	bne.n	8001b6e <HAL_GPIO_EXTI_Callback+0x4a>
		 {
			 enc_counter = (enc_counter >= enc_counter_max) ? enc_counter_max :	(enc_counter + enc_counter_step);
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d802      	bhi.n	8001b5a <HAL_GPIO_EXTI_Callback+0x36>
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_EXTI_Callback+0x3c>
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b62:	6013      	str	r3, [r2, #0]
			 set_point = enc_counter;
 8001b64:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a26      	ldr	r2, [pc, #152]	; (8001c04 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001b6a:	6013      	str	r3, [r2, #0]
	}
	else if(GPIO_Pin == EX2_Btn_Pin)  // button to switch the lcd screen
	{
		LCD_show_ERROR = !LCD_show_ERROR;
	}
}
 8001b6c:	e03f      	b.n	8001bee <HAL_GPIO_EXTI_Callback+0xca>
			 enc_counter = (enc_counter <= enc_counter_min) ? enc_counter_min :	(enc_counter - enc_counter_step);
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	bf38      	it	cc
 8001b76:	2303      	movcc	r3, #3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b7c:	6013      	str	r3, [r2, #0]
			 set_point = enc_counter;
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a20      	ldr	r2, [pc, #128]	; (8001c04 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001b84:	6013      	str	r3, [r2, #0]
}
 8001b86:	e032      	b.n	8001bee <HAL_GPIO_EXTI_Callback+0xca>
	else if(GPIO_Pin == EX1_Btn_Pin) // button for switching the number of LEDs
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	d121      	bne.n	8001bd2 <HAL_GPIO_EXTI_Callback+0xae>
		BTN_State_1 = !BTN_State_1;
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf0c      	ite	eq
 8001b96:	2301      	moveq	r3, #1
 8001b98:	2300      	movne	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001ba0:	701a      	strb	r2, [r3, #0]
		if(BTN_State_1 == TRUE)
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d103      	bne.n	8001bb2 <HAL_GPIO_EXTI_Callback+0x8e>
			enc_counter_max = 180;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001bac:	22b4      	movs	r2, #180	; 0xb4
 8001bae:	701a      	strb	r2, [r3, #0]
}
 8001bb0:	e01d      	b.n	8001bee <HAL_GPIO_EXTI_Callback+0xca>
			enc_counter_max = 110;
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001bb4:	226e      	movs	r2, #110	; 0x6e
 8001bb6:	701a      	strb	r2, [r3, #0]
			if(set_point > enc_counter_max)
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d213      	bcs.n	8001bee <HAL_GPIO_EXTI_Callback+0xca>
				set_point = enc_counter_max;
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001bce:	601a      	str	r2, [r3, #0]
}
 8001bd0:	e00d      	b.n	8001bee <HAL_GPIO_EXTI_Callback+0xca>
	else if(GPIO_Pin == EX2_Btn_Pin)  // button to switch the lcd screen
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd8:	d109      	bne.n	8001bee <HAL_GPIO_EXTI_Callback+0xca>
		LCD_show_ERROR = !LCD_show_ERROR;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf0c      	ite	eq
 8001be2:	2301      	moveq	r3, #1
 8001be4:	2300      	movne	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001bec:	701a      	strb	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40020c00 	.word	0x40020c00
 8001bfc:	20000034 	.word	0x20000034
 8001c00:	20000038 	.word	0x20000038
 8001c04:	2000023c 	.word	0x2000023c
 8001c08:	20000258 	.word	0x20000258
 8001c0c:	20000259 	.word	0x20000259

08001c10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART3 )
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a29      	ldr	r2, [pc, #164]	; (8001cc4 <HAL_UART_RxCpltCallback+0xb4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d14c      	bne.n	8001cbc <HAL_UART_RxCpltCallback+0xac>
		/* Set point value read from serial port . */
		static int UART_set_point;
		/* Number of items successfully filled by 'sscanf '. */
		static int rx_n;
		/* Three - digit hexadecimal number : C- string to integer . */
		rx_n = sscanf((char*)RX_DATA, "%3x", &UART_set_point );
 8001c22:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <HAL_UART_RxCpltCallback+0xb8>)
 8001c24:	4929      	ldr	r1, [pc, #164]	; (8001ccc <HAL_UART_RxCpltCallback+0xbc>)
 8001c26:	482a      	ldr	r0, [pc, #168]	; (8001cd0 <HAL_UART_RxCpltCallback+0xc0>)
 8001c28:	f005 ff12 	bl	8007a50 <siscanf>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_UART_RxCpltCallback+0xc4>)
 8001c30:	601a      	str	r2, [r3, #0]
		/* If conversion if successful set set_point value or set control by one or two LEDs . */
		if( rx_n == 1){
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_UART_RxCpltCallback+0xc4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10a      	bne.n	8001c50 <HAL_UART_RxCpltCallback+0x40>
			set_point = (uint32_t)UART_set_point;
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_UART_RxCpltCallback+0xb8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_UART_RxCpltCallback+0xc8>)
 8001c42:	601a      	str	r2, [r3, #0]
			enc_counter = (uint32_t)UART_set_point;
 8001c44:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_UART_RxCpltCallback+0xb8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_UART_RxCpltCallback+0xcc>)
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e030      	b.n	8001cb2 <HAL_UART_RxCpltCallback+0xa2>
		}
		else if( RX_DATA[0] == 'T' && RX_DATA[1] == 'W' && RX_DATA[2] == 'O' ){
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_UART_RxCpltCallback+0xc0>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b54      	cmp	r3, #84	; 0x54
 8001c56:	d10e      	bne.n	8001c76 <HAL_UART_RxCpltCallback+0x66>
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_UART_RxCpltCallback+0xc0>)
 8001c5a:	785b      	ldrb	r3, [r3, #1]
 8001c5c:	2b57      	cmp	r3, #87	; 0x57
 8001c5e:	d10a      	bne.n	8001c76 <HAL_UART_RxCpltCallback+0x66>
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_UART_RxCpltCallback+0xc0>)
 8001c62:	789b      	ldrb	r3, [r3, #2]
 8001c64:	2b4f      	cmp	r3, #79	; 0x4f
 8001c66:	d106      	bne.n	8001c76 <HAL_UART_RxCpltCallback+0x66>
			BTN_State_1 = TRUE;
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_UART_RxCpltCallback+0xd0>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
			enc_counter_max = 180;
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_UART_RxCpltCallback+0xd4>)
 8001c70:	22b4      	movs	r2, #180	; 0xb4
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e01d      	b.n	8001cb2 <HAL_UART_RxCpltCallback+0xa2>
		}
		else if( RX_DATA[0] == 'O' && RX_DATA[1] == 'N' && RX_DATA[2] == 'E' ){
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_UART_RxCpltCallback+0xc0>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b4f      	cmp	r3, #79	; 0x4f
 8001c7c:	d119      	bne.n	8001cb2 <HAL_UART_RxCpltCallback+0xa2>
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_UART_RxCpltCallback+0xc0>)
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	2b4e      	cmp	r3, #78	; 0x4e
 8001c84:	d115      	bne.n	8001cb2 <HAL_UART_RxCpltCallback+0xa2>
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_UART_RxCpltCallback+0xc0>)
 8001c88:	789b      	ldrb	r3, [r3, #2]
 8001c8a:	2b45      	cmp	r3, #69	; 0x45
 8001c8c:	d111      	bne.n	8001cb2 <HAL_UART_RxCpltCallback+0xa2>
			BTN_State_1 = FALSE;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_UART_RxCpltCallback+0xd0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
			enc_counter_max = 110;
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_UART_RxCpltCallback+0xd4>)
 8001c96:	226e      	movs	r2, #110	; 0x6e
 8001c98:	701a      	strb	r2, [r3, #0]
			if(set_point > enc_counter_max)
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_UART_RxCpltCallback+0xd4>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_UART_RxCpltCallback+0xc8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d204      	bcs.n	8001cb2 <HAL_UART_RxCpltCallback+0xa2>
			{
				set_point = enc_counter_max;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_UART_RxCpltCallback+0xd4>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_UART_RxCpltCallback+0xc8>)
 8001cb0:	601a      	str	r2, [r3, #0]
			}
		}
		/* Start listening for the next message . */
		HAL_UART_Receive_IT(&huart3, RX_DATA, SP_MSG_SIZE);
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	4906      	ldr	r1, [pc, #24]	; (8001cd0 <HAL_UART_RxCpltCallback+0xc0>)
 8001cb6:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <HAL_UART_RxCpltCallback+0xd8>)
 8001cb8:	f004 f942 	bl	8005f40 <HAL_UART_Receive_IT>
	}
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40004800 	.word	0x40004800
 8001cc8:	2000025c 	.word	0x2000025c
 8001ccc:	0800b0c0 	.word	0x0800b0c0
 8001cd0:	20000318 	.word	0x20000318
 8001cd4:	20000260 	.word	0x20000260
 8001cd8:	2000023c 	.word	0x2000023c
 8001cdc:	20000038 	.word	0x20000038
 8001ce0:	20000258 	.word	0x20000258
 8001ce4:	20000034 	.word	0x20000034
 8001ce8:	2000041c 	.word	0x2000041c

08001cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cec:	b598      	push	{r3, r4, r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf0:	f000 fd87 	bl	8002802 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf4:	f000 f8a6 	bl	8001e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf8:	f7ff f966 	bl	8000fc8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001cfc:	f000 fcdc 	bl	80026b8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001d00:	f000 fa64 	bl	80021cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d04:	f000 fab0 	bl	8002268 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d08:	f000 fb46 	bl	8002398 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001d0c:	f7ff fbc8 	bl	80014a0 <MX_I2C1_Init>
  MX_TIM5_Init();
 8001d10:	f000 fb96 	bl	8002440 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // Sensor init
  SENSOR_BH1750_Init(&hbh1750_1);
 8001d14:	483a      	ldr	r0, [pc, #232]	; (8001e00 <main+0x114>)
 8001d16:	f000 f92d 	bl	8001f74 <SENSOR_BH1750_Init>

  // Starting values
  LED_lux = 2.0f;
 8001d1a:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <main+0x118>)
 8001d1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d20:	601a      	str	r2, [r3, #0]
  set_point = 2.0;
 8001d22:	4b39      	ldr	r3, [pc, #228]	; (8001e08 <main+0x11c>)
 8001d24:	2202      	movs	r2, #2
 8001d26:	601a      	str	r2, [r3, #0]

  /****  PID  ****/
  // Set the PID parameters
  pid.Kp = PID_PARAM_KP;
 8001d28:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <main+0x120>)
 8001d2a:	4a39      	ldr	r2, [pc, #228]	; (8001e10 <main+0x124>)
 8001d2c:	619a      	str	r2, [r3, #24]
  pid.Ki = PID_PARAM_KI;
 8001d2e:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <main+0x120>)
 8001d30:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001d34:	61da      	str	r2, [r3, #28]
  pid.Kd = PID_PARAM_KD;
 8001d36:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <main+0x120>)
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	621a      	str	r2, [r3, #32]
  // Init PID with constant period
  arm_pid_init_f32(&pid, 1);
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4832      	ldr	r0, [pc, #200]	; (8001e0c <main+0x120>)
 8001d42:	f004 ffd1 	bl	8006ce8 <arm_pid_init_f32>
  __HAL_TIM_SET_AUTORELOAD(&htim2, 129999);
 8001d46:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <main+0x128>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a33      	ldr	r2, [pc, #204]	; (8001e18 <main+0x12c>)
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <main+0x128>)
 8001d50:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <main+0x12c>)
 8001d52:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim2);
 8001d54:	482f      	ldr	r0, [pc, #188]	; (8001e14 <main+0x128>)
 8001d56:	f002 ff59 	bl	8004c0c <HAL_TIM_Base_Start_IT>


  // Init PWM channels of TIM3
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	482f      	ldr	r0, [pc, #188]	; (8001e1c <main+0x130>)
 8001d5e:	f002 ffb5 	bl	8004ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001d62:	2104      	movs	r1, #4
 8001d64:	482d      	ldr	r0, [pc, #180]	; (8001e1c <main+0x130>)
 8001d66:	f002 ffb1 	bl	8004ccc <HAL_TIM_PWM_Start>

  // Init lcd
  LCD_Init(&hlcd1);
 8001d6a:	482d      	ldr	r0, [pc, #180]	; (8001e20 <main+0x134>)
 8001d6c:	f7ff fcf8 	bl	8001760 <LCD_Init>
  //__HAL_TIM_SET_AUTORELOAD(&htim7, 9999);
  //HAL_TIM_Base_Start_IT(&htim7);


  // USART3
  HAL_UART_Receive_IT(&huart3, RX_DATA, SP_MSG_SIZE);
 8001d70:	2203      	movs	r2, #3
 8001d72:	492c      	ldr	r1, [pc, #176]	; (8001e24 <main+0x138>)
 8001d74:	482c      	ldr	r0, [pc, #176]	; (8001e28 <main+0x13c>)
 8001d76:	f004 f8e3 	bl	8005f40 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(LCD_show_ERROR)
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <main+0x140>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01b      	beq.n	8001dba <main+0xce>
	  {
		  LCD_SetCursor(&hlcd1, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	4826      	ldr	r0, [pc, #152]	; (8001e20 <main+0x134>)
 8001d88:	f7ff fd66 	bl	8001858 <LCD_SetCursor>
		  LCD_printf(&hlcd1, "ERROR: %5.2f [ ]", PID_error_in_procent);
 8001d8c:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <main+0x144>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fbf9 	bl	8000588 <__aeabi_f2d>
 8001d96:	4603      	mov	r3, r0
 8001d98:	460c      	mov	r4, r1
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4623      	mov	r3, r4
 8001d9e:	4925      	ldr	r1, [pc, #148]	; (8001e34 <main+0x148>)
 8001da0:	481f      	ldr	r0, [pc, #124]	; (8001e20 <main+0x134>)
 8001da2:	f7ff fd73 	bl	800188c <LCD_printf>
		  // LCD_SetCursor(&hlcd1, 0, 14);
		  // lcd_write(&hlcd1, &data, 8);
		  LCD_SetCursor(&hlcd1, 1, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2101      	movs	r1, #1
 8001daa:	481d      	ldr	r0, [pc, #116]	; (8001e20 <main+0x134>)
 8001dac:	f7ff fd54 	bl	8001858 <LCD_SetCursor>
		  LCD_printStr(&hlcd1, "               ");
 8001db0:	4921      	ldr	r1, [pc, #132]	; (8001e38 <main+0x14c>)
 8001db2:	481b      	ldr	r0, [pc, #108]	; (8001e20 <main+0x134>)
 8001db4:	f7ff fd31 	bl	800181a <LCD_printStr>
 8001db8:	e01d      	b.n	8001df6 <main+0x10a>
	  }
	  else
	  {
		  LCD_SetCursor(&hlcd1, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4818      	ldr	r0, [pc, #96]	; (8001e20 <main+0x134>)
 8001dc0:	f7ff fd4a 	bl	8001858 <LCD_SetCursor>
		  LCD_printf(&hlcd1, "WYJ: %5.2f [lux] ", (float32_t)LED_lux);
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <main+0x118>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbdd 	bl	8000588 <__aeabi_f2d>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4623      	mov	r3, r4
 8001dd6:	4919      	ldr	r1, [pc, #100]	; (8001e3c <main+0x150>)
 8001dd8:	4811      	ldr	r0, [pc, #68]	; (8001e20 <main+0x134>)
 8001dda:	f7ff fd57 	bl	800188c <LCD_printf>
		  LCD_SetCursor(&hlcd1, 1, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2101      	movs	r1, #1
 8001de2:	480f      	ldr	r0, [pc, #60]	; (8001e20 <main+0x134>)
 8001de4:	f7ff fd38 	bl	8001858 <LCD_SetCursor>
		  LCD_printf(&hlcd1, "ZAD: %03d [lux]  ", (uint32_t)set_point);
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <main+0x11c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4914      	ldr	r1, [pc, #80]	; (8001e40 <main+0x154>)
 8001df0:	480b      	ldr	r0, [pc, #44]	; (8001e20 <main+0x134>)
 8001df2:	f7ff fd4b 	bl	800188c <LCD_printf>
	  }
	  HAL_Delay(100);
 8001df6:	2064      	movs	r0, #100	; 0x64
 8001df8:	f000 fd60 	bl	80028bc <HAL_Delay>
	  if(LCD_show_ERROR)
 8001dfc:	e7bd      	b.n	8001d7a <main+0x8e>
 8001dfe:	bf00      	nop
 8001e00:	2000003c 	.word	0x2000003c
 8001e04:	20000244 	.word	0x20000244
 8001e08:	2000023c 	.word	0x2000023c
 8001e0c:	200002bc 	.word	0x200002bc
 8001e10:	40400000 	.word	0x40400000
 8001e14:	200003dc 	.word	0x200003dc
 8001e18:	0001fbcf 	.word	0x0001fbcf
 8001e1c:	2000039c 	.word	0x2000039c
 8001e20:	20000018 	.word	0x20000018
 8001e24:	20000318 	.word	0x20000318
 8001e28:	2000041c 	.word	0x2000041c
 8001e2c:	20000259 	.word	0x20000259
 8001e30:	20000250 	.word	0x20000250
 8001e34:	0800b0c4 	.word	0x0800b0c4
 8001e38:	0800b0d8 	.word	0x0800b0d8
 8001e3c:	0800b0e8 	.word	0x0800b0e8
 8001e40:	0800b0fc 	.word	0x0800b0fc

08001e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b0b4      	sub	sp, #208	; 0xd0
 8001e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e4e:	2230      	movs	r2, #48	; 0x30
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 ff90 	bl	8006d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e68:	f107 0308 	add.w	r3, r7, #8
 8001e6c:	2284      	movs	r2, #132	; 0x84
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 ff81 	bl	8006d78 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e76:	f001 fd5d 	bl	8003934 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <SystemClock_Config+0x120>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a39      	ldr	r2, [pc, #228]	; (8001f64 <SystemClock_Config+0x120>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <SystemClock_Config+0x120>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e92:	4b35      	ldr	r3, [pc, #212]	; (8001f68 <SystemClock_Config+0x124>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a34      	ldr	r2, [pc, #208]	; (8001f68 <SystemClock_Config+0x124>)
 8001e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <SystemClock_Config+0x124>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001eb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ec2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001ecc:	23d8      	movs	r3, #216	; 0xd8
 8001ece:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ede:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 fd86 	bl	80039f4 <HAL_RCC_OscConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001eee:	f000 f83d 	bl	8001f6c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ef2:	f001 fd2f 	bl	8003954 <HAL_PWREx_EnableOverDrive>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001efc:	f000 f836 	bl	8001f6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f00:	230f      	movs	r3, #15
 8001f02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f06:	2302      	movs	r3, #2
 8001f08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f22:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f26:	2107      	movs	r1, #7
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 f807 	bl	8003f3c <HAL_RCC_ClockConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001f34:	f000 f81a 	bl	8001f6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001f38:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001f3c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 f9ee 	bl	800432c <HAL_RCCEx_PeriphCLKConfig>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001f56:	f000 f809 	bl	8001f6c <Error_Handler>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	37d0      	adds	r7, #208	; 0xd0
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40007000 	.word	0x40007000

08001f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f70:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <Error_Handler+0x6>

08001f74 <SENSOR_BH1750_Init>:
 * @brief BH1750 initialization procedure.
 * @param[in] hbh1750 BH1750 handler
 * @return None
 */
void SENSOR_BH1750_Init(BH1750_HandleTypeDef * hbh1750)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	6078      	str	r0, [r7, #4]
	uint8_t command;

	command = BH1750_POWER_ON;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, 1 ,hbh1750->Timeout);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	791b      	ldrb	r3, [r3, #4]
 8001f88:	b299      	uxth	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	795b      	ldrb	r3, [r3, #5]
 8001f8e:	f107 020f 	add.w	r2, r7, #15
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2301      	movs	r3, #1
 8001f96:	f001 f86b 	bl	8003070 <HAL_I2C_Master_Transmit>

	command = BH1750_CONTINOUS_H_RES_MODE;
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, 1 ,hbh1750->Timeout);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	791b      	ldrb	r3, [r3, #4]
 8001fa6:	b299      	uxth	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	795b      	ldrb	r3, [r3, #5]
 8001fac:	f107 020f 	add.w	r2, r7, #15
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	f001 f85c 	bl	8003070 <HAL_I2C_Master_Transmit>
}
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <SENSOR_BH1750_ReadLux>:
 * @brief BH1750 measurement reading procedure.
 * @param[in] hbh1750 BH1750 handler
 * @return float light in lux
 */
float SENSOR_BH1750_ReadLux(BH1750_HandleTypeDef *hbh1750)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	6078      	str	r0, [r7, #4]
	float light_in_lux = 0.0;
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[2];

	//reading from the sensor and writing the value to the buffer
	HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, buffer, 2, hbh1750->Timeout);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	791b      	ldrb	r3, [r3, #4]
 8001fd6:	b299      	uxth	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	795b      	ldrb	r3, [r3, #5]
 8001fdc:	f107 0208 	add.w	r2, r7, #8
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f001 f938 	bl	8003258 <HAL_I2C_Master_Receive>

	light_in_lux = ((buffer[0] << 8) | buffer[1])/1.2;
 8001fe8:	7a3b      	ldrb	r3, [r7, #8]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	7a7a      	ldrb	r2, [r7, #9]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fab7 	bl	8000564 <__aeabi_i2d>
 8001ff6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <SENSOR_BH1750_ReadLux+0x60>)
 8001ffc:	f7fe fc46 	bl	800088c <__aeabi_ddiv>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	4618      	mov	r0, r3
 8002006:	4621      	mov	r1, r4
 8002008:	f7fe fe0e 	bl	8000c28 <__aeabi_d2f>
 800200c:	4603      	mov	r3, r0
 800200e:	60fb      	str	r3, [r7, #12]

	// return float in lux
	return light_in_lux;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	ee07 3a90 	vmov	s15, r3
}
 8002016:	eeb0 0a67 	vmov.f32	s0, s15
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	bd90      	pop	{r4, r7, pc}
 8002020:	3ff33333 	.word	0x3ff33333

08002024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_MspInit+0x44>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_MspInit+0x44>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_MspInit+0x44>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_MspInit+0x44>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_MspInit+0x44>)
 8002048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204c:	6453      	str	r3, [r2, #68]	; 0x44
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_MspInit+0x44>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800

0800206c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <NMI_Handler+0x4>

08002072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <HardFault_Handler+0x4>

08002078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <MemManage_Handler+0x4>

0800207e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <BusFault_Handler+0x4>

08002084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <UsageFault_Handler+0x4>

0800208a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b8:	f000 fbe0 	bl	800287c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}

080020c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80020c4:	2020      	movs	r0, #32
 80020c6:	f000 ff2b 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <TIM2_IRQHandler+0x10>)
 80020d6:	f002 fecf 	bl	8004e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200003dc 	.word	0x200003dc

080020e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <TIM4_IRQHandler+0x10>)
 80020ea:	f002 fec5 	bl	8004e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000031c 	.word	0x2000031c

080020f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <USART3_IRQHandler+0x10>)
 80020fe:	f003 ffc1 	bl	8006084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000041c 	.word	0x2000041c

0800210c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002110:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002114:	f000 ff04 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002118:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800211c:	f000 ff00 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002120:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002124:	f000 fefc 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002128:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800212c:	f000 fef8 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f004 fdde 	bl	8006d24 <__errno>
 8002168:	4602      	mov	r2, r0
 800216a:	230c      	movs	r3, #12
 800216c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20050000 	.word	0x20050000
 8002194:	00000400 	.word	0x00000400
 8002198:	20000264 	.word	0x20000264
 800219c:	200004a8 	.word	0x200004a8

080021a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <SystemInit+0x28>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <SystemInit+0x28>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SystemInit+0x28>)
 80021b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ba:	609a      	str	r2, [r3, #8]
#endif
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d2:	f107 0310 	add.w	r3, r7, #16
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <MX_TIM2_Init+0x98>)
 80021ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <MX_TIM2_Init+0x98>)
 80021f4:	226b      	movs	r2, #107	; 0x6b
 80021f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <MX_TIM2_Init+0x98>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <MX_TIM2_Init+0x98>)
 8002200:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002204:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <MX_TIM2_Init+0x98>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <MX_TIM2_Init+0x98>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002212:	4814      	ldr	r0, [pc, #80]	; (8002264 <MX_TIM2_Init+0x98>)
 8002214:	f002 fc78 	bl	8004b08 <HAL_TIM_Base_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800221e:	f7ff fea5 	bl	8001f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002226:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	4619      	mov	r1, r3
 800222e:	480d      	ldr	r0, [pc, #52]	; (8002264 <MX_TIM2_Init+0x98>)
 8002230:	f003 f85a 	bl	80052e8 <HAL_TIM_ConfigClockSource>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800223a:	f7ff fe97 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4806      	ldr	r0, [pc, #24]	; (8002264 <MX_TIM2_Init+0x98>)
 800224c:	f003 fcec 	bl	8005c28 <HAL_TIMEx_MasterConfigSynchronization>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002256:	f7ff fe89 	bl	8001f6c <Error_Handler>
  }

}
 800225a:	bf00      	nop
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200003dc 	.word	0x200003dc

08002268 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	; 0x38
 800226c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002288:	463b      	mov	r3, r7
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	611a      	str	r2, [r3, #16]
 8002296:	615a      	str	r2, [r3, #20]
 8002298:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800229a:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <MX_TIM3_Init+0x128>)
 800229c:	4a3d      	ldr	r2, [pc, #244]	; (8002394 <MX_TIM3_Init+0x12c>)
 800229e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 80022a0:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <MX_TIM3_Init+0x128>)
 80022a2:	226b      	movs	r2, #107	; 0x6b
 80022a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a6:	4b3a      	ldr	r3, [pc, #232]	; (8002390 <MX_TIM3_Init+0x128>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80022ac:	4b38      	ldr	r3, [pc, #224]	; (8002390 <MX_TIM3_Init+0x128>)
 80022ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <MX_TIM3_Init+0x128>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ba:	4b35      	ldr	r3, [pc, #212]	; (8002390 <MX_TIM3_Init+0x128>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022c0:	4833      	ldr	r0, [pc, #204]	; (8002390 <MX_TIM3_Init+0x128>)
 80022c2:	f002 fc21 	bl	8004b08 <HAL_TIM_Base_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80022cc:	f7ff fe4e 	bl	8001f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022da:	4619      	mov	r1, r3
 80022dc:	482c      	ldr	r0, [pc, #176]	; (8002390 <MX_TIM3_Init+0x128>)
 80022de:	f003 f803 	bl	80052e8 <HAL_TIM_ConfigClockSource>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80022e8:	f7ff fe40 	bl	8001f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022ec:	4828      	ldr	r0, [pc, #160]	; (8002390 <MX_TIM3_Init+0x128>)
 80022ee:	f002 fcb7 	bl	8004c60 <HAL_TIM_PWM_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80022f8:	f7ff fe38 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	4619      	mov	r1, r3
 800230a:	4821      	ldr	r0, [pc, #132]	; (8002390 <MX_TIM3_Init+0x128>)
 800230c:	f003 fc8c 	bl	8005c28 <HAL_TIMEx_MasterConfigSynchronization>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002316:	f7ff fe29 	bl	8001f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800231a:	2360      	movs	r3, #96	; 0x60
 800231c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800232a:	463b      	mov	r3, r7
 800232c:	2200      	movs	r2, #0
 800232e:	4619      	mov	r1, r3
 8002330:	4817      	ldr	r0, [pc, #92]	; (8002390 <MX_TIM3_Init+0x128>)
 8002332:	f002 fec1 	bl	80050b8 <HAL_TIM_PWM_ConfigChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800233c:	f7ff fe16 	bl	8001f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002340:	463b      	mov	r3, r7
 8002342:	2204      	movs	r2, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4812      	ldr	r0, [pc, #72]	; (8002390 <MX_TIM3_Init+0x128>)
 8002348:	f002 feb6 	bl	80050b8 <HAL_TIM_PWM_ConfigChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002352:	f7ff fe0b 	bl	8001f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002356:	463b      	mov	r3, r7
 8002358:	2208      	movs	r2, #8
 800235a:	4619      	mov	r1, r3
 800235c:	480c      	ldr	r0, [pc, #48]	; (8002390 <MX_TIM3_Init+0x128>)
 800235e:	f002 feab 	bl	80050b8 <HAL_TIM_PWM_ConfigChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002368:	f7ff fe00 	bl	8001f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800236c:	463b      	mov	r3, r7
 800236e:	220c      	movs	r2, #12
 8002370:	4619      	mov	r1, r3
 8002372:	4807      	ldr	r0, [pc, #28]	; (8002390 <MX_TIM3_Init+0x128>)
 8002374:	f002 fea0 	bl	80050b8 <HAL_TIM_PWM_ConfigChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800237e:	f7ff fdf5 	bl	8001f6c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002382:	4803      	ldr	r0, [pc, #12]	; (8002390 <MX_TIM3_Init+0x128>)
 8002384:	f000 f942 	bl	800260c <HAL_TIM_MspPostInit>

}
 8002388:	bf00      	nop
 800238a:	3738      	adds	r7, #56	; 0x38
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	2000039c 	.word	0x2000039c
 8002394:	40000400 	.word	0x40000400

08002398 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 fce6 	bl	8006d78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ac:	463b      	mov	r3, r7
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <MX_TIM4_Init+0xa4>)
 80023ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023be:	2203      	movs	r2, #3
 80023c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023ca:	2264      	movs	r2, #100	; 0x64
 80023cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023da:	2303      	movs	r3, #3
 80023dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80023de:	2302      	movs	r3, #2
 80023e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023e2:	2301      	movs	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80023ee:	2302      	movs	r3, #2
 80023f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023f2:	2301      	movs	r3, #1
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	4619      	mov	r1, r3
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <MX_TIM4_Init+0xa0>)
 8002406:	f002 fca5 	bl	8004d54 <HAL_TIM_Encoder_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002410:	f7ff fdac 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002414:	2300      	movs	r3, #0
 8002416:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800241c:	463b      	mov	r3, r7
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_TIM4_Init+0xa0>)
 8002422:	f003 fc01 	bl	8005c28 <HAL_TIMEx_MasterConfigSynchronization>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800242c:	f7ff fd9e 	bl	8001f6c <Error_Handler>
  }

}
 8002430:	bf00      	nop
 8002432:	3730      	adds	r7, #48	; 0x30
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2000031c 	.word	0x2000031c
 800243c:	40000800 	.word	0x40000800

08002440 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002446:	f107 0310 	add.w	r3, r7, #16
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800245e:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <MX_TIM5_Init+0x94>)
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <MX_TIM5_Init+0x98>)
 8002462:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <MX_TIM5_Init+0x94>)
 8002466:	226b      	movs	r2, #107	; 0x6b
 8002468:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <MX_TIM5_Init+0x94>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <MX_TIM5_Init+0x94>)
 8002472:	f04f 32ff 	mov.w	r2, #4294967295
 8002476:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <MX_TIM5_Init+0x94>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <MX_TIM5_Init+0x94>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002484:	4813      	ldr	r0, [pc, #76]	; (80024d4 <MX_TIM5_Init+0x94>)
 8002486:	f002 fb3f 	bl	8004b08 <HAL_TIM_Base_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002490:	f7ff fd6c 	bl	8001f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002498:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	4619      	mov	r1, r3
 80024a0:	480c      	ldr	r0, [pc, #48]	; (80024d4 <MX_TIM5_Init+0x94>)
 80024a2:	f002 ff21 	bl	80052e8 <HAL_TIM_ConfigClockSource>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80024ac:	f7ff fd5e 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_TIM5_Init+0x94>)
 80024be:	f003 fbb3 	bl	8005c28 <HAL_TIMEx_MasterConfigSynchronization>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80024c8:	f7ff fd50 	bl	8001f6c <Error_Handler>
  }

}
 80024cc:	bf00      	nop
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000035c 	.word	0x2000035c
 80024d8:	40000c00 	.word	0x40000c00

080024dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ec:	d114      	bne.n	8002518 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_TIM_Base_MspInit+0x8c>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_TIM_Base_MspInit+0x8c>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_TIM_Base_MspInit+0x8c>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	201c      	movs	r0, #28
 800250c:	f000 fad3 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002510:	201c      	movs	r0, #28
 8002512:	f000 faec 	bl	8002aee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002516:	e022      	b.n	800255e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <HAL_TIM_Base_MspInit+0x90>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10c      	bne.n	800253c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_TIM_Base_MspInit+0x8c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a10      	ldr	r2, [pc, #64]	; (8002568 <HAL_TIM_Base_MspInit+0x8c>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <HAL_TIM_Base_MspInit+0x8c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
}
 800253a:	e010      	b.n	800255e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM5)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <HAL_TIM_Base_MspInit+0x94>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10b      	bne.n	800255e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_TIM_Base_MspInit+0x8c>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_TIM_Base_MspInit+0x8c>)
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_TIM_Base_MspInit+0x8c>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40000400 	.word	0x40000400
 8002570:	40000c00 	.word	0x40000c00

08002574 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d130      	bne.n	80025f8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_TIM_Encoder_MspInit+0x90>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <HAL_TIM_Encoder_MspInit+0x90>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_TIM_Encoder_MspInit+0x90>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_TIM_Encoder_MspInit+0x90>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a14      	ldr	r2, [pc, #80]	; (8002604 <HAL_TIM_Encoder_MspInit+0x90>)
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_TIM_Encoder_MspInit+0x90>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 80025c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025d8:	2302      	movs	r3, #2
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	4619      	mov	r1, r3
 80025e2:	4809      	ldr	r0, [pc, #36]	; (8002608 <HAL_TIM_Encoder_MspInit+0x94>)
 80025e4:	f000 fac0 	bl	8002b68 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	201e      	movs	r0, #30
 80025ee:	f000 fa62 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025f2:	201e      	movs	r0, #30
 80025f4:	f000 fa7b 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80025f8:	bf00      	nop
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40000800 	.word	0x40000800
 8002604:	40023800 	.word	0x40023800
 8002608:	40020c00 	.word	0x40020c00

0800260c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <HAL_TIM_MspPostInit+0x9c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d138      	bne.n	80026a0 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <HAL_TIM_MspPostInit+0xa0>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a1e      	ldr	r2, [pc, #120]	; (80026ac <HAL_TIM_MspPostInit+0xa0>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_TIM_MspPostInit+0xa0>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_TIM_MspPostInit+0xa0>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a18      	ldr	r2, [pc, #96]	; (80026ac <HAL_TIM_MspPostInit+0xa0>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_TIM_MspPostInit+0xa0>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin|LED_RGB_CH_R_Pin;
 800265e:	2312      	movs	r3, #18
 8002660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800266e:	2302      	movs	r3, #2
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	480d      	ldr	r0, [pc, #52]	; (80026b0 <HAL_TIM_MspPostInit+0xa4>)
 800267a:	f000 fa75 	bl	8002b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin|LED_RGB_CH_B_Pin;
 800267e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002690:	2302      	movs	r3, #2
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	4806      	ldr	r0, [pc, #24]	; (80026b4 <HAL_TIM_MspPostInit+0xa8>)
 800269c:	f000 fa64 	bl	8002b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020800 	.word	0x40020800

080026b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <MX_USART3_UART_Init+0x58>)
 80026be:	4a15      	ldr	r2, [pc, #84]	; (8002714 <MX_USART3_UART_Init+0x5c>)
 80026c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4800;
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <MX_USART3_UART_Init+0x58>)
 80026c4:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80026c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <MX_USART3_UART_Init+0x58>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <MX_USART3_UART_Init+0x58>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_USART3_UART_Init+0x58>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <MX_USART3_UART_Init+0x58>)
 80026de:	220c      	movs	r2, #12
 80026e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <MX_USART3_UART_Init+0x58>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_USART3_UART_Init+0x58>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <MX_USART3_UART_Init+0x58>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MX_USART3_UART_Init+0x58>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026fa:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_USART3_UART_Init+0x58>)
 80026fc:	f003 fb40 	bl	8005d80 <HAL_UART_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002706:	f7ff fc31 	bl	8001f6c <Error_Handler>
  }

}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000041c 	.word	0x2000041c
 8002714:	40004800 	.word	0x40004800

08002718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_UART_MspInit+0x8c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d130      	bne.n	800279c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_UART_MspInit+0x90>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <HAL_UART_MspInit+0x90>)
 8002740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_UART_MspInit+0x90>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <HAL_UART_MspInit+0x90>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <HAL_UART_MspInit+0x90>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_UART_MspInit+0x90>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800276a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800276e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002778:	2303      	movs	r3, #3
 800277a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800277c:	2307      	movs	r3, #7
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	4619      	mov	r1, r3
 8002786:	4809      	ldr	r0, [pc, #36]	; (80027ac <HAL_UART_MspInit+0x94>)
 8002788:	f000 f9ee 	bl	8002b68 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	2100      	movs	r1, #0
 8002790:	2027      	movs	r0, #39	; 0x27
 8002792:	f000 f990 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002796:	2027      	movs	r0, #39	; 0x27
 8002798:	f000 f9a9 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800279c:	bf00      	nop
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40004800 	.word	0x40004800
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020c00 	.word	0x40020c00

080027b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027b6:	e003      	b.n	80027c0 <LoopCopyDataInit>

080027b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027be:	3104      	adds	r1, #4

080027c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027c0:	480b      	ldr	r0, [pc, #44]	; (80027f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027c8:	d3f6      	bcc.n	80027b8 <CopyDataInit>
  ldr  r2, =_sbss
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027cc:	e002      	b.n	80027d4 <LoopFillZerobss>

080027ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027d0:	f842 3b04 	str.w	r3, [r2], #4

080027d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027d8:	d3f9      	bcc.n	80027ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027da:	f7ff fce1 	bl	80021a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027de:	f004 faa7 	bl	8006d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e2:	f7ff fa83 	bl	8001cec <main>
  bx  lr    
 80027e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027e8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80027ec:	0800b474 	.word	0x0800b474
  ldr  r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027f4:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 80027f8:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 80027fc:	200004a4 	.word	0x200004a4

08002800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC_IRQHandler>

08002802 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002806:	2003      	movs	r0, #3
 8002808:	f000 f94a 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280c:	2000      	movs	r0, #0
 800280e:	f000 f805 	bl	800281c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002812:	f7ff fc07 	bl	8002024 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_InitTick+0x54>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_InitTick+0x58>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	4619      	mov	r1, r3
 800282e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002832:	fbb3 f3f1 	udiv	r3, r3, r1
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f965 	bl	8002b0a <HAL_SYSTICK_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e00e      	b.n	8002868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d80a      	bhi.n	8002866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002850:	2200      	movs	r2, #0
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f000 f92d 	bl	8002ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800285c:	4a06      	ldr	r2, [pc, #24]	; (8002878 <HAL_InitTick+0x5c>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000044 	.word	0x20000044
 8002874:	2000004c 	.word	0x2000004c
 8002878:	20000048 	.word	0x20000048

0800287c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x20>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_IncTick+0x24>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_IncTick+0x24>)
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	2000004c 	.word	0x2000004c
 80028a0:	2000049c 	.word	0x2000049c

080028a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return uwTick;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_GetTick+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	2000049c 	.word	0x2000049c

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff ffee 	bl	80028a4 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_Delay+0x40>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffde 	bl	80028a4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	2000004c 	.word	0x2000004c

08002900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <__NVIC_SetPriorityGrouping+0x40>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800291c:	4013      	ands	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 800292a:	4313      	orrs	r3, r2
 800292c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292e:	4a04      	ldr	r2, [pc, #16]	; (8002940 <__NVIC_SetPriorityGrouping+0x40>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	60d3      	str	r3, [r2, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00
 8002944:	05fa0000 	.word	0x05fa0000

08002948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <__NVIC_GetPriorityGrouping+0x18>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 0307 	and.w	r3, r3, #7
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	2b00      	cmp	r3, #0
 8002974:	db0b      	blt.n	800298e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4907      	ldr	r1, [pc, #28]	; (800299c <__NVIC_EnableIRQ+0x38>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2001      	movs	r0, #1
 8002986:	fa00 f202 	lsl.w	r2, r0, r2
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e100 	.word	0xe000e100

080029a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db0a      	blt.n	80029ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	490c      	ldr	r1, [pc, #48]	; (80029ec <__NVIC_SetPriority+0x4c>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	440b      	add	r3, r1
 80029c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c8:	e00a      	b.n	80029e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4908      	ldr	r1, [pc, #32]	; (80029f0 <__NVIC_SetPriority+0x50>)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	3b04      	subs	r3, #4
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	440b      	add	r3, r1
 80029de:	761a      	strb	r2, [r3, #24]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f1c3 0307 	rsb	r3, r3, #7
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	bf28      	it	cs
 8002a12:	2304      	movcs	r3, #4
 8002a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d902      	bls.n	8002a24 <NVIC_EncodePriority+0x30>
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3b03      	subs	r3, #3
 8002a22:	e000      	b.n	8002a26 <NVIC_EncodePriority+0x32>
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	401a      	ands	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	4313      	orrs	r3, r2
         );
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a6c:	d301      	bcc.n	8002a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00f      	b.n	8002a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <SysTick_Config+0x40>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	f7ff ff8e 	bl	80029a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <SysTick_Config+0x40>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SysTick_Config+0x40>)
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000e010 	.word	0xe000e010

08002aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff29 	bl	8002900 <__NVIC_SetPriorityGrouping>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac8:	f7ff ff3e 	bl	8002948 <__NVIC_GetPriorityGrouping>
 8002acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f7ff ff8e 	bl	80029f4 <NVIC_EncodePriority>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff5d 	bl	80029a0 <__NVIC_SetPriority>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff31 	bl	8002964 <__NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ffa2 	bl	8002a5c <SysTick_Config>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d004      	beq.n	8002b40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e00c      	b.n	8002b5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2205      	movs	r2, #5
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	e175      	b.n	8002e74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	f040 8164 	bne.w	8002e6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d00b      	beq.n	8002bc6 <HAL_GPIO_Init+0x5e>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d007      	beq.n	8002bc6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bba:	2b11      	cmp	r3, #17
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b12      	cmp	r3, #18
 8002bc4:	d130      	bne.n	8002c28 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 0201 	and.w	r2, r3, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x100>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b12      	cmp	r3, #18
 8002c66:	d123      	bne.n	8002cb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	08da      	lsrs	r2, r3, #3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3208      	adds	r2, #8
 8002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	08da      	lsrs	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3208      	adds	r2, #8
 8002caa:	69b9      	ldr	r1, [r7, #24]
 8002cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0203 	and.w	r2, r3, #3
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80be 	beq.w	8002e6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf2:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <HAL_GPIO_Init+0x320>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	4a64      	ldr	r2, [pc, #400]	; (8002e88 <HAL_GPIO_Init+0x320>)
 8002cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfe:	4b62      	ldr	r3, [pc, #392]	; (8002e88 <HAL_GPIO_Init+0x320>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d0a:	4a60      	ldr	r2, [pc, #384]	; (8002e8c <HAL_GPIO_Init+0x324>)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	3302      	adds	r3, #2
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	220f      	movs	r2, #15
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a57      	ldr	r2, [pc, #348]	; (8002e90 <HAL_GPIO_Init+0x328>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d037      	beq.n	8002da6 <HAL_GPIO_Init+0x23e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a56      	ldr	r2, [pc, #344]	; (8002e94 <HAL_GPIO_Init+0x32c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d031      	beq.n	8002da2 <HAL_GPIO_Init+0x23a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a55      	ldr	r2, [pc, #340]	; (8002e98 <HAL_GPIO_Init+0x330>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d02b      	beq.n	8002d9e <HAL_GPIO_Init+0x236>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a54      	ldr	r2, [pc, #336]	; (8002e9c <HAL_GPIO_Init+0x334>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d025      	beq.n	8002d9a <HAL_GPIO_Init+0x232>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a53      	ldr	r2, [pc, #332]	; (8002ea0 <HAL_GPIO_Init+0x338>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01f      	beq.n	8002d96 <HAL_GPIO_Init+0x22e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a52      	ldr	r2, [pc, #328]	; (8002ea4 <HAL_GPIO_Init+0x33c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d019      	beq.n	8002d92 <HAL_GPIO_Init+0x22a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a51      	ldr	r2, [pc, #324]	; (8002ea8 <HAL_GPIO_Init+0x340>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_GPIO_Init+0x226>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a50      	ldr	r2, [pc, #320]	; (8002eac <HAL_GPIO_Init+0x344>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00d      	beq.n	8002d8a <HAL_GPIO_Init+0x222>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4f      	ldr	r2, [pc, #316]	; (8002eb0 <HAL_GPIO_Init+0x348>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <HAL_GPIO_Init+0x21e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4e      	ldr	r2, [pc, #312]	; (8002eb4 <HAL_GPIO_Init+0x34c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_GPIO_Init+0x21a>
 8002d7e:	2309      	movs	r3, #9
 8002d80:	e012      	b.n	8002da8 <HAL_GPIO_Init+0x240>
 8002d82:	230a      	movs	r3, #10
 8002d84:	e010      	b.n	8002da8 <HAL_GPIO_Init+0x240>
 8002d86:	2308      	movs	r3, #8
 8002d88:	e00e      	b.n	8002da8 <HAL_GPIO_Init+0x240>
 8002d8a:	2307      	movs	r3, #7
 8002d8c:	e00c      	b.n	8002da8 <HAL_GPIO_Init+0x240>
 8002d8e:	2306      	movs	r3, #6
 8002d90:	e00a      	b.n	8002da8 <HAL_GPIO_Init+0x240>
 8002d92:	2305      	movs	r3, #5
 8002d94:	e008      	b.n	8002da8 <HAL_GPIO_Init+0x240>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x240>
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e004      	b.n	8002da8 <HAL_GPIO_Init+0x240>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_Init+0x240>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x240>
 8002da6:	2300      	movs	r3, #0
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	f002 0203 	and.w	r2, r2, #3
 8002dae:	0092      	lsls	r2, r2, #2
 8002db0:	4093      	lsls	r3, r2
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002db8:	4934      	ldr	r1, [pc, #208]	; (8002e8c <HAL_GPIO_Init+0x324>)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc6:	4b3c      	ldr	r3, [pc, #240]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dea:	4a33      	ldr	r2, [pc, #204]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002df0:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e14:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e1a:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e44:	4b1c      	ldr	r3, [pc, #112]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e68:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	f67f ae86 	bls.w	8002b88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3724      	adds	r7, #36	; 0x24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40013800 	.word	0x40013800
 8002e90:	40020000 	.word	0x40020000
 8002e94:	40020400 	.word	0x40020400
 8002e98:	40020800 	.word	0x40020800
 8002e9c:	40020c00 	.word	0x40020c00
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40021400 	.word	0x40021400
 8002ea8:	40021800 	.word	0x40021800
 8002eac:	40021c00 	.word	0x40021c00
 8002eb0:	40022000 	.word	0x40022000
 8002eb4:	40022400 	.word	0x40022400
 8002eb8:	40013c00 	.word	0x40013c00

08002ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	887b      	ldrh	r3, [r7, #2]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
 8002ed8:	e001      	b.n	8002ede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	807b      	strh	r3, [r7, #2]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002efc:	787b      	ldrb	r3, [r7, #1]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f08:	e003      	b.n	8002f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f0a:	887b      	ldrh	r3, [r7, #2]
 8002f0c:	041a      	lsls	r2, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	619a      	str	r2, [r3, #24]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f36:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe fdf0 	bl	8001b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40013c00 	.word	0x40013c00

08002f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07f      	b.n	8003062 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fe fad2 	bl	8001520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2224      	movs	r2, #36	; 0x24
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	e006      	b.n	8002fd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d104      	bne.n	8002fea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fe8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_I2C_Init+0x11c>)
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003008:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	ea42 0103 	orr.w	r1, r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69d9      	ldr	r1, [r3, #28]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1a      	ldr	r2, [r3, #32]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	02008000 	.word	0x02008000

08003070 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	461a      	mov	r2, r3
 800307c:	460b      	mov	r3, r1
 800307e:	817b      	strh	r3, [r7, #10]
 8003080:	4613      	mov	r3, r2
 8003082:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b20      	cmp	r3, #32
 800308e:	f040 80da 	bne.w	8003246 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_I2C_Master_Transmit+0x30>
 800309c:	2302      	movs	r3, #2
 800309e:	e0d3      	b.n	8003248 <HAL_I2C_Master_Transmit+0x1d8>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030a8:	f7ff fbfc 	bl	80028a4 <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2319      	movs	r3, #25
 80030b4:	2201      	movs	r2, #1
 80030b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f9e6 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0be      	b.n	8003248 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2221      	movs	r2, #33	; 0x21
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2210      	movs	r2, #16
 80030d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	893a      	ldrh	r2, [r7, #8]
 80030ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2bff      	cmp	r3, #255	; 0xff
 80030fa:	d90e      	bls.n	800311a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	22ff      	movs	r2, #255	; 0xff
 8003100:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	b2da      	uxtb	r2, r3
 8003108:	8979      	ldrh	r1, [r7, #10]
 800310a:	4b51      	ldr	r3, [pc, #324]	; (8003250 <HAL_I2C_Master_Transmit+0x1e0>)
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fb48 	bl	80037a8 <I2C_TransferConfig>
 8003118:	e06c      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	b2da      	uxtb	r2, r3
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	4b48      	ldr	r3, [pc, #288]	; (8003250 <HAL_I2C_Master_Transmit+0x1e0>)
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fb37 	bl	80037a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800313a:	e05b      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	6a39      	ldr	r1, [r7, #32]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f9e3 	bl	800350c <I2C_WaitOnTXISFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e07b      	b.n	8003248 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	781a      	ldrb	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d034      	beq.n	80031f4 <HAL_I2C_Master_Transmit+0x184>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318e:	2b00      	cmp	r3, #0
 8003190:	d130      	bne.n	80031f4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	2200      	movs	r2, #0
 800319a:	2180      	movs	r1, #128	; 0x80
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f975 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e04d      	b.n	8003248 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2bff      	cmp	r3, #255	; 0xff
 80031b4:	d90e      	bls.n	80031d4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	8979      	ldrh	r1, [r7, #10]
 80031c4:	2300      	movs	r3, #0
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 faeb 	bl	80037a8 <I2C_TransferConfig>
 80031d2:	e00f      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	8979      	ldrh	r1, [r7, #10]
 80031e6:	2300      	movs	r3, #0
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fada 	bl	80037a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d19e      	bne.n	800313c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	6a39      	ldr	r1, [r7, #32]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f9c2 	bl	800358c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e01a      	b.n	8003248 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2220      	movs	r2, #32
 8003218:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_I2C_Master_Transmit+0x1e4>)
 8003226:	400b      	ands	r3, r1
 8003228:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
  }
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	80002000 	.word	0x80002000
 8003254:	fe00e800 	.word	0xfe00e800

08003258 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	461a      	mov	r2, r3
 8003264:	460b      	mov	r3, r1
 8003266:	817b      	strh	r3, [r7, #10]
 8003268:	4613      	mov	r3, r2
 800326a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	f040 80db 	bne.w	8003430 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_I2C_Master_Receive+0x30>
 8003284:	2302      	movs	r3, #2
 8003286:	e0d4      	b.n	8003432 <HAL_I2C_Master_Receive+0x1da>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003290:	f7ff fb08 	bl	80028a4 <HAL_GetTick>
 8003294:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2319      	movs	r3, #25
 800329c:	2201      	movs	r2, #1
 800329e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f8f2 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0bf      	b.n	8003432 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2222      	movs	r2, #34	; 0x22
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2210      	movs	r2, #16
 80032be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	893a      	ldrh	r2, [r7, #8]
 80032d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2bff      	cmp	r3, #255	; 0xff
 80032e2:	d90e      	bls.n	8003302 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	22ff      	movs	r2, #255	; 0xff
 80032e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	8979      	ldrh	r1, [r7, #10]
 80032f2:	4b52      	ldr	r3, [pc, #328]	; (800343c <HAL_I2C_Master_Receive+0x1e4>)
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fa54 	bl	80037a8 <I2C_TransferConfig>
 8003300:	e06d      	b.n	80033de <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	b2da      	uxtb	r2, r3
 8003312:	8979      	ldrh	r1, [r7, #10]
 8003314:	4b49      	ldr	r3, [pc, #292]	; (800343c <HAL_I2C_Master_Receive+0x1e4>)
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 fa43 	bl	80037a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003322:	e05c      	b.n	80033de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	6a39      	ldr	r1, [r7, #32]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f96b 	bl	8003604 <I2C_WaitOnRXNEFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e07c      	b.n	8003432 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d034      	beq.n	80033de <HAL_I2C_Master_Receive+0x186>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	d130      	bne.n	80033de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	2200      	movs	r2, #0
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f880 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e04d      	b.n	8003432 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	2bff      	cmp	r3, #255	; 0xff
 800339e:	d90e      	bls.n	80033be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	22ff      	movs	r2, #255	; 0xff
 80033a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	8979      	ldrh	r1, [r7, #10]
 80033ae:	2300      	movs	r3, #0
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f9f6 	bl	80037a8 <I2C_TransferConfig>
 80033bc:	e00f      	b.n	80033de <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	8979      	ldrh	r1, [r7, #10]
 80033d0:	2300      	movs	r3, #0
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f9e5 	bl	80037a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d19d      	bne.n	8003324 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	6a39      	ldr	r1, [r7, #32]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f8cd 	bl	800358c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e01a      	b.n	8003432 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2220      	movs	r2, #32
 8003402:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <HAL_I2C_Master_Receive+0x1e8>)
 8003410:	400b      	ands	r3, r1
 8003412:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	80002400 	.word	0x80002400
 8003440:	fe00e800 	.word	0xfe00e800

08003444 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b02      	cmp	r3, #2
 8003458:	d103      	bne.n	8003462 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d007      	beq.n	8003480 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	619a      	str	r2, [r3, #24]
  }
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800349c:	e022      	b.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d01e      	beq.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7ff f9fd 	bl	80028a4 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d113      	bne.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e00f      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d0cd      	beq.n	800349e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003518:	e02c      	b.n	8003574 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f8dc 	bl	80036dc <I2C_IsAcknowledgeFailed>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e02a      	b.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d01e      	beq.n	8003574 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7ff f9b5 	bl	80028a4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d113      	bne.n	8003574 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b02      	cmp	r3, #2
 8003580:	d1cb      	bne.n	800351a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003598:	e028      	b.n	80035ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f89c 	bl	80036dc <I2C_IsAcknowledgeFailed>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e026      	b.n	80035fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ae:	f7ff f979 	bl	80028a4 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d302      	bcc.n	80035c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d113      	bne.n	80035ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e007      	b.n	80035fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d1cf      	bne.n	800359a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003610:	e055      	b.n	80036be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f860 	bl	80036dc <I2C_IsAcknowledgeFailed>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e053      	b.n	80036ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b20      	cmp	r3, #32
 8003632:	d129      	bne.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d105      	bne.n	800364e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e03f      	b.n	80036ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2220      	movs	r2, #32
 8003654:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003662:	400b      	ands	r3, r1
 8003664:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e022      	b.n	80036ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7ff f90c 	bl	80028a4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f043 0220 	orr.w	r2, r3, #32
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e007      	b.n	80036ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d1a2      	bne.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	fe00e800 	.word	0xfe00e800

080036dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d151      	bne.n	800379a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036f6:	e022      	b.n	800373e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d01e      	beq.n	800373e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003700:	f7ff f8d0 	bl	80028a4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	429a      	cmp	r2, r3
 800370e:	d302      	bcc.n	8003716 <I2C_IsAcknowledgeFailed+0x3a>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d113      	bne.n	800373e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f043 0220 	orr.w	r2, r3, #32
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e02e      	b.n	800379c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b20      	cmp	r3, #32
 800374a:	d1d5      	bne.n	80036f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2210      	movs	r2, #16
 8003752:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2220      	movs	r2, #32
 800375a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff fe71 	bl	8003444 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <I2C_IsAcknowledgeFailed+0xc8>)
 800376e:	400b      	ands	r3, r1
 8003770:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f043 0204 	orr.w	r2, r3, #4
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	fe00e800 	.word	0xfe00e800

080037a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	460b      	mov	r3, r1
 80037b4:	817b      	strh	r3, [r7, #10]
 80037b6:	4613      	mov	r3, r2
 80037b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	0d5b      	lsrs	r3, r3, #21
 80037c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037c8:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <I2C_TransferConfig+0x58>)
 80037ca:	430b      	orrs	r3, r1
 80037cc:	43db      	mvns	r3, r3
 80037ce:	ea02 0103 	and.w	r1, r2, r3
 80037d2:	897b      	ldrh	r3, [r7, #10]
 80037d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037d8:	7a7b      	ldrb	r3, [r7, #9]
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	03ff63ff 	.word	0x03ff63ff

08003804 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b20      	cmp	r3, #32
 8003818:	d138      	bne.n	800388c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003824:	2302      	movs	r3, #2
 8003826:	e032      	b.n	800388e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003856:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e000      	b.n	800388e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800388c:	2302      	movs	r3, #2
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d139      	bne.n	8003924 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e033      	b.n	8003926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2224      	movs	r2, #36	; 0x24
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	e000      	b.n	8003926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003924:	2302      	movs	r3, #2
  }
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800393e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003942:	6013      	str	r3, [r2, #0]
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40007000 	.word	0x40007000

08003954 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_PWREx_EnableOverDrive+0x98>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	4a22      	ldr	r2, [pc, #136]	; (80039ec <HAL_PWREx_EnableOverDrive+0x98>)
 8003964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003968:	6413      	str	r3, [r2, #64]	; 0x40
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_PWREx_EnableOverDrive+0x98>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003976:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003982:	f7fe ff8f 	bl	80028a4 <HAL_GetTick>
 8003986:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003988:	e009      	b.n	800399e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800398a:	f7fe ff8b 	bl	80028a4 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003998:	d901      	bls.n	800399e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e022      	b.n	80039e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800399e:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039aa:	d1ee      	bne.n	800398a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039ac:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0f      	ldr	r2, [pc, #60]	; (80039f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039b8:	f7fe ff74 	bl	80028a4 <HAL_GetTick>
 80039bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039be:	e009      	b.n	80039d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039c0:	f7fe ff70 	bl	80028a4 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ce:	d901      	bls.n	80039d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e007      	b.n	80039e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e0:	d1ee      	bne.n	80039c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40007000 	.word	0x40007000

080039f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e291      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8087 	beq.w	8003b26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a18:	4b96      	ldr	r3, [pc, #600]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d00c      	beq.n	8003a3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a24:	4b93      	ldr	r3, [pc, #588]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d112      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62>
 8003a30:	4b90      	ldr	r3, [pc, #576]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3c:	d10b      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3e:	4b8d      	ldr	r3, [pc, #564]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d06c      	beq.n	8003b24 <HAL_RCC_OscConfig+0x130>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d168      	bne.n	8003b24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e26b      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCC_OscConfig+0x7a>
 8003a60:	4b84      	ldr	r3, [pc, #528]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a83      	ldr	r2, [pc, #524]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	e02e      	b.n	8003acc <HAL_RCC_OscConfig+0xd8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x9c>
 8003a76:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7e      	ldr	r2, [pc, #504]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b7c      	ldr	r3, [pc, #496]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7b      	ldr	r2, [pc, #492]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e01d      	b.n	8003acc <HAL_RCC_OscConfig+0xd8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xc0>
 8003a9a:	4b76      	ldr	r3, [pc, #472]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a75      	ldr	r2, [pc, #468]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b73      	ldr	r3, [pc, #460]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a72      	ldr	r2, [pc, #456]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0xd8>
 8003ab4:	4b6f      	ldr	r3, [pc, #444]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6e      	ldr	r2, [pc, #440]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b6c      	ldr	r3, [pc, #432]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6b      	ldr	r2, [pc, #428]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fee6 	bl	80028a4 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fe fee2 	bl	80028a4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e21f      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0xe8>
 8003afa:	e014      	b.n	8003b26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe fed2 	bl	80028a4 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fe fece 	bl	80028a4 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e20b      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x110>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d069      	beq.n	8003c06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b32:	4b50      	ldr	r3, [pc, #320]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b4d      	ldr	r3, [pc, #308]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d11c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x190>
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_RCC_OscConfig+0x17a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e1df      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6e:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	493d      	ldr	r1, [pc, #244]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	e040      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d023      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b8c:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a38      	ldr	r2, [pc, #224]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fe fe84 	bl	80028a4 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba0:	f7fe fe80 	bl	80028a4 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e1bd      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb2:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbe:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4929      	ldr	r1, [pc, #164]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
 8003bd2:	e018      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe fe60 	bl	80028a4 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fe fe5c 	bl	80028a4 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e199      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d038      	beq.n	8003c84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d019      	beq.n	8003c4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1a:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1e:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7fe fe3d 	bl	80028a4 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2e:	f7fe fe39 	bl	80028a4 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e176      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x23a>
 8003c4c:	e01a      	b.n	8003c84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7fe fe23 	bl	80028a4 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fe fe1f 	bl	80028a4 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d903      	bls.n	8003c78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e15c      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
 8003c74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c78:	4b91      	ldr	r3, [pc, #580]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ee      	bne.n	8003c62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a4 	beq.w	8003dda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c92:	4b8b      	ldr	r3, [pc, #556]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10d      	bne.n	8003cba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	4b88      	ldr	r3, [pc, #544]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	4a87      	ldr	r2, [pc, #540]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8003caa:	4b85      	ldr	r3, [pc, #532]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cba:	4b82      	ldr	r3, [pc, #520]	; (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d118      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cc6:	4b7f      	ldr	r3, [pc, #508]	; (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a7e      	ldr	r2, [pc, #504]	; (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd2:	f7fe fde7 	bl	80028a4 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cda:	f7fe fde3 	bl	80028a4 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b64      	cmp	r3, #100	; 0x64
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e120      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cec:	4b75      	ldr	r3, [pc, #468]	; (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCC_OscConfig+0x31a>
 8003d00:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a6e      	ldr	r2, [pc, #440]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0c:	e02d      	b.n	8003d6a <HAL_RCC_OscConfig+0x376>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x33c>
 8003d16:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a69      	ldr	r2, [pc, #420]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
 8003d22:	4b67      	ldr	r3, [pc, #412]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	4a66      	ldr	r2, [pc, #408]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2e:	e01c      	b.n	8003d6a <HAL_RCC_OscConfig+0x376>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b05      	cmp	r3, #5
 8003d36:	d10c      	bne.n	8003d52 <HAL_RCC_OscConfig+0x35e>
 8003d38:	4b61      	ldr	r3, [pc, #388]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	4a60      	ldr	r2, [pc, #384]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d3e:	f043 0304 	orr.w	r3, r3, #4
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70
 8003d44:	4b5e      	ldr	r3, [pc, #376]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a5d      	ldr	r2, [pc, #372]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d50:	e00b      	b.n	8003d6a <HAL_RCC_OscConfig+0x376>
 8003d52:	4b5b      	ldr	r3, [pc, #364]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a5a      	ldr	r2, [pc, #360]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5e:	4b58      	ldr	r3, [pc, #352]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	4a57      	ldr	r2, [pc, #348]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d015      	beq.n	8003d9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d72:	f7fe fd97 	bl	80028a4 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fe fd93 	bl	80028a4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e0ce      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d90:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ee      	beq.n	8003d7a <HAL_RCC_OscConfig+0x386>
 8003d9c:	e014      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7fe fd81 	bl	80028a4 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fe fd7d 	bl	80028a4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0b8      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dbc:	4b40      	ldr	r3, [pc, #256]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ee      	bne.n	8003da6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d105      	bne.n	8003dda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dce:	4b3c      	ldr	r3, [pc, #240]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a3b      	ldr	r2, [pc, #236]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80a4 	beq.w	8003f2c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de4:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d06b      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d149      	bne.n	8003e8c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df8:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a30      	ldr	r2, [pc, #192]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe fd4e 	bl	80028a4 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fe fd4a 	bl	80028a4 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e087      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1e:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	019b      	lsls	r3, r3, #6
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	085b      	lsrs	r3, r3, #1
 8003e42:	3b01      	subs	r3, #1
 8003e44:	041b      	lsls	r3, r3, #16
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	061b      	lsls	r3, r3, #24
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e56:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fe fd1e 	bl	80028a4 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fe fd1a 	bl	80028a4 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e057      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x478>
 8003e8a:	e04f      	b.n	8003f2c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0b      	ldr	r2, [pc, #44]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe fd04 	bl	80028a4 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fe fd00 	bl	80028a4 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e03d      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4ac>
 8003ebe:	e035      	b.n	8003f2c <HAL_RCC_OscConfig+0x538>
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_RCC_OscConfig+0x544>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d028      	beq.n	8003f28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d121      	bne.n	8003f28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d11a      	bne.n	8003f28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003efe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d111      	bne.n	8003f28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	3b01      	subs	r3, #1
 8003f12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800

08003f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0d0      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f54:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d910      	bls.n	8003f84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b67      	ldr	r3, [pc, #412]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 020f 	bic.w	r2, r3, #15
 8003f6a:	4965      	ldr	r1, [pc, #404]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	4b63      	ldr	r3, [pc, #396]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0b8      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d020      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f9c:	4b59      	ldr	r3, [pc, #356]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	4a58      	ldr	r2, [pc, #352]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fa6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb4:	4b53      	ldr	r3, [pc, #332]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	4a52      	ldr	r2, [pc, #328]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc0:	4b50      	ldr	r3, [pc, #320]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	494d      	ldr	r1, [pc, #308]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d040      	beq.n	8004060 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	4b47      	ldr	r3, [pc, #284]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d115      	bne.n	800401e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e07f      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e073      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e06b      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800401e:	4b39      	ldr	r3, [pc, #228]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4936      	ldr	r1, [pc, #216]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 800402c:	4313      	orrs	r3, r2
 800402e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004030:	f7fe fc38 	bl	80028a4 <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004036:	e00a      	b.n	800404e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004038:	f7fe fc34 	bl	80028a4 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	; 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e053      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	4b2d      	ldr	r3, [pc, #180]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 020c 	and.w	r2, r3, #12
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	429a      	cmp	r2, r3
 800405e:	d1eb      	bne.n	8004038 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004060:	4b27      	ldr	r3, [pc, #156]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d210      	bcs.n	8004090 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 020f 	bic.w	r2, r3, #15
 8004076:	4922      	ldr	r1, [pc, #136]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e032      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4916      	ldr	r1, [pc, #88]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	490e      	ldr	r1, [pc, #56]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ce:	f000 f821 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 80040d2:	4601      	mov	r1, r0
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <HAL_RCC_ClockConfig+0x1cc>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
 80040e2:	fa21 f303 	lsr.w	r3, r1, r3
 80040e6:	4a09      	ldr	r2, [pc, #36]	; (800410c <HAL_RCC_ClockConfig+0x1d0>)
 80040e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_ClockConfig+0x1d4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe fb94 	bl	800281c <HAL_InitTick>

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40023c00 	.word	0x40023c00
 8004104:	40023800 	.word	0x40023800
 8004108:	0800b120 	.word	0x0800b120
 800410c:	20000044 	.word	0x20000044
 8004110:	20000048 	.word	0x20000048

08004114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	2300      	movs	r3, #0
 8004124:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800412a:	4b63      	ldr	r3, [pc, #396]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b04      	cmp	r3, #4
 8004134:	d007      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x32>
 8004136:	2b08      	cmp	r3, #8
 8004138:	d008      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x38>
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 80b4 	bne.w	80042a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004140:	4b5e      	ldr	r3, [pc, #376]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004142:	60bb      	str	r3, [r7, #8]
      break;
 8004144:	e0b3      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004146:	4b5e      	ldr	r3, [pc, #376]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004148:	60bb      	str	r3, [r7, #8]
      break;
 800414a:	e0b0      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800414c:	4b5a      	ldr	r3, [pc, #360]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004154:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004156:	4b58      	ldr	r3, [pc, #352]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d04a      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004162:	4b55      	ldr	r3, [pc, #340]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	f04f 0400 	mov.w	r4, #0
 800416c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	ea03 0501 	and.w	r5, r3, r1
 8004178:	ea04 0602 	and.w	r6, r4, r2
 800417c:	4629      	mov	r1, r5
 800417e:	4632      	mov	r2, r6
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	f04f 0400 	mov.w	r4, #0
 8004188:	0154      	lsls	r4, r2, #5
 800418a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800418e:	014b      	lsls	r3, r1, #5
 8004190:	4619      	mov	r1, r3
 8004192:	4622      	mov	r2, r4
 8004194:	1b49      	subs	r1, r1, r5
 8004196:	eb62 0206 	sbc.w	r2, r2, r6
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	f04f 0400 	mov.w	r4, #0
 80041a2:	0194      	lsls	r4, r2, #6
 80041a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041a8:	018b      	lsls	r3, r1, #6
 80041aa:	1a5b      	subs	r3, r3, r1
 80041ac:	eb64 0402 	sbc.w	r4, r4, r2
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	00e2      	lsls	r2, r4, #3
 80041ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041be:	00d9      	lsls	r1, r3, #3
 80041c0:	460b      	mov	r3, r1
 80041c2:	4614      	mov	r4, r2
 80041c4:	195b      	adds	r3, r3, r5
 80041c6:	eb44 0406 	adc.w	r4, r4, r6
 80041ca:	f04f 0100 	mov.w	r1, #0
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	0262      	lsls	r2, r4, #9
 80041d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041d8:	0259      	lsls	r1, r3, #9
 80041da:	460b      	mov	r3, r1
 80041dc:	4614      	mov	r4, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	4621      	mov	r1, r4
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f04f 0400 	mov.w	r4, #0
 80041e8:	461a      	mov	r2, r3
 80041ea:	4623      	mov	r3, r4
 80041ec:	f7fc fd6c 	bl	8000cc8 <__aeabi_uldivmod>
 80041f0:	4603      	mov	r3, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e049      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f8:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	099b      	lsrs	r3, r3, #6
 80041fe:	f04f 0400 	mov.w	r4, #0
 8004202:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	ea03 0501 	and.w	r5, r3, r1
 800420e:	ea04 0602 	and.w	r6, r4, r2
 8004212:	4629      	mov	r1, r5
 8004214:	4632      	mov	r2, r6
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	f04f 0400 	mov.w	r4, #0
 800421e:	0154      	lsls	r4, r2, #5
 8004220:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004224:	014b      	lsls	r3, r1, #5
 8004226:	4619      	mov	r1, r3
 8004228:	4622      	mov	r2, r4
 800422a:	1b49      	subs	r1, r1, r5
 800422c:	eb62 0206 	sbc.w	r2, r2, r6
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	0194      	lsls	r4, r2, #6
 800423a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800423e:	018b      	lsls	r3, r1, #6
 8004240:	1a5b      	subs	r3, r3, r1
 8004242:	eb64 0402 	sbc.w	r4, r4, r2
 8004246:	f04f 0100 	mov.w	r1, #0
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	00e2      	lsls	r2, r4, #3
 8004250:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004254:	00d9      	lsls	r1, r3, #3
 8004256:	460b      	mov	r3, r1
 8004258:	4614      	mov	r4, r2
 800425a:	195b      	adds	r3, r3, r5
 800425c:	eb44 0406 	adc.w	r4, r4, r6
 8004260:	f04f 0100 	mov.w	r1, #0
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	02a2      	lsls	r2, r4, #10
 800426a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800426e:	0299      	lsls	r1, r3, #10
 8004270:	460b      	mov	r3, r1
 8004272:	4614      	mov	r4, r2
 8004274:	4618      	mov	r0, r3
 8004276:	4621      	mov	r1, r4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f04f 0400 	mov.w	r4, #0
 800427e:	461a      	mov	r2, r3
 8004280:	4623      	mov	r3, r4
 8004282:	f7fc fd21 	bl	8000cc8 <__aeabi_uldivmod>
 8004286:	4603      	mov	r3, r0
 8004288:	460c      	mov	r4, r1
 800428a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	3301      	adds	r3, #1
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	60bb      	str	r3, [r7, #8]
      break;
 80042a6:	e002      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b04      	ldr	r3, [pc, #16]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042aa:	60bb      	str	r3, [r7, #8]
      break;
 80042ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ae:	68bb      	ldr	r3, [r7, #8]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	00f42400 	.word	0x00f42400
 80042c0:	007a1200 	.word	0x007a1200

080042c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ca:	681b      	ldr	r3, [r3, #0]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000044 	.word	0x20000044

080042dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042e0:	f7ff fff0 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 80042e4:	4601      	mov	r1, r0
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0a9b      	lsrs	r3, r3, #10
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4a03      	ldr	r2, [pc, #12]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f2:	5cd3      	ldrb	r3, [r2, r3]
 80042f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40023800 	.word	0x40023800
 8004300:	0800b130 	.word	0x0800b130

08004304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004308:	f7ff ffdc 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 800430c:	4601      	mov	r1, r0
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0b5b      	lsrs	r3, r3, #13
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4a03      	ldr	r2, [pc, #12]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800431a:	5cd3      	ldrb	r3, [r2, r3]
 800431c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40023800 	.word	0x40023800
 8004328:	0800b130 	.word	0x0800b130

0800432c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d012      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004354:	4b69      	ldr	r3, [pc, #420]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4a68      	ldr	r2, [pc, #416]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800435e:	6093      	str	r3, [r2, #8]
 8004360:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004368:	4964      	ldr	r1, [pc, #400]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004376:	2301      	movs	r3, #1
 8004378:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d017      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004386:	4b5d      	ldr	r3, [pc, #372]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800438c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	4959      	ldr	r1, [pc, #356]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a4:	d101      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d017      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043c2:	4b4e      	ldr	r3, [pc, #312]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	494a      	ldr	r1, [pc, #296]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e0:	d101      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043fe:	2301      	movs	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 808b 	beq.w	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004410:	4b3a      	ldr	r3, [pc, #232]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	4a39      	ldr	r2, [pc, #228]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441a:	6413      	str	r3, [r2, #64]	; 0x40
 800441c:	4b37      	ldr	r3, [pc, #220]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004428:	4b35      	ldr	r3, [pc, #212]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a34      	ldr	r2, [pc, #208]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800442e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004434:	f7fe fa36 	bl	80028a4 <HAL_GetTick>
 8004438:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443c:	f7fe fa32 	bl	80028a4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	; 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e355      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800444e:	4b2c      	ldr	r3, [pc, #176]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800445a:	4b28      	ldr	r3, [pc, #160]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004462:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d035      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	429a      	cmp	r2, r3
 8004476:	d02e      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004478:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004480:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004482:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	4a1a      	ldr	r2, [pc, #104]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004498:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800449a:	4a18      	ldr	r2, [pc, #96]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044a0:	4b16      	ldr	r3, [pc, #88]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d114      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fe f9fa 	bl	80028a4 <HAL_GetTick>
 80044b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b2:	e00a      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b4:	f7fe f9f6 	bl	80028a4 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e317      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ca:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0ee      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e2:	d111      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044f2:	400b      	ands	r3, r1
 80044f4:	4901      	ldr	r1, [pc, #4]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
 80044fa:	e00b      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044fc:	40023800 	.word	0x40023800
 8004500:	40007000 	.word	0x40007000
 8004504:	0ffffcff 	.word	0x0ffffcff
 8004508:	4bb0      	ldr	r3, [pc, #704]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4aaf      	ldr	r2, [pc, #700]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800450e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004512:	6093      	str	r3, [r2, #8]
 8004514:	4bad      	ldr	r3, [pc, #692]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004516:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	49aa      	ldr	r1, [pc, #680]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004522:	4313      	orrs	r3, r2
 8004524:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	d010      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004532:	4ba6      	ldr	r3, [pc, #664]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004538:	4aa4      	ldr	r2, [pc, #656]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800453a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004542:	4ba2      	ldr	r3, [pc, #648]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004544:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	499f      	ldr	r1, [pc, #636]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004560:	4b9a      	ldr	r3, [pc, #616]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800456e:	4997      	ldr	r1, [pc, #604]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004582:	4b92      	ldr	r3, [pc, #584]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004590:	498e      	ldr	r1, [pc, #568]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045a4:	4b89      	ldr	r3, [pc, #548]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b2:	4986      	ldr	r1, [pc, #536]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045c6:	4b81      	ldr	r3, [pc, #516]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	497d      	ldr	r1, [pc, #500]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045e8:	4b78      	ldr	r3, [pc, #480]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f023 0203 	bic.w	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	4975      	ldr	r1, [pc, #468]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800460a:	4b70      	ldr	r3, [pc, #448]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f023 020c 	bic.w	r2, r3, #12
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004618:	496c      	ldr	r1, [pc, #432]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800462c:	4b67      	ldr	r3, [pc, #412]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	4964      	ldr	r1, [pc, #400]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800464e:	4b5f      	ldr	r3, [pc, #380]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465c:	495b      	ldr	r1, [pc, #364]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004670:	4b56      	ldr	r3, [pc, #344]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	4953      	ldr	r1, [pc, #332]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004692:	4b4e      	ldr	r3, [pc, #312]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004698:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	494a      	ldr	r1, [pc, #296]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046b4:	4b45      	ldr	r3, [pc, #276]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	4942      	ldr	r1, [pc, #264]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046d6:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e4:	4939      	ldr	r1, [pc, #228]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046f8:	4b34      	ldr	r3, [pc, #208]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004706:	4931      	ldr	r1, [pc, #196]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d011      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800471a:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004728:	4928      	ldr	r1, [pc, #160]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004738:	d101      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800473a:	2301      	movs	r3, #1
 800473c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800474a:	2301      	movs	r3, #1
 800474c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800475a:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004768:	4918      	ldr	r1, [pc, #96]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478c:	490f      	ldr	r1, [pc, #60]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d005      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047a2:	f040 80d8 	bne.w	8004956 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a08      	ldr	r2, [pc, #32]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b2:	f7fe f877 	bl	80028a4 <HAL_GetTick>
 80047b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047b8:	e00a      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047ba:	f7fe f873 	bl	80028a4 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b64      	cmp	r3, #100	; 0x64
 80047c6:	d903      	bls.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e196      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80047cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047d0:	4b6c      	ldr	r3, [pc, #432]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ee      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d021      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x500>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11d      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047f0:	4b64      	ldr	r3, [pc, #400]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047fe:	4b61      	ldr	r3, [pc, #388]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004804:	0e1b      	lsrs	r3, r3, #24
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	019a      	lsls	r2, r3, #6
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	071b      	lsls	r3, r3, #28
 8004824:	4957      	ldr	r1, [pc, #348]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800484a:	2b00      	cmp	r3, #0
 800484c:	d02e      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004856:	d129      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004858:	4b4a      	ldr	r3, [pc, #296]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486c:	0f1b      	lsrs	r3, r3, #28
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	019a      	lsls	r2, r3, #6
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	041b      	lsls	r3, r3, #16
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	061b      	lsls	r3, r3, #24
 8004886:	431a      	orrs	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	071b      	lsls	r3, r3, #28
 800488c:	493d      	ldr	r1, [pc, #244]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004894:	4b3b      	ldr	r3, [pc, #236]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489a:	f023 021f 	bic.w	r2, r3, #31
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	3b01      	subs	r3, #1
 80048a4:	4937      	ldr	r1, [pc, #220]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01d      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048b8:	4b32      	ldr	r3, [pc, #200]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048be:	0e1b      	lsrs	r3, r3, #24
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048cc:	0f1b      	lsrs	r3, r3, #28
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	019a      	lsls	r2, r3, #6
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	431a      	orrs	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	061b      	lsls	r3, r3, #24
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	071b      	lsls	r3, r3, #28
 80048ec:	4925      	ldr	r1, [pc, #148]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d011      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	019a      	lsls	r2, r3, #6
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	041b      	lsls	r3, r3, #16
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	071b      	lsls	r3, r3, #28
 800491c:	4919      	ldr	r1, [pc, #100]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a16      	ldr	r2, [pc, #88]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800492a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800492e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004930:	f7fd ffb8 	bl	80028a4 <HAL_GetTick>
 8004934:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004936:	e008      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004938:	f7fd ffb4 	bl	80028a4 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e0d7      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b01      	cmp	r3, #1
 800495a:	f040 80cd 	bne.w	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a08      	ldr	r2, [pc, #32]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496a:	f7fd ff9b 	bl	80028a4 <HAL_GetTick>
 800496e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004970:	e00a      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004972:	f7fd ff97 	bl	80028a4 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b64      	cmp	r3, #100	; 0x64
 800497e:	d903      	bls.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e0ba      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004984:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004988:	4b5e      	ldr	r3, [pc, #376]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004994:	d0ed      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d02e      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d12a      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049be:	4b51      	ldr	r3, [pc, #324]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049cc:	4b4d      	ldr	r3, [pc, #308]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	0f1b      	lsrs	r3, r3, #28
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	019a      	lsls	r2, r3, #6
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	061b      	lsls	r3, r3, #24
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	071b      	lsls	r3, r3, #28
 80049f2:	4944      	ldr	r1, [pc, #272]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049fa:	4b42      	ldr	r3, [pc, #264]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	493d      	ldr	r1, [pc, #244]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d022      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a28:	d11d      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a2a:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a30:	0e1b      	lsrs	r3, r3, #24
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a38:	4b32      	ldr	r3, [pc, #200]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	0f1b      	lsrs	r3, r3, #28
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	019a      	lsls	r2, r3, #6
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	431a      	orrs	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	071b      	lsls	r3, r3, #28
 8004a5e:	4929      	ldr	r1, [pc, #164]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d028      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a78:	0e1b      	lsrs	r3, r3, #24
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a80:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	0c1b      	lsrs	r3, r3, #16
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	019a      	lsls	r2, r3, #6
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	061b      	lsls	r3, r3, #24
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	071b      	lsls	r3, r3, #28
 8004aa6:	4917      	ldr	r1, [pc, #92]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	4911      	ldr	r1, [pc, #68]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a0e      	ldr	r2, [pc, #56]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad0:	f7fd fee8 	bl	80028a4 <HAL_GetTick>
 8004ad4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ad8:	f7fd fee4 	bl	80028a4 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b64      	cmp	r3, #100	; 0x64
 8004ae4:	d901      	bls.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e007      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af6:	d1ef      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800

08004b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e01d      	b.n	8004b56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fd fcd4 	bl	80024dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f000 fcb0 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <HAL_TIM_Base_Start+0x50>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b06      	cmp	r3, #6
 8004b80:	d00b      	beq.n	8004b9a <HAL_TIM_Base_Start+0x3a>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d007      	beq.n	8004b9a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	00010007 	.word	0x00010007

08004bb4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a1a      	ldr	r2, [r3, #32]
 8004bca:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10f      	bne.n	8004bf4 <HAL_TIM_Base_Stop+0x40>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a1a      	ldr	r2, [r3, #32]
 8004bda:	f240 4344 	movw	r3, #1092	; 0x444
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d107      	bne.n	8004bf4 <HAL_TIM_Base_Stop+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <HAL_TIM_Base_Start_IT+0x50>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b06      	cmp	r3, #6
 8004c34:	d00b      	beq.n	8004c4e <HAL_TIM_Base_Start_IT+0x42>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3c:	d007      	beq.n	8004c4e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	00010007 	.word	0x00010007

08004c60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e01d      	b.n	8004cae <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f815 	bl	8004cb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f000 fc04 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	6839      	ldr	r1, [r7, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 ff7c 	bl	8005bdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <HAL_TIM_PWM_Start+0x7c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d004      	beq.n	8004cf8 <HAL_TIM_PWM_Start+0x2c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a16      	ldr	r2, [pc, #88]	; (8004d4c <HAL_TIM_PWM_Start+0x80>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d101      	bne.n	8004cfc <HAL_TIM_PWM_Start+0x30>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <HAL_TIM_PWM_Start+0x32>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <HAL_TIM_PWM_Start+0x84>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b06      	cmp	r3, #6
 8004d22:	d00b      	beq.n	8004d3c <HAL_TIM_PWM_Start+0x70>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2a:	d007      	beq.n	8004d3c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40010400 	.word	0x40010400
 8004d50:	00010007 	.word	0x00010007

08004d54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e07b      	b.n	8004e60 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7fd fbf9 	bl	8002574 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2202      	movs	r2, #2
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6899      	ldr	r1, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4b34      	ldr	r3, [pc, #208]	; (8004e68 <HAL_TIM_Encoder_Init+0x114>)
 8004d96:	400b      	ands	r3, r1
 8004d98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3304      	adds	r3, #4
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f000 fb81 	bl	80054ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4b27      	ldr	r3, [pc, #156]	; (8004e6c <HAL_TIM_Encoder_Init+0x118>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	4313      	orrs	r3, r2
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4b21      	ldr	r3, [pc, #132]	; (8004e70 <HAL_TIM_Encoder_Init+0x11c>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4b20      	ldr	r3, [pc, #128]	; (8004e74 <HAL_TIM_Encoder_Init+0x120>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	4313      	orrs	r3, r2
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	011a      	lsls	r2, r3, #4
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	031b      	lsls	r3, r3, #12
 8004e14:	4313      	orrs	r3, r2
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	4313      	orrs	r3, r2
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	fffebff8 	.word	0xfffebff8
 8004e6c:	fffffcfc 	.word	0xfffffcfc
 8004e70:	fffff3f3 	.word	0xfffff3f3
 8004e74:	ffff0f0f 	.word	0xffff0f0f

08004e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d122      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0202 	mvn.w	r2, #2
 8004ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fad8 	bl	8005470 <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 faca 	bl	800545c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fadb 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d122      	bne.n	8004f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d11b      	bne.n	8004f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0204 	mvn.w	r2, #4
 8004ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 faae 	bl	8005470 <HAL_TIM_IC_CaptureCallback>
 8004f14:	e005      	b.n	8004f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 faa0 	bl	800545c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fab1 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d122      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d11b      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0208 	mvn.w	r2, #8
 8004f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2204      	movs	r2, #4
 8004f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fa84 	bl	8005470 <HAL_TIM_IC_CaptureCallback>
 8004f68:	e005      	b.n	8004f76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa76 	bl	800545c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fa87 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d122      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d11b      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0210 	mvn.w	r2, #16
 8004fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fa5a 	bl	8005470 <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fa4c 	bl	800545c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fa5d 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d10e      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d107      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0201 	mvn.w	r2, #1
 8004ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc fc64 	bl	80018c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d10e      	bne.n	8005028 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005014:	2b80      	cmp	r3, #128	; 0x80
 8005016:	d107      	bne.n	8005028 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fe98 	bl	8005d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005036:	d10e      	bne.n	8005056 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d107      	bne.n	8005056 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800504e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fe8b 	bl	8005d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d10e      	bne.n	8005082 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d107      	bne.n	8005082 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800507a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fa0b 	bl	8005498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b20      	cmp	r3, #32
 800508e:	d10e      	bne.n	80050ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b20      	cmp	r3, #32
 800509c:	d107      	bne.n	80050ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f06f 0220 	mvn.w	r2, #32
 80050a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fe4b 	bl	8005d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e105      	b.n	80052de <HAL_TIM_PWM_ConfigChannel+0x226>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2202      	movs	r2, #2
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b14      	cmp	r3, #20
 80050e6:	f200 80f0 	bhi.w	80052ca <HAL_TIM_PWM_ConfigChannel+0x212>
 80050ea:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80050ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f0:	08005145 	.word	0x08005145
 80050f4:	080052cb 	.word	0x080052cb
 80050f8:	080052cb 	.word	0x080052cb
 80050fc:	080052cb 	.word	0x080052cb
 8005100:	08005185 	.word	0x08005185
 8005104:	080052cb 	.word	0x080052cb
 8005108:	080052cb 	.word	0x080052cb
 800510c:	080052cb 	.word	0x080052cb
 8005110:	080051c7 	.word	0x080051c7
 8005114:	080052cb 	.word	0x080052cb
 8005118:	080052cb 	.word	0x080052cb
 800511c:	080052cb 	.word	0x080052cb
 8005120:	08005207 	.word	0x08005207
 8005124:	080052cb 	.word	0x080052cb
 8005128:	080052cb 	.word	0x080052cb
 800512c:	080052cb 	.word	0x080052cb
 8005130:	08005249 	.word	0x08005249
 8005134:	080052cb 	.word	0x080052cb
 8005138:	080052cb 	.word	0x080052cb
 800513c:	080052cb 	.word	0x080052cb
 8005140:	08005289 	.word	0x08005289
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fa4e 	bl	80055ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0208 	orr.w	r2, r2, #8
 800515e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0204 	bic.w	r2, r2, #4
 800516e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6999      	ldr	r1, [r3, #24]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	619a      	str	r2, [r3, #24]
      break;
 8005182:	e0a3      	b.n	80052cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	4618      	mov	r0, r3
 800518c:	f000 faa0 	bl	80056d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6999      	ldr	r1, [r3, #24]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	021a      	lsls	r2, r3, #8
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	619a      	str	r2, [r3, #24]
      break;
 80051c4:	e082      	b.n	80052cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 faf7 	bl	80057c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0208 	orr.w	r2, r2, #8
 80051e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0204 	bic.w	r2, r2, #4
 80051f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69d9      	ldr	r1, [r3, #28]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	61da      	str	r2, [r3, #28]
      break;
 8005204:	e062      	b.n	80052cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fb4d 	bl	80058ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69da      	ldr	r2, [r3, #28]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69d9      	ldr	r1, [r3, #28]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	021a      	lsls	r2, r3, #8
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	61da      	str	r2, [r3, #28]
      break;
 8005246:	e041      	b.n	80052cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fb84 	bl	800595c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0208 	orr.w	r2, r2, #8
 8005262:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0204 	bic.w	r2, r2, #4
 8005272:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005286:	e021      	b.n	80052cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fbb6 	bl	8005a00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	021a      	lsls	r2, r3, #8
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052c8:	e000      	b.n	80052cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80052ca:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop

080052e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_TIM_ConfigClockSource+0x18>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e0a6      	b.n	800544e <HAL_TIM_ConfigClockSource+0x166>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4b4f      	ldr	r3, [pc, #316]	; (8005458 <HAL_TIM_ConfigClockSource+0x170>)
 800531c:	4013      	ands	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005326:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b40      	cmp	r3, #64	; 0x40
 8005336:	d067      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x120>
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d80b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x6c>
 800533c:	2b10      	cmp	r3, #16
 800533e:	d073      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0x140>
 8005340:	2b10      	cmp	r3, #16
 8005342:	d802      	bhi.n	800534a <HAL_TIM_ConfigClockSource+0x62>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d06f      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005348:	e078      	b.n	800543c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800534a:	2b20      	cmp	r3, #32
 800534c:	d06c      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0x140>
 800534e:	2b30      	cmp	r3, #48	; 0x30
 8005350:	d06a      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005352:	e073      	b.n	800543c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005354:	2b70      	cmp	r3, #112	; 0x70
 8005356:	d00d      	beq.n	8005374 <HAL_TIM_ConfigClockSource+0x8c>
 8005358:	2b70      	cmp	r3, #112	; 0x70
 800535a:	d804      	bhi.n	8005366 <HAL_TIM_ConfigClockSource+0x7e>
 800535c:	2b50      	cmp	r3, #80	; 0x50
 800535e:	d033      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0xe0>
 8005360:	2b60      	cmp	r3, #96	; 0x60
 8005362:	d041      	beq.n	80053e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005364:	e06a      	b.n	800543c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	d066      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x152>
 800536c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005370:	d017      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005372:	e063      	b.n	800543c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	6899      	ldr	r1, [r3, #8]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f000 fc0a 	bl	8005b9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005396:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	609a      	str	r2, [r3, #8]
      break;
 80053a0:	e04c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6899      	ldr	r1, [r3, #8]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f000 fbf3 	bl	8005b9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053c4:	609a      	str	r2, [r3, #8]
      break;
 80053c6:	e039      	b.n	800543c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	6859      	ldr	r1, [r3, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	461a      	mov	r2, r3
 80053d6:	f000 fb67 	bl	8005aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2150      	movs	r1, #80	; 0x50
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fbc0 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 80053e6:	e029      	b.n	800543c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6859      	ldr	r1, [r3, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	461a      	mov	r2, r3
 80053f6:	f000 fb86 	bl	8005b06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2160      	movs	r1, #96	; 0x60
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fbb0 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 8005406:	e019      	b.n	800543c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6859      	ldr	r1, [r3, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	461a      	mov	r2, r3
 8005416:	f000 fb47 	bl	8005aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2140      	movs	r1, #64	; 0x40
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fba0 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 8005426:	e009      	b.n	800543c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f000 fb97 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 8005438:	e000      	b.n	800543c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800543a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	fffeff88 	.word	0xfffeff88

0800545c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a40      	ldr	r2, [pc, #256]	; (80055c0 <TIM_Base_SetConfig+0x114>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ca:	d00f      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3d      	ldr	r2, [pc, #244]	; (80055c4 <TIM_Base_SetConfig+0x118>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00b      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a3c      	ldr	r2, [pc, #240]	; (80055c8 <TIM_Base_SetConfig+0x11c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d007      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a3b      	ldr	r2, [pc, #236]	; (80055cc <TIM_Base_SetConfig+0x120>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a3a      	ldr	r2, [pc, #232]	; (80055d0 <TIM_Base_SetConfig+0x124>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d108      	bne.n	80054fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2f      	ldr	r2, [pc, #188]	; (80055c0 <TIM_Base_SetConfig+0x114>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02b      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550c:	d027      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2c      	ldr	r2, [pc, #176]	; (80055c4 <TIM_Base_SetConfig+0x118>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d023      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2b      	ldr	r2, [pc, #172]	; (80055c8 <TIM_Base_SetConfig+0x11c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01f      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2a      	ldr	r2, [pc, #168]	; (80055cc <TIM_Base_SetConfig+0x120>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d01b      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a29      	ldr	r2, [pc, #164]	; (80055d0 <TIM_Base_SetConfig+0x124>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d017      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a28      	ldr	r2, [pc, #160]	; (80055d4 <TIM_Base_SetConfig+0x128>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a27      	ldr	r2, [pc, #156]	; (80055d8 <TIM_Base_SetConfig+0x12c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00f      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a26      	ldr	r2, [pc, #152]	; (80055dc <TIM_Base_SetConfig+0x130>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00b      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <TIM_Base_SetConfig+0x134>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d007      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a24      	ldr	r2, [pc, #144]	; (80055e4 <TIM_Base_SetConfig+0x138>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d003      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a23      	ldr	r2, [pc, #140]	; (80055e8 <TIM_Base_SetConfig+0x13c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d108      	bne.n	8005570 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a0a      	ldr	r2, [pc, #40]	; (80055c0 <TIM_Base_SetConfig+0x114>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_Base_SetConfig+0xf8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a0c      	ldr	r2, [pc, #48]	; (80055d0 <TIM_Base_SetConfig+0x124>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d103      	bne.n	80055ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	615a      	str	r2, [r3, #20]
}
 80055b2:	bf00      	nop
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40000800 	.word	0x40000800
 80055cc:	40000c00 	.word	0x40000c00
 80055d0:	40010400 	.word	0x40010400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800
 80055e0:	40001800 	.word	0x40001800
 80055e4:	40001c00 	.word	0x40001c00
 80055e8:	40002000 	.word	0x40002000

080055ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0201 	bic.w	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <TIM_OC1_SetConfig+0xd8>)
 8005618:	4013      	ands	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f023 0302 	bic.w	r3, r3, #2
 8005634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a21      	ldr	r2, [pc, #132]	; (80056c8 <TIM_OC1_SetConfig+0xdc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC1_SetConfig+0x64>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a20      	ldr	r2, [pc, #128]	; (80056cc <TIM_OC1_SetConfig+0xe0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d10c      	bne.n	800566a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 0308 	bic.w	r3, r3, #8
 8005656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 0304 	bic.w	r3, r3, #4
 8005668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a16      	ldr	r2, [pc, #88]	; (80056c8 <TIM_OC1_SetConfig+0xdc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_OC1_SetConfig+0x8e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a15      	ldr	r2, [pc, #84]	; (80056cc <TIM_OC1_SetConfig+0xe0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d111      	bne.n	800569e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	621a      	str	r2, [r3, #32]
}
 80056b8:	bf00      	nop
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	fffeff8f 	.word	0xfffeff8f
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40010400 	.word	0x40010400

080056d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f023 0210 	bic.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4b2e      	ldr	r3, [pc, #184]	; (80057b4 <TIM_OC2_SetConfig+0xe4>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	021b      	lsls	r3, r3, #8
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0320 	bic.w	r3, r3, #32
 800571a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a23      	ldr	r2, [pc, #140]	; (80057b8 <TIM_OC2_SetConfig+0xe8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_OC2_SetConfig+0x68>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a22      	ldr	r2, [pc, #136]	; (80057bc <TIM_OC2_SetConfig+0xec>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d10d      	bne.n	8005754 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <TIM_OC2_SetConfig+0xe8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_OC2_SetConfig+0x94>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a17      	ldr	r2, [pc, #92]	; (80057bc <TIM_OC2_SetConfig+0xec>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d113      	bne.n	800578c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800576a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	feff8fff 	.word	0xfeff8fff
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40010400 	.word	0x40010400

080057c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <TIM_OC3_SetConfig+0xe0>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <TIM_OC3_SetConfig+0xe4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d003      	beq.n	8005826 <TIM_OC3_SetConfig+0x66>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a21      	ldr	r2, [pc, #132]	; (80058a8 <TIM_OC3_SetConfig+0xe8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d10d      	bne.n	8005842 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800582c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <TIM_OC3_SetConfig+0xe4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_OC3_SetConfig+0x92>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <TIM_OC3_SetConfig+0xe8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d113      	bne.n	800587a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	621a      	str	r2, [r3, #32]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	fffeff8f 	.word	0xfffeff8f
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40010400 	.word	0x40010400

080058ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <TIM_OC4_SetConfig+0xa4>)
 80058d8:	4013      	ands	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	031b      	lsls	r3, r3, #12
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a13      	ldr	r2, [pc, #76]	; (8005954 <TIM_OC4_SetConfig+0xa8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d003      	beq.n	8005914 <TIM_OC4_SetConfig+0x68>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a12      	ldr	r2, [pc, #72]	; (8005958 <TIM_OC4_SetConfig+0xac>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d109      	bne.n	8005928 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800591a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	019b      	lsls	r3, r3, #6
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	621a      	str	r2, [r3, #32]
}
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	feff8fff 	.word	0xfeff8fff
 8005954:	40010000 	.word	0x40010000
 8005958:	40010400 	.word	0x40010400

0800595c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <TIM_OC5_SetConfig+0x98>)
 8005988:	4013      	ands	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800599c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a12      	ldr	r2, [pc, #72]	; (80059f8 <TIM_OC5_SetConfig+0x9c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d003      	beq.n	80059ba <TIM_OC5_SetConfig+0x5e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a11      	ldr	r2, [pc, #68]	; (80059fc <TIM_OC5_SetConfig+0xa0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d109      	bne.n	80059ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	621a      	str	r2, [r3, #32]
}
 80059e8:	bf00      	nop
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	fffeff8f 	.word	0xfffeff8f
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40010400 	.word	0x40010400

08005a00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <TIM_OC6_SetConfig+0x9c>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	051b      	lsls	r3, r3, #20
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a13      	ldr	r2, [pc, #76]	; (8005aa0 <TIM_OC6_SetConfig+0xa0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC6_SetConfig+0x60>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a12      	ldr	r2, [pc, #72]	; (8005aa4 <TIM_OC6_SetConfig+0xa4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d109      	bne.n	8005a74 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	029b      	lsls	r3, r3, #10
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	feff8fff 	.word	0xfeff8fff
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40010400 	.word	0x40010400

08005aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0201 	bic.w	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 030a 	bic.w	r3, r3, #10
 8005ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b087      	sub	sp, #28
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f023 0210 	bic.w	r2, r3, #16
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	031b      	lsls	r3, r3, #12
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f043 0307 	orr.w	r3, r3, #7
 8005b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	609a      	str	r2, [r3, #8]
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	021a      	lsls	r2, r3, #8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	609a      	str	r2, [r3, #8]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	2201      	movs	r2, #1
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a1a      	ldr	r2, [r3, #32]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	401a      	ands	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a1a      	ldr	r2, [r3, #32]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	fa01 f303 	lsl.w	r3, r1, r3
 8005c14:	431a      	orrs	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e06d      	b.n	8005d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a30      	ldr	r2, [pc, #192]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2f      	ldr	r2, [pc, #188]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d108      	bne.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d022      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb2:	d01d      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d018      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d013      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00e      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d009      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d004      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d10c      	bne.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40010400 	.word	0x40010400
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	40014000 	.word	0x40014000
 8005d40:	40001800 	.word	0x40001800

08005d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e040      	b.n	8005e14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fc fcb8 	bl	8002718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2224      	movs	r2, #36	; 0x24
 8005dac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 faa6 	bl	8006310 <UART_SetConfig>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e022      	b.n	8005e14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fd44 	bl	8006864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fdcb 	bl	80069a8 <UART_CheckIdleState>
 8005e12:	4603      	mov	r3, r0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08a      	sub	sp, #40	; 0x28
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d17f      	bne.n	8005f34 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_UART_Transmit+0x24>
 8005e3a:	88fb      	ldrh	r3, [r7, #6]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e078      	b.n	8005f36 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_UART_Transmit+0x36>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e071      	b.n	8005f36 <HAL_UART_Transmit+0x11a>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2221      	movs	r2, #33	; 0x21
 8005e64:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005e66:	f7fc fd1d 	bl	80028a4 <HAL_GetTick>
 8005e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	88fa      	ldrh	r2, [r7, #6]
 8005e78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e84:	d108      	bne.n	8005e98 <HAL_UART_Transmit+0x7c>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d104      	bne.n	8005e98 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	e003      	b.n	8005ea0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005ea8:	e02c      	b.n	8005f04 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2180      	movs	r1, #128	; 0x80
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 fda6 	bl	8006a06 <UART_WaitOnFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e038      	b.n	8005f36 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10b      	bne.n	8005ee2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	3302      	adds	r3, #2
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	e007      	b.n	8005ef2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	781a      	ldrb	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1cc      	bne.n	8005eaa <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2200      	movs	r2, #0
 8005f18:	2140      	movs	r1, #64	; 0x40
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fd73 	bl	8006a06 <UART_WaitOnFlagUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e005      	b.n	8005f36 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	e000      	b.n	8005f36 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005f34:	2302      	movs	r3, #2
  }
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	f040 808a 	bne.w	800606c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_UART_Receive_IT+0x24>
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e082      	b.n	800606e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_UART_Receive_IT+0x36>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e07b      	b.n	800606e <HAL_UART_Receive_IT+0x12e>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	88fa      	ldrh	r2, [r7, #6]
 8005f88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	88fa      	ldrh	r2, [r7, #6]
 8005f90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa2:	d10e      	bne.n	8005fc2 <HAL_UART_Receive_IT+0x82>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d105      	bne.n	8005fb8 <HAL_UART_Receive_IT+0x78>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005fb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fb6:	e02d      	b.n	8006014 <HAL_UART_Receive_IT+0xd4>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	22ff      	movs	r2, #255	; 0xff
 8005fbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fc0:	e028      	b.n	8006014 <HAL_UART_Receive_IT+0xd4>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10d      	bne.n	8005fe6 <HAL_UART_Receive_IT+0xa6>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <HAL_UART_Receive_IT+0x9c>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	22ff      	movs	r2, #255	; 0xff
 8005fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fda:	e01b      	b.n	8006014 <HAL_UART_Receive_IT+0xd4>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	227f      	movs	r2, #127	; 0x7f
 8005fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fe4:	e016      	b.n	8006014 <HAL_UART_Receive_IT+0xd4>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fee:	d10d      	bne.n	800600c <HAL_UART_Receive_IT+0xcc>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <HAL_UART_Receive_IT+0xc2>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	227f      	movs	r2, #127	; 0x7f
 8005ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006000:	e008      	b.n	8006014 <HAL_UART_Receive_IT+0xd4>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	223f      	movs	r2, #63	; 0x3f
 8006006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800600a:	e003      	b.n	8006014 <HAL_UART_Receive_IT+0xd4>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2222      	movs	r2, #34	; 0x22
 800601e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006038:	d107      	bne.n	800604a <HAL_UART_Receive_IT+0x10a>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d103      	bne.n	800604a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a0d      	ldr	r2, [pc, #52]	; (800607c <HAL_UART_Receive_IT+0x13c>)
 8006046:	661a      	str	r2, [r3, #96]	; 0x60
 8006048:	e002      	b.n	8006050 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a0c      	ldr	r2, [pc, #48]	; (8006080 <HAL_UART_Receive_IT+0x140>)
 800604e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006066:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	e000      	b.n	800606e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800606c:	2302      	movs	r3, #2
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	08006c41 	.word	0x08006c41
 8006080:	08006b9b 	.word	0x08006b9b

08006084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80060aa:	4013      	ands	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d113      	bne.n	80060dc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00e      	beq.n	80060dc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d009      	beq.n	80060dc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8100 	beq.w	80062d2 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	4798      	blx	r3
      }
      return;
 80060da:	e0fa      	b.n	80062d2 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 80d5 	beq.w	800628e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d105      	bne.n	80060fa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 80ca 	beq.w	800628e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00e      	beq.n	8006122 <HAL_UART_IRQHandler+0x9e>
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2201      	movs	r2, #1
 8006114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800611a:	f043 0201 	orr.w	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00e      	beq.n	800614a <HAL_UART_IRQHandler+0xc6>
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d009      	beq.n	800614a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2202      	movs	r2, #2
 800613c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006142:	f043 0204 	orr.w	r2, r3, #4
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00e      	beq.n	8006172 <HAL_UART_IRQHandler+0xee>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d009      	beq.n	8006172 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2204      	movs	r2, #4
 8006164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800616a:	f043 0202 	orr.w	r2, r3, #2
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d013      	beq.n	80061a4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800618c:	2b00      	cmp	r3, #0
 800618e:	d009      	beq.n	80061a4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2208      	movs	r2, #8
 8006196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800619c:	f043 0208 	orr.w	r2, r3, #8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00f      	beq.n	80061ce <HAL_UART_IRQHandler+0x14a>
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c6:	f043 0220 	orr.w	r2, r3, #32
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d07f      	beq.n	80062d6 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00c      	beq.n	80061fa <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061fe:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	d004      	beq.n	8006218 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006214:	2b00      	cmp	r3, #0
 8006216:	d031      	beq.n	800627c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fc6f 	bl	8006afc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006228:	2b40      	cmp	r3, #64	; 0x40
 800622a:	d123      	bne.n	8006274 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d013      	beq.n	800626c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006248:	4a26      	ldr	r2, [pc, #152]	; (80062e4 <HAL_UART_IRQHandler+0x260>)
 800624a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006250:	4618      	mov	r0, r3
 8006252:	f7fc fc66 	bl	8002b22 <HAL_DMA_Abort_IT>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d016      	beq.n	800628a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006266:	4610      	mov	r0, r2
 8006268:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626a:	e00e      	b.n	800628a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f845 	bl	80062fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006272:	e00a      	b.n	800628a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f841 	bl	80062fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627a:	e006      	b.n	800628a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f83d 	bl	80062fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006288:	e025      	b.n	80062d6 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628a:	bf00      	nop
    return;
 800628c:	e023      	b.n	80062d6 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00d      	beq.n	80062b4 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d008      	beq.n	80062b4 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d017      	beq.n	80062da <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	4798      	blx	r3
    }
    return;
 80062b2:	e012      	b.n	80062da <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00e      	beq.n	80062dc <HAL_UART_IRQHandler+0x258>
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fc4d 	bl	8006b68 <UART_EndTransmit_IT>
    return;
 80062ce:	bf00      	nop
 80062d0:	e004      	b.n	80062dc <HAL_UART_IRQHandler+0x258>
      return;
 80062d2:	bf00      	nop
 80062d4:	e002      	b.n	80062dc <HAL_UART_IRQHandler+0x258>
    return;
 80062d6:	bf00      	nop
 80062d8:	e000      	b.n	80062dc <HAL_UART_IRQHandler+0x258>
    return;
 80062da:	bf00      	nop
  }

}
 80062dc:	3720      	adds	r7, #32
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	08006b3d 	.word	0x08006b3d

080062e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006318:	2300      	movs	r3, #0
 800631a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4bb1      	ldr	r3, [pc, #708]	; (8006604 <UART_SetConfig+0x2f4>)
 8006340:	4013      	ands	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	6939      	ldr	r1, [r7, #16]
 8006348:	430b      	orrs	r3, r1
 800634a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	430a      	orrs	r2, r1
 8006384:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a9f      	ldr	r2, [pc, #636]	; (8006608 <UART_SetConfig+0x2f8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d121      	bne.n	80063d4 <UART_SetConfig+0xc4>
 8006390:	4b9e      	ldr	r3, [pc, #632]	; (800660c <UART_SetConfig+0x2fc>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b03      	cmp	r3, #3
 800639c:	d816      	bhi.n	80063cc <UART_SetConfig+0xbc>
 800639e:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0x94>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	080063b5 	.word	0x080063b5
 80063a8:	080063c1 	.word	0x080063c1
 80063ac:	080063bb 	.word	0x080063bb
 80063b0:	080063c7 	.word	0x080063c7
 80063b4:	2301      	movs	r3, #1
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e151      	b.n	800665e <UART_SetConfig+0x34e>
 80063ba:	2302      	movs	r3, #2
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e14e      	b.n	800665e <UART_SetConfig+0x34e>
 80063c0:	2304      	movs	r3, #4
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e14b      	b.n	800665e <UART_SetConfig+0x34e>
 80063c6:	2308      	movs	r3, #8
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e148      	b.n	800665e <UART_SetConfig+0x34e>
 80063cc:	2310      	movs	r3, #16
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	bf00      	nop
 80063d2:	e144      	b.n	800665e <UART_SetConfig+0x34e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a8d      	ldr	r2, [pc, #564]	; (8006610 <UART_SetConfig+0x300>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d134      	bne.n	8006448 <UART_SetConfig+0x138>
 80063de:	4b8b      	ldr	r3, [pc, #556]	; (800660c <UART_SetConfig+0x2fc>)
 80063e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e4:	f003 030c 	and.w	r3, r3, #12
 80063e8:	2b0c      	cmp	r3, #12
 80063ea:	d829      	bhi.n	8006440 <UART_SetConfig+0x130>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <UART_SetConfig+0xe4>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006429 	.word	0x08006429
 80063f8:	08006441 	.word	0x08006441
 80063fc:	08006441 	.word	0x08006441
 8006400:	08006441 	.word	0x08006441
 8006404:	08006435 	.word	0x08006435
 8006408:	08006441 	.word	0x08006441
 800640c:	08006441 	.word	0x08006441
 8006410:	08006441 	.word	0x08006441
 8006414:	0800642f 	.word	0x0800642f
 8006418:	08006441 	.word	0x08006441
 800641c:	08006441 	.word	0x08006441
 8006420:	08006441 	.word	0x08006441
 8006424:	0800643b 	.word	0x0800643b
 8006428:	2300      	movs	r3, #0
 800642a:	77fb      	strb	r3, [r7, #31]
 800642c:	e117      	b.n	800665e <UART_SetConfig+0x34e>
 800642e:	2302      	movs	r3, #2
 8006430:	77fb      	strb	r3, [r7, #31]
 8006432:	e114      	b.n	800665e <UART_SetConfig+0x34e>
 8006434:	2304      	movs	r3, #4
 8006436:	77fb      	strb	r3, [r7, #31]
 8006438:	e111      	b.n	800665e <UART_SetConfig+0x34e>
 800643a:	2308      	movs	r3, #8
 800643c:	77fb      	strb	r3, [r7, #31]
 800643e:	e10e      	b.n	800665e <UART_SetConfig+0x34e>
 8006440:	2310      	movs	r3, #16
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	bf00      	nop
 8006446:	e10a      	b.n	800665e <UART_SetConfig+0x34e>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a71      	ldr	r2, [pc, #452]	; (8006614 <UART_SetConfig+0x304>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d120      	bne.n	8006494 <UART_SetConfig+0x184>
 8006452:	4b6e      	ldr	r3, [pc, #440]	; (800660c <UART_SetConfig+0x2fc>)
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006458:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800645c:	2b10      	cmp	r3, #16
 800645e:	d00f      	beq.n	8006480 <UART_SetConfig+0x170>
 8006460:	2b10      	cmp	r3, #16
 8006462:	d802      	bhi.n	800646a <UART_SetConfig+0x15a>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <UART_SetConfig+0x164>
 8006468:	e010      	b.n	800648c <UART_SetConfig+0x17c>
 800646a:	2b20      	cmp	r3, #32
 800646c:	d005      	beq.n	800647a <UART_SetConfig+0x16a>
 800646e:	2b30      	cmp	r3, #48	; 0x30
 8006470:	d009      	beq.n	8006486 <UART_SetConfig+0x176>
 8006472:	e00b      	b.n	800648c <UART_SetConfig+0x17c>
 8006474:	2300      	movs	r3, #0
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e0f1      	b.n	800665e <UART_SetConfig+0x34e>
 800647a:	2302      	movs	r3, #2
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e0ee      	b.n	800665e <UART_SetConfig+0x34e>
 8006480:	2304      	movs	r3, #4
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e0eb      	b.n	800665e <UART_SetConfig+0x34e>
 8006486:	2308      	movs	r3, #8
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e0e8      	b.n	800665e <UART_SetConfig+0x34e>
 800648c:	2310      	movs	r3, #16
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	bf00      	nop
 8006492:	e0e4      	b.n	800665e <UART_SetConfig+0x34e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a5f      	ldr	r2, [pc, #380]	; (8006618 <UART_SetConfig+0x308>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d120      	bne.n	80064e0 <UART_SetConfig+0x1d0>
 800649e:	4b5b      	ldr	r3, [pc, #364]	; (800660c <UART_SetConfig+0x2fc>)
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064a8:	2b40      	cmp	r3, #64	; 0x40
 80064aa:	d00f      	beq.n	80064cc <UART_SetConfig+0x1bc>
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d802      	bhi.n	80064b6 <UART_SetConfig+0x1a6>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <UART_SetConfig+0x1b0>
 80064b4:	e010      	b.n	80064d8 <UART_SetConfig+0x1c8>
 80064b6:	2b80      	cmp	r3, #128	; 0x80
 80064b8:	d005      	beq.n	80064c6 <UART_SetConfig+0x1b6>
 80064ba:	2bc0      	cmp	r3, #192	; 0xc0
 80064bc:	d009      	beq.n	80064d2 <UART_SetConfig+0x1c2>
 80064be:	e00b      	b.n	80064d8 <UART_SetConfig+0x1c8>
 80064c0:	2300      	movs	r3, #0
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e0cb      	b.n	800665e <UART_SetConfig+0x34e>
 80064c6:	2302      	movs	r3, #2
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	e0c8      	b.n	800665e <UART_SetConfig+0x34e>
 80064cc:	2304      	movs	r3, #4
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e0c5      	b.n	800665e <UART_SetConfig+0x34e>
 80064d2:	2308      	movs	r3, #8
 80064d4:	77fb      	strb	r3, [r7, #31]
 80064d6:	e0c2      	b.n	800665e <UART_SetConfig+0x34e>
 80064d8:	2310      	movs	r3, #16
 80064da:	77fb      	strb	r3, [r7, #31]
 80064dc:	bf00      	nop
 80064de:	e0be      	b.n	800665e <UART_SetConfig+0x34e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a4d      	ldr	r2, [pc, #308]	; (800661c <UART_SetConfig+0x30c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d124      	bne.n	8006534 <UART_SetConfig+0x224>
 80064ea:	4b48      	ldr	r3, [pc, #288]	; (800660c <UART_SetConfig+0x2fc>)
 80064ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f8:	d012      	beq.n	8006520 <UART_SetConfig+0x210>
 80064fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fe:	d802      	bhi.n	8006506 <UART_SetConfig+0x1f6>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <UART_SetConfig+0x204>
 8006504:	e012      	b.n	800652c <UART_SetConfig+0x21c>
 8006506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650a:	d006      	beq.n	800651a <UART_SetConfig+0x20a>
 800650c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006510:	d009      	beq.n	8006526 <UART_SetConfig+0x216>
 8006512:	e00b      	b.n	800652c <UART_SetConfig+0x21c>
 8006514:	2300      	movs	r3, #0
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e0a1      	b.n	800665e <UART_SetConfig+0x34e>
 800651a:	2302      	movs	r3, #2
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e09e      	b.n	800665e <UART_SetConfig+0x34e>
 8006520:	2304      	movs	r3, #4
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e09b      	b.n	800665e <UART_SetConfig+0x34e>
 8006526:	2308      	movs	r3, #8
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e098      	b.n	800665e <UART_SetConfig+0x34e>
 800652c:	2310      	movs	r3, #16
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	bf00      	nop
 8006532:	e094      	b.n	800665e <UART_SetConfig+0x34e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a39      	ldr	r2, [pc, #228]	; (8006620 <UART_SetConfig+0x310>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d124      	bne.n	8006588 <UART_SetConfig+0x278>
 800653e:	4b33      	ldr	r3, [pc, #204]	; (800660c <UART_SetConfig+0x2fc>)
 8006540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006544:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654c:	d012      	beq.n	8006574 <UART_SetConfig+0x264>
 800654e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006552:	d802      	bhi.n	800655a <UART_SetConfig+0x24a>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <UART_SetConfig+0x258>
 8006558:	e012      	b.n	8006580 <UART_SetConfig+0x270>
 800655a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655e:	d006      	beq.n	800656e <UART_SetConfig+0x25e>
 8006560:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006564:	d009      	beq.n	800657a <UART_SetConfig+0x26a>
 8006566:	e00b      	b.n	8006580 <UART_SetConfig+0x270>
 8006568:	2301      	movs	r3, #1
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e077      	b.n	800665e <UART_SetConfig+0x34e>
 800656e:	2302      	movs	r3, #2
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e074      	b.n	800665e <UART_SetConfig+0x34e>
 8006574:	2304      	movs	r3, #4
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e071      	b.n	800665e <UART_SetConfig+0x34e>
 800657a:	2308      	movs	r3, #8
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	e06e      	b.n	800665e <UART_SetConfig+0x34e>
 8006580:	2310      	movs	r3, #16
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	bf00      	nop
 8006586:	e06a      	b.n	800665e <UART_SetConfig+0x34e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a25      	ldr	r2, [pc, #148]	; (8006624 <UART_SetConfig+0x314>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d124      	bne.n	80065dc <UART_SetConfig+0x2cc>
 8006592:	4b1e      	ldr	r3, [pc, #120]	; (800660c <UART_SetConfig+0x2fc>)
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006598:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800659c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a0:	d012      	beq.n	80065c8 <UART_SetConfig+0x2b8>
 80065a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a6:	d802      	bhi.n	80065ae <UART_SetConfig+0x29e>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d007      	beq.n	80065bc <UART_SetConfig+0x2ac>
 80065ac:	e012      	b.n	80065d4 <UART_SetConfig+0x2c4>
 80065ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b2:	d006      	beq.n	80065c2 <UART_SetConfig+0x2b2>
 80065b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065b8:	d009      	beq.n	80065ce <UART_SetConfig+0x2be>
 80065ba:	e00b      	b.n	80065d4 <UART_SetConfig+0x2c4>
 80065bc:	2300      	movs	r3, #0
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e04d      	b.n	800665e <UART_SetConfig+0x34e>
 80065c2:	2302      	movs	r3, #2
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e04a      	b.n	800665e <UART_SetConfig+0x34e>
 80065c8:	2304      	movs	r3, #4
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e047      	b.n	800665e <UART_SetConfig+0x34e>
 80065ce:	2308      	movs	r3, #8
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e044      	b.n	800665e <UART_SetConfig+0x34e>
 80065d4:	2310      	movs	r3, #16
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	bf00      	nop
 80065da:	e040      	b.n	800665e <UART_SetConfig+0x34e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a11      	ldr	r2, [pc, #68]	; (8006628 <UART_SetConfig+0x318>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d139      	bne.n	800665a <UART_SetConfig+0x34a>
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <UART_SetConfig+0x2fc>)
 80065e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f4:	d027      	beq.n	8006646 <UART_SetConfig+0x336>
 80065f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065fa:	d817      	bhi.n	800662c <UART_SetConfig+0x31c>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01c      	beq.n	800663a <UART_SetConfig+0x32a>
 8006600:	e027      	b.n	8006652 <UART_SetConfig+0x342>
 8006602:	bf00      	nop
 8006604:	efff69f3 	.word	0xefff69f3
 8006608:	40011000 	.word	0x40011000
 800660c:	40023800 	.word	0x40023800
 8006610:	40004400 	.word	0x40004400
 8006614:	40004800 	.word	0x40004800
 8006618:	40004c00 	.word	0x40004c00
 800661c:	40005000 	.word	0x40005000
 8006620:	40011400 	.word	0x40011400
 8006624:	40007800 	.word	0x40007800
 8006628:	40007c00 	.word	0x40007c00
 800662c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006630:	d006      	beq.n	8006640 <UART_SetConfig+0x330>
 8006632:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006636:	d009      	beq.n	800664c <UART_SetConfig+0x33c>
 8006638:	e00b      	b.n	8006652 <UART_SetConfig+0x342>
 800663a:	2300      	movs	r3, #0
 800663c:	77fb      	strb	r3, [r7, #31]
 800663e:	e00e      	b.n	800665e <UART_SetConfig+0x34e>
 8006640:	2302      	movs	r3, #2
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	e00b      	b.n	800665e <UART_SetConfig+0x34e>
 8006646:	2304      	movs	r3, #4
 8006648:	77fb      	strb	r3, [r7, #31]
 800664a:	e008      	b.n	800665e <UART_SetConfig+0x34e>
 800664c:	2308      	movs	r3, #8
 800664e:	77fb      	strb	r3, [r7, #31]
 8006650:	e005      	b.n	800665e <UART_SetConfig+0x34e>
 8006652:	2310      	movs	r3, #16
 8006654:	77fb      	strb	r3, [r7, #31]
 8006656:	bf00      	nop
 8006658:	e001      	b.n	800665e <UART_SetConfig+0x34e>
 800665a:	2310      	movs	r3, #16
 800665c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006666:	d17f      	bne.n	8006768 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006668:	7ffb      	ldrb	r3, [r7, #31]
 800666a:	2b08      	cmp	r3, #8
 800666c:	d85c      	bhi.n	8006728 <UART_SetConfig+0x418>
 800666e:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <UART_SetConfig+0x364>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	08006699 	.word	0x08006699
 8006678:	080066b9 	.word	0x080066b9
 800667c:	080066d9 	.word	0x080066d9
 8006680:	08006729 	.word	0x08006729
 8006684:	080066f1 	.word	0x080066f1
 8006688:	08006729 	.word	0x08006729
 800668c:	08006729 	.word	0x08006729
 8006690:	08006729 	.word	0x08006729
 8006694:	08006711 	.word	0x08006711
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006698:	f7fd fe20 	bl	80042dc <HAL_RCC_GetPCLK1Freq>
 800669c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	005a      	lsls	r2, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	441a      	add	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	61bb      	str	r3, [r7, #24]
        break;
 80066b6:	e03a      	b.n	800672e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b8:	f7fd fe24 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 80066bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	005a      	lsls	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	441a      	add	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	61bb      	str	r3, [r7, #24]
        break;
 80066d6:	e02a      	b.n	800672e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	085a      	lsrs	r2, r3, #1
 80066de:	4b5f      	ldr	r3, [pc, #380]	; (800685c <UART_SetConfig+0x54c>)
 80066e0:	4413      	add	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6852      	ldr	r2, [r2, #4]
 80066e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	61bb      	str	r3, [r7, #24]
        break;
 80066ee:	e01e      	b.n	800672e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066f0:	f7fd fd10 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 80066f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	005a      	lsls	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	441a      	add	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	fbb2 f3f3 	udiv	r3, r2, r3
 800670a:	b29b      	uxth	r3, r3
 800670c:	61bb      	str	r3, [r7, #24]
        break;
 800670e:	e00e      	b.n	800672e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	085b      	lsrs	r3, r3, #1
 8006716:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006722:	b29b      	uxth	r3, r3
 8006724:	61bb      	str	r3, [r7, #24]
        break;
 8006726:	e002      	b.n	800672e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
        break;
 800672c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b0f      	cmp	r3, #15
 8006732:	d916      	bls.n	8006762 <UART_SetConfig+0x452>
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673a:	d212      	bcs.n	8006762 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	b29b      	uxth	r3, r3
 8006740:	f023 030f 	bic.w	r3, r3, #15
 8006744:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	b29b      	uxth	r3, r3
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	b29a      	uxth	r2, r3
 8006752:	897b      	ldrh	r3, [r7, #10]
 8006754:	4313      	orrs	r3, r2
 8006756:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	897a      	ldrh	r2, [r7, #10]
 800675e:	60da      	str	r2, [r3, #12]
 8006760:	e070      	b.n	8006844 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
 8006766:	e06d      	b.n	8006844 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006768:	7ffb      	ldrb	r3, [r7, #31]
 800676a:	2b08      	cmp	r3, #8
 800676c:	d859      	bhi.n	8006822 <UART_SetConfig+0x512>
 800676e:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <UART_SetConfig+0x464>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	08006799 	.word	0x08006799
 8006778:	080067b7 	.word	0x080067b7
 800677c:	080067d5 	.word	0x080067d5
 8006780:	08006823 	.word	0x08006823
 8006784:	080067ed 	.word	0x080067ed
 8006788:	08006823 	.word	0x08006823
 800678c:	08006823 	.word	0x08006823
 8006790:	08006823 	.word	0x08006823
 8006794:	0800680b 	.word	0x0800680b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006798:	f7fd fda0 	bl	80042dc <HAL_RCC_GetPCLK1Freq>
 800679c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	085a      	lsrs	r2, r3, #1
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	441a      	add	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	61bb      	str	r3, [r7, #24]
        break;
 80067b4:	e038      	b.n	8006828 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b6:	f7fd fda5 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 80067ba:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	085a      	lsrs	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	441a      	add	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	61bb      	str	r3, [r7, #24]
        break;
 80067d2:	e029      	b.n	8006828 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	085a      	lsrs	r2, r3, #1
 80067da:	4b21      	ldr	r3, [pc, #132]	; (8006860 <UART_SetConfig+0x550>)
 80067dc:	4413      	add	r3, r2
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6852      	ldr	r2, [r2, #4]
 80067e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	61bb      	str	r3, [r7, #24]
        break;
 80067ea:	e01d      	b.n	8006828 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ec:	f7fd fc92 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 80067f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	085a      	lsrs	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	441a      	add	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	fbb2 f3f3 	udiv	r3, r2, r3
 8006804:	b29b      	uxth	r3, r3
 8006806:	61bb      	str	r3, [r7, #24]
        break;
 8006808:	e00e      	b.n	8006828 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	b29b      	uxth	r3, r3
 800681e:	61bb      	str	r3, [r7, #24]
        break;
 8006820:	e002      	b.n	8006828 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	75fb      	strb	r3, [r7, #23]
        break;
 8006826:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b0f      	cmp	r3, #15
 800682c:	d908      	bls.n	8006840 <UART_SetConfig+0x530>
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006834:	d204      	bcs.n	8006840 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	60da      	str	r2, [r3, #12]
 800683e:	e001      	b.n	8006844 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006850:	7dfb      	ldrb	r3, [r7, #23]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3720      	adds	r7, #32
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	01e84800 	.word	0x01e84800
 8006860:	00f42400 	.word	0x00f42400

08006864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01a      	beq.n	800697a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006962:	d10a      	bne.n	800697a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	605a      	str	r2, [r3, #4]
  }
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80069b6:	f7fb ff75 	bl	80028a4 <HAL_GetTick>
 80069ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b08      	cmp	r3, #8
 80069c8:	d10e      	bne.n	80069e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f814 	bl	8006a06 <UART_WaitOnFlagUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e00a      	b.n	80069fe <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2220      	movs	r2, #32
 80069ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2220      	movs	r2, #32
 80069f2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	603b      	str	r3, [r7, #0]
 8006a12:	4613      	mov	r3, r2
 8006a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a16:	e05d      	b.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1e:	d059      	beq.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a20:	f7fb ff40 	bl	80028a4 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d302      	bcc.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d11b      	bne.n	8006a6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0201 	bic.w	r2, r2, #1
 8006a54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e042      	b.n	8006af4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d02b      	beq.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a8a:	d123      	bne.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a94:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006aa4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
 8006ab4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e00f      	b.n	8006af4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	69da      	ldr	r2, [r3, #28]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4013      	ands	r3, r2
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2301      	moveq	r3, #1
 8006ae6:	2300      	movne	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d092      	beq.n	8006a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b12:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0201 	bic.w	r2, r2, #1
 8006b22:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff fbce 	bl	80062fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b7e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff fbab 	bl	80062e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b92:	bf00      	nop
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ba8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bae:	2b22      	cmp	r3, #34	; 0x22
 8006bb0:	d13a      	bne.n	8006c28 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bba:	89bb      	ldrh	r3, [r7, #12]
 8006bbc:	b2d9      	uxtb	r1, r3
 8006bbe:	89fb      	ldrh	r3, [r7, #14]
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	400a      	ands	r2, r1
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d121      	bne.n	8006c38 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c02:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0201 	bic.w	r2, r2, #1
 8006c12:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7fa fff5 	bl	8001c10 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c26:	e007      	b.n	8006c38 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0208 	orr.w	r2, r2, #8
 8006c36:	619a      	str	r2, [r3, #24]
}
 8006c38:	bf00      	nop
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c4e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c54:	2b22      	cmp	r3, #34	; 0x22
 8006c56:	d13a      	bne.n	8006cce <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c64:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c66:	89ba      	ldrh	r2, [r7, #12]
 8006c68:	89fb      	ldrh	r3, [r7, #14]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c76:	1c9a      	adds	r2, r3, #2
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d121      	bne.n	8006cde <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ca8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0201 	bic.w	r2, r2, #1
 8006cb8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7fa ffa2 	bl	8001c10 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ccc:	e007      	b.n	8006cde <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699a      	ldr	r2, [r3, #24]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0208 	orr.w	r2, r2, #8
 8006cdc:	619a      	str	r2, [r3, #24]
}
 8006cde:	bf00      	nop
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <arm_pid_init_f32>:
 8006ce8:	ed90 7a08 	vldr	s14, [r0, #32]
 8006cec:	edd0 7a06 	vldr	s15, [r0, #24]
 8006cf0:	ed90 6a07 	vldr	s12, [r0, #28]
 8006cf4:	eef1 6a67 	vneg.f32	s13, s15
 8006cf8:	ed80 7a02 	vstr	s14, [r0, #8]
 8006cfc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006d00:	ee37 6a07 	vadd.f32	s12, s14, s14
 8006d04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d08:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8006d0c:	edc0 7a00 	vstr	s15, [r0]
 8006d10:	ed80 7a01 	vstr	s14, [r0, #4]
 8006d14:	b901      	cbnz	r1, 8006d18 <arm_pid_init_f32+0x30>
 8006d16:	4770      	bx	lr
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60c3      	str	r3, [r0, #12]
 8006d1c:	6103      	str	r3, [r0, #16]
 8006d1e:	6143      	str	r3, [r0, #20]
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop

08006d24 <__errno>:
 8006d24:	4b01      	ldr	r3, [pc, #4]	; (8006d2c <__errno+0x8>)
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20000050 	.word	0x20000050

08006d30 <__libc_init_array>:
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	4e0d      	ldr	r6, [pc, #52]	; (8006d68 <__libc_init_array+0x38>)
 8006d34:	4c0d      	ldr	r4, [pc, #52]	; (8006d6c <__libc_init_array+0x3c>)
 8006d36:	1ba4      	subs	r4, r4, r6
 8006d38:	10a4      	asrs	r4, r4, #2
 8006d3a:	2500      	movs	r5, #0
 8006d3c:	42a5      	cmp	r5, r4
 8006d3e:	d109      	bne.n	8006d54 <__libc_init_array+0x24>
 8006d40:	4e0b      	ldr	r6, [pc, #44]	; (8006d70 <__libc_init_array+0x40>)
 8006d42:	4c0c      	ldr	r4, [pc, #48]	; (8006d74 <__libc_init_array+0x44>)
 8006d44:	f004 f9aa 	bl	800b09c <_init>
 8006d48:	1ba4      	subs	r4, r4, r6
 8006d4a:	10a4      	asrs	r4, r4, #2
 8006d4c:	2500      	movs	r5, #0
 8006d4e:	42a5      	cmp	r5, r4
 8006d50:	d105      	bne.n	8006d5e <__libc_init_array+0x2e>
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d58:	4798      	blx	r3
 8006d5a:	3501      	adds	r5, #1
 8006d5c:	e7ee      	b.n	8006d3c <__libc_init_array+0xc>
 8006d5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d62:	4798      	blx	r3
 8006d64:	3501      	adds	r5, #1
 8006d66:	e7f2      	b.n	8006d4e <__libc_init_array+0x1e>
 8006d68:	0800b46c 	.word	0x0800b46c
 8006d6c:	0800b46c 	.word	0x0800b46c
 8006d70:	0800b46c 	.word	0x0800b46c
 8006d74:	0800b470 	.word	0x0800b470

08006d78 <memset>:
 8006d78:	4402      	add	r2, r0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d100      	bne.n	8006d82 <memset+0xa>
 8006d80:	4770      	bx	lr
 8006d82:	f803 1b01 	strb.w	r1, [r3], #1
 8006d86:	e7f9      	b.n	8006d7c <memset+0x4>

08006d88 <__cvt>:
 8006d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8c:	ec55 4b10 	vmov	r4, r5, d0
 8006d90:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006d92:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d96:	2d00      	cmp	r5, #0
 8006d98:	460e      	mov	r6, r1
 8006d9a:	4691      	mov	r9, r2
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	bfb8      	it	lt
 8006da0:	4622      	movlt	r2, r4
 8006da2:	462b      	mov	r3, r5
 8006da4:	f027 0720 	bic.w	r7, r7, #32
 8006da8:	bfbb      	ittet	lt
 8006daa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006dae:	461d      	movlt	r5, r3
 8006db0:	2300      	movge	r3, #0
 8006db2:	232d      	movlt	r3, #45	; 0x2d
 8006db4:	bfb8      	it	lt
 8006db6:	4614      	movlt	r4, r2
 8006db8:	2f46      	cmp	r7, #70	; 0x46
 8006dba:	700b      	strb	r3, [r1, #0]
 8006dbc:	d004      	beq.n	8006dc8 <__cvt+0x40>
 8006dbe:	2f45      	cmp	r7, #69	; 0x45
 8006dc0:	d100      	bne.n	8006dc4 <__cvt+0x3c>
 8006dc2:	3601      	adds	r6, #1
 8006dc4:	2102      	movs	r1, #2
 8006dc6:	e000      	b.n	8006dca <__cvt+0x42>
 8006dc8:	2103      	movs	r1, #3
 8006dca:	ab03      	add	r3, sp, #12
 8006dcc:	9301      	str	r3, [sp, #4]
 8006dce:	ab02      	add	r3, sp, #8
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	4632      	mov	r2, r6
 8006dd4:	4653      	mov	r3, sl
 8006dd6:	ec45 4b10 	vmov	d0, r4, r5
 8006dda:	f001 fdc1 	bl	8008960 <_dtoa_r>
 8006dde:	2f47      	cmp	r7, #71	; 0x47
 8006de0:	4680      	mov	r8, r0
 8006de2:	d102      	bne.n	8006dea <__cvt+0x62>
 8006de4:	f019 0f01 	tst.w	r9, #1
 8006de8:	d026      	beq.n	8006e38 <__cvt+0xb0>
 8006dea:	2f46      	cmp	r7, #70	; 0x46
 8006dec:	eb08 0906 	add.w	r9, r8, r6
 8006df0:	d111      	bne.n	8006e16 <__cvt+0x8e>
 8006df2:	f898 3000 	ldrb.w	r3, [r8]
 8006df6:	2b30      	cmp	r3, #48	; 0x30
 8006df8:	d10a      	bne.n	8006e10 <__cvt+0x88>
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7f9 fe81 	bl	8000b08 <__aeabi_dcmpeq>
 8006e06:	b918      	cbnz	r0, 8006e10 <__cvt+0x88>
 8006e08:	f1c6 0601 	rsb	r6, r6, #1
 8006e0c:	f8ca 6000 	str.w	r6, [sl]
 8006e10:	f8da 3000 	ldr.w	r3, [sl]
 8006e14:	4499      	add	r9, r3
 8006e16:	2200      	movs	r2, #0
 8006e18:	2300      	movs	r3, #0
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	f7f9 fe73 	bl	8000b08 <__aeabi_dcmpeq>
 8006e22:	b938      	cbnz	r0, 8006e34 <__cvt+0xac>
 8006e24:	2230      	movs	r2, #48	; 0x30
 8006e26:	9b03      	ldr	r3, [sp, #12]
 8006e28:	454b      	cmp	r3, r9
 8006e2a:	d205      	bcs.n	8006e38 <__cvt+0xb0>
 8006e2c:	1c59      	adds	r1, r3, #1
 8006e2e:	9103      	str	r1, [sp, #12]
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	e7f8      	b.n	8006e26 <__cvt+0x9e>
 8006e34:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e3c:	eba3 0308 	sub.w	r3, r3, r8
 8006e40:	4640      	mov	r0, r8
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	b004      	add	sp, #16
 8006e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e4a <__exponent>:
 8006e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	4604      	mov	r4, r0
 8006e50:	bfba      	itte	lt
 8006e52:	4249      	neglt	r1, r1
 8006e54:	232d      	movlt	r3, #45	; 0x2d
 8006e56:	232b      	movge	r3, #43	; 0x2b
 8006e58:	2909      	cmp	r1, #9
 8006e5a:	f804 2b02 	strb.w	r2, [r4], #2
 8006e5e:	7043      	strb	r3, [r0, #1]
 8006e60:	dd20      	ble.n	8006ea4 <__exponent+0x5a>
 8006e62:	f10d 0307 	add.w	r3, sp, #7
 8006e66:	461f      	mov	r7, r3
 8006e68:	260a      	movs	r6, #10
 8006e6a:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e6e:	fb06 1115 	mls	r1, r6, r5, r1
 8006e72:	3130      	adds	r1, #48	; 0x30
 8006e74:	2d09      	cmp	r5, #9
 8006e76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e7a:	f103 32ff 	add.w	r2, r3, #4294967295
 8006e7e:	4629      	mov	r1, r5
 8006e80:	dc09      	bgt.n	8006e96 <__exponent+0x4c>
 8006e82:	3130      	adds	r1, #48	; 0x30
 8006e84:	3b02      	subs	r3, #2
 8006e86:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e8a:	42bb      	cmp	r3, r7
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	d304      	bcc.n	8006e9a <__exponent+0x50>
 8006e90:	1a10      	subs	r0, r2, r0
 8006e92:	b003      	add	sp, #12
 8006e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e96:	4613      	mov	r3, r2
 8006e98:	e7e7      	b.n	8006e6a <__exponent+0x20>
 8006e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e9e:	f804 2b01 	strb.w	r2, [r4], #1
 8006ea2:	e7f2      	b.n	8006e8a <__exponent+0x40>
 8006ea4:	2330      	movs	r3, #48	; 0x30
 8006ea6:	4419      	add	r1, r3
 8006ea8:	7083      	strb	r3, [r0, #2]
 8006eaa:	1d02      	adds	r2, r0, #4
 8006eac:	70c1      	strb	r1, [r0, #3]
 8006eae:	e7ef      	b.n	8006e90 <__exponent+0x46>

08006eb0 <_printf_float>:
 8006eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb4:	b08d      	sub	sp, #52	; 0x34
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	461f      	mov	r7, r3
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	f002 fe3f 	bl	8009b44 <_localeconv_r>
 8006ec6:	6803      	ldr	r3, [r0, #0]
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7f9 f9a0 	bl	8000210 <strlen>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed8:	9005      	str	r0, [sp, #20]
 8006eda:	3307      	adds	r3, #7
 8006edc:	f023 0307 	bic.w	r3, r3, #7
 8006ee0:	f103 0208 	add.w	r2, r3, #8
 8006ee4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ee8:	f8d4 b000 	ldr.w	fp, [r4]
 8006eec:	f8c8 2000 	str.w	r2, [r8]
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ef8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006efc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f00:	9307      	str	r3, [sp, #28]
 8006f02:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f06:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0a:	4ba7      	ldr	r3, [pc, #668]	; (80071a8 <_printf_float+0x2f8>)
 8006f0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f10:	f7f9 fe2c 	bl	8000b6c <__aeabi_dcmpun>
 8006f14:	bb70      	cbnz	r0, 8006f74 <_printf_float+0xc4>
 8006f16:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1a:	4ba3      	ldr	r3, [pc, #652]	; (80071a8 <_printf_float+0x2f8>)
 8006f1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f20:	f7f9 fe06 	bl	8000b30 <__aeabi_dcmple>
 8006f24:	bb30      	cbnz	r0, 8006f74 <_printf_float+0xc4>
 8006f26:	2200      	movs	r2, #0
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	f7f9 fdf5 	bl	8000b1c <__aeabi_dcmplt>
 8006f32:	b110      	cbz	r0, 8006f3a <_printf_float+0x8a>
 8006f34:	232d      	movs	r3, #45	; 0x2d
 8006f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f3a:	4a9c      	ldr	r2, [pc, #624]	; (80071ac <_printf_float+0x2fc>)
 8006f3c:	4b9c      	ldr	r3, [pc, #624]	; (80071b0 <_printf_float+0x300>)
 8006f3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006f42:	bf8c      	ite	hi
 8006f44:	4690      	movhi	r8, r2
 8006f46:	4698      	movls	r8, r3
 8006f48:	2303      	movs	r3, #3
 8006f4a:	f02b 0204 	bic.w	r2, fp, #4
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	6022      	str	r2, [r4, #0]
 8006f52:	f04f 0900 	mov.w	r9, #0
 8006f56:	9700      	str	r7, [sp, #0]
 8006f58:	4633      	mov	r3, r6
 8006f5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 f9e6 	bl	8007330 <_printf_common>
 8006f64:	3001      	adds	r0, #1
 8006f66:	f040 808d 	bne.w	8007084 <_printf_float+0x1d4>
 8006f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6e:	b00d      	add	sp, #52	; 0x34
 8006f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f74:	4642      	mov	r2, r8
 8006f76:	464b      	mov	r3, r9
 8006f78:	4640      	mov	r0, r8
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	f7f9 fdf6 	bl	8000b6c <__aeabi_dcmpun>
 8006f80:	b110      	cbz	r0, 8006f88 <_printf_float+0xd8>
 8006f82:	4a8c      	ldr	r2, [pc, #560]	; (80071b4 <_printf_float+0x304>)
 8006f84:	4b8c      	ldr	r3, [pc, #560]	; (80071b8 <_printf_float+0x308>)
 8006f86:	e7da      	b.n	8006f3e <_printf_float+0x8e>
 8006f88:	6861      	ldr	r1, [r4, #4]
 8006f8a:	1c4b      	adds	r3, r1, #1
 8006f8c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006f90:	a80a      	add	r0, sp, #40	; 0x28
 8006f92:	d13e      	bne.n	8007012 <_printf_float+0x162>
 8006f94:	2306      	movs	r3, #6
 8006f96:	6063      	str	r3, [r4, #4]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006f9e:	ab09      	add	r3, sp, #36	; 0x24
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	ec49 8b10 	vmov	d0, r8, r9
 8006fa6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006faa:	6022      	str	r2, [r4, #0]
 8006fac:	f8cd a004 	str.w	sl, [sp, #4]
 8006fb0:	6861      	ldr	r1, [r4, #4]
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7ff fee8 	bl	8006d88 <__cvt>
 8006fb8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006fbc:	2b47      	cmp	r3, #71	; 0x47
 8006fbe:	4680      	mov	r8, r0
 8006fc0:	d109      	bne.n	8006fd6 <_printf_float+0x126>
 8006fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc4:	1cd8      	adds	r0, r3, #3
 8006fc6:	db02      	blt.n	8006fce <_printf_float+0x11e>
 8006fc8:	6862      	ldr	r2, [r4, #4]
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	dd47      	ble.n	800705e <_printf_float+0x1ae>
 8006fce:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fd2:	fa5f fa8a 	uxtb.w	sl, sl
 8006fd6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006fda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fdc:	d824      	bhi.n	8007028 <_printf_float+0x178>
 8006fde:	3901      	subs	r1, #1
 8006fe0:	4652      	mov	r2, sl
 8006fe2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fe6:	9109      	str	r1, [sp, #36]	; 0x24
 8006fe8:	f7ff ff2f 	bl	8006e4a <__exponent>
 8006fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fee:	1813      	adds	r3, r2, r0
 8006ff0:	2a01      	cmp	r2, #1
 8006ff2:	4681      	mov	r9, r0
 8006ff4:	6123      	str	r3, [r4, #16]
 8006ff6:	dc02      	bgt.n	8006ffe <_printf_float+0x14e>
 8006ff8:	6822      	ldr	r2, [r4, #0]
 8006ffa:	07d1      	lsls	r1, r2, #31
 8006ffc:	d501      	bpl.n	8007002 <_printf_float+0x152>
 8006ffe:	3301      	adds	r3, #1
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0a5      	beq.n	8006f56 <_printf_float+0xa6>
 800700a:	232d      	movs	r3, #45	; 0x2d
 800700c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007010:	e7a1      	b.n	8006f56 <_printf_float+0xa6>
 8007012:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007016:	f000 8177 	beq.w	8007308 <_printf_float+0x458>
 800701a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800701e:	d1bb      	bne.n	8006f98 <_printf_float+0xe8>
 8007020:	2900      	cmp	r1, #0
 8007022:	d1b9      	bne.n	8006f98 <_printf_float+0xe8>
 8007024:	2301      	movs	r3, #1
 8007026:	e7b6      	b.n	8006f96 <_printf_float+0xe6>
 8007028:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800702c:	d119      	bne.n	8007062 <_printf_float+0x1b2>
 800702e:	2900      	cmp	r1, #0
 8007030:	6863      	ldr	r3, [r4, #4]
 8007032:	dd0c      	ble.n	800704e <_printf_float+0x19e>
 8007034:	6121      	str	r1, [r4, #16]
 8007036:	b913      	cbnz	r3, 800703e <_printf_float+0x18e>
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	07d2      	lsls	r2, r2, #31
 800703c:	d502      	bpl.n	8007044 <_printf_float+0x194>
 800703e:	3301      	adds	r3, #1
 8007040:	440b      	add	r3, r1
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007046:	65a3      	str	r3, [r4, #88]	; 0x58
 8007048:	f04f 0900 	mov.w	r9, #0
 800704c:	e7d9      	b.n	8007002 <_printf_float+0x152>
 800704e:	b913      	cbnz	r3, 8007056 <_printf_float+0x1a6>
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	07d0      	lsls	r0, r2, #31
 8007054:	d501      	bpl.n	800705a <_printf_float+0x1aa>
 8007056:	3302      	adds	r3, #2
 8007058:	e7f3      	b.n	8007042 <_printf_float+0x192>
 800705a:	2301      	movs	r3, #1
 800705c:	e7f1      	b.n	8007042 <_printf_float+0x192>
 800705e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007062:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007066:	4293      	cmp	r3, r2
 8007068:	db05      	blt.n	8007076 <_printf_float+0x1c6>
 800706a:	6822      	ldr	r2, [r4, #0]
 800706c:	6123      	str	r3, [r4, #16]
 800706e:	07d1      	lsls	r1, r2, #31
 8007070:	d5e8      	bpl.n	8007044 <_printf_float+0x194>
 8007072:	3301      	adds	r3, #1
 8007074:	e7e5      	b.n	8007042 <_printf_float+0x192>
 8007076:	2b00      	cmp	r3, #0
 8007078:	bfd4      	ite	le
 800707a:	f1c3 0302 	rsble	r3, r3, #2
 800707e:	2301      	movgt	r3, #1
 8007080:	4413      	add	r3, r2
 8007082:	e7de      	b.n	8007042 <_printf_float+0x192>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	055a      	lsls	r2, r3, #21
 8007088:	d407      	bmi.n	800709a <_printf_float+0x1ea>
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	4642      	mov	r2, r8
 800708e:	4631      	mov	r1, r6
 8007090:	4628      	mov	r0, r5
 8007092:	47b8      	blx	r7
 8007094:	3001      	adds	r0, #1
 8007096:	d12b      	bne.n	80070f0 <_printf_float+0x240>
 8007098:	e767      	b.n	8006f6a <_printf_float+0xba>
 800709a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800709e:	f240 80dc 	bls.w	800725a <_printf_float+0x3aa>
 80070a2:	2200      	movs	r2, #0
 80070a4:	2300      	movs	r3, #0
 80070a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070aa:	f7f9 fd2d 	bl	8000b08 <__aeabi_dcmpeq>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d033      	beq.n	800711a <_printf_float+0x26a>
 80070b2:	2301      	movs	r3, #1
 80070b4:	4a41      	ldr	r2, [pc, #260]	; (80071bc <_printf_float+0x30c>)
 80070b6:	4631      	mov	r1, r6
 80070b8:	4628      	mov	r0, r5
 80070ba:	47b8      	blx	r7
 80070bc:	3001      	adds	r0, #1
 80070be:	f43f af54 	beq.w	8006f6a <_printf_float+0xba>
 80070c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c6:	429a      	cmp	r2, r3
 80070c8:	db02      	blt.n	80070d0 <_printf_float+0x220>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	07d8      	lsls	r0, r3, #31
 80070ce:	d50f      	bpl.n	80070f0 <_printf_float+0x240>
 80070d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070d4:	4631      	mov	r1, r6
 80070d6:	4628      	mov	r0, r5
 80070d8:	47b8      	blx	r7
 80070da:	3001      	adds	r0, #1
 80070dc:	f43f af45 	beq.w	8006f6a <_printf_float+0xba>
 80070e0:	f04f 0800 	mov.w	r8, #0
 80070e4:	f104 091a 	add.w	r9, r4, #26
 80070e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ea:	3b01      	subs	r3, #1
 80070ec:	4543      	cmp	r3, r8
 80070ee:	dc09      	bgt.n	8007104 <_printf_float+0x254>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	079b      	lsls	r3, r3, #30
 80070f4:	f100 8103 	bmi.w	80072fe <_printf_float+0x44e>
 80070f8:	68e0      	ldr	r0, [r4, #12]
 80070fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070fc:	4298      	cmp	r0, r3
 80070fe:	bfb8      	it	lt
 8007100:	4618      	movlt	r0, r3
 8007102:	e734      	b.n	8006f6e <_printf_float+0xbe>
 8007104:	2301      	movs	r3, #1
 8007106:	464a      	mov	r2, r9
 8007108:	4631      	mov	r1, r6
 800710a:	4628      	mov	r0, r5
 800710c:	47b8      	blx	r7
 800710e:	3001      	adds	r0, #1
 8007110:	f43f af2b 	beq.w	8006f6a <_printf_float+0xba>
 8007114:	f108 0801 	add.w	r8, r8, #1
 8007118:	e7e6      	b.n	80070e8 <_printf_float+0x238>
 800711a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	dc2b      	bgt.n	8007178 <_printf_float+0x2c8>
 8007120:	2301      	movs	r3, #1
 8007122:	4a26      	ldr	r2, [pc, #152]	; (80071bc <_printf_float+0x30c>)
 8007124:	4631      	mov	r1, r6
 8007126:	4628      	mov	r0, r5
 8007128:	47b8      	blx	r7
 800712a:	3001      	adds	r0, #1
 800712c:	f43f af1d 	beq.w	8006f6a <_printf_float+0xba>
 8007130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007132:	b923      	cbnz	r3, 800713e <_printf_float+0x28e>
 8007134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007136:	b913      	cbnz	r3, 800713e <_printf_float+0x28e>
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	07d9      	lsls	r1, r3, #31
 800713c:	d5d8      	bpl.n	80070f0 <_printf_float+0x240>
 800713e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007142:	4631      	mov	r1, r6
 8007144:	4628      	mov	r0, r5
 8007146:	47b8      	blx	r7
 8007148:	3001      	adds	r0, #1
 800714a:	f43f af0e 	beq.w	8006f6a <_printf_float+0xba>
 800714e:	f04f 0900 	mov.w	r9, #0
 8007152:	f104 0a1a 	add.w	sl, r4, #26
 8007156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007158:	425b      	negs	r3, r3
 800715a:	454b      	cmp	r3, r9
 800715c:	dc01      	bgt.n	8007162 <_printf_float+0x2b2>
 800715e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007160:	e794      	b.n	800708c <_printf_float+0x1dc>
 8007162:	2301      	movs	r3, #1
 8007164:	4652      	mov	r2, sl
 8007166:	4631      	mov	r1, r6
 8007168:	4628      	mov	r0, r5
 800716a:	47b8      	blx	r7
 800716c:	3001      	adds	r0, #1
 800716e:	f43f aefc 	beq.w	8006f6a <_printf_float+0xba>
 8007172:	f109 0901 	add.w	r9, r9, #1
 8007176:	e7ee      	b.n	8007156 <_printf_float+0x2a6>
 8007178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800717a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800717c:	429a      	cmp	r2, r3
 800717e:	bfa8      	it	ge
 8007180:	461a      	movge	r2, r3
 8007182:	2a00      	cmp	r2, #0
 8007184:	4691      	mov	r9, r2
 8007186:	dd07      	ble.n	8007198 <_printf_float+0x2e8>
 8007188:	4613      	mov	r3, r2
 800718a:	4631      	mov	r1, r6
 800718c:	4642      	mov	r2, r8
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	f43f aee9 	beq.w	8006f6a <_printf_float+0xba>
 8007198:	f104 031a 	add.w	r3, r4, #26
 800719c:	f04f 0b00 	mov.w	fp, #0
 80071a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071a4:	9306      	str	r3, [sp, #24]
 80071a6:	e015      	b.n	80071d4 <_printf_float+0x324>
 80071a8:	7fefffff 	.word	0x7fefffff
 80071ac:	0800b13c 	.word	0x0800b13c
 80071b0:	0800b138 	.word	0x0800b138
 80071b4:	0800b144 	.word	0x0800b144
 80071b8:	0800b140 	.word	0x0800b140
 80071bc:	0800b2fb 	.word	0x0800b2fb
 80071c0:	2301      	movs	r3, #1
 80071c2:	9a06      	ldr	r2, [sp, #24]
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	f43f aecd 	beq.w	8006f6a <_printf_float+0xba>
 80071d0:	f10b 0b01 	add.w	fp, fp, #1
 80071d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071d8:	ebaa 0309 	sub.w	r3, sl, r9
 80071dc:	455b      	cmp	r3, fp
 80071de:	dcef      	bgt.n	80071c0 <_printf_float+0x310>
 80071e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071e4:	429a      	cmp	r2, r3
 80071e6:	44d0      	add	r8, sl
 80071e8:	db15      	blt.n	8007216 <_printf_float+0x366>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	07da      	lsls	r2, r3, #31
 80071ee:	d412      	bmi.n	8007216 <_printf_float+0x366>
 80071f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071f4:	eba3 020a 	sub.w	r2, r3, sl
 80071f8:	eba3 0a01 	sub.w	sl, r3, r1
 80071fc:	4592      	cmp	sl, r2
 80071fe:	bfa8      	it	ge
 8007200:	4692      	movge	sl, r2
 8007202:	f1ba 0f00 	cmp.w	sl, #0
 8007206:	dc0e      	bgt.n	8007226 <_printf_float+0x376>
 8007208:	f04f 0800 	mov.w	r8, #0
 800720c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007210:	f104 091a 	add.w	r9, r4, #26
 8007214:	e019      	b.n	800724a <_printf_float+0x39a>
 8007216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800721a:	4631      	mov	r1, r6
 800721c:	4628      	mov	r0, r5
 800721e:	47b8      	blx	r7
 8007220:	3001      	adds	r0, #1
 8007222:	d1e5      	bne.n	80071f0 <_printf_float+0x340>
 8007224:	e6a1      	b.n	8006f6a <_printf_float+0xba>
 8007226:	4653      	mov	r3, sl
 8007228:	4642      	mov	r2, r8
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	d1e9      	bne.n	8007208 <_printf_float+0x358>
 8007234:	e699      	b.n	8006f6a <_printf_float+0xba>
 8007236:	2301      	movs	r3, #1
 8007238:	464a      	mov	r2, r9
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f ae92 	beq.w	8006f6a <_printf_float+0xba>
 8007246:	f108 0801 	add.w	r8, r8, #1
 800724a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800724e:	1a9b      	subs	r3, r3, r2
 8007250:	eba3 030a 	sub.w	r3, r3, sl
 8007254:	4543      	cmp	r3, r8
 8007256:	dcee      	bgt.n	8007236 <_printf_float+0x386>
 8007258:	e74a      	b.n	80070f0 <_printf_float+0x240>
 800725a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800725c:	2a01      	cmp	r2, #1
 800725e:	dc01      	bgt.n	8007264 <_printf_float+0x3b4>
 8007260:	07db      	lsls	r3, r3, #31
 8007262:	d53a      	bpl.n	80072da <_printf_float+0x42a>
 8007264:	2301      	movs	r3, #1
 8007266:	4642      	mov	r2, r8
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	47b8      	blx	r7
 800726e:	3001      	adds	r0, #1
 8007270:	f43f ae7b 	beq.w	8006f6a <_printf_float+0xba>
 8007274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f108 0801 	add.w	r8, r8, #1
 8007284:	f43f ae71 	beq.w	8006f6a <_printf_float+0xba>
 8007288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728a:	2200      	movs	r2, #0
 800728c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007290:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007294:	2300      	movs	r3, #0
 8007296:	f7f9 fc37 	bl	8000b08 <__aeabi_dcmpeq>
 800729a:	b9c8      	cbnz	r0, 80072d0 <_printf_float+0x420>
 800729c:	4653      	mov	r3, sl
 800729e:	4642      	mov	r2, r8
 80072a0:	4631      	mov	r1, r6
 80072a2:	4628      	mov	r0, r5
 80072a4:	47b8      	blx	r7
 80072a6:	3001      	adds	r0, #1
 80072a8:	d10e      	bne.n	80072c8 <_printf_float+0x418>
 80072aa:	e65e      	b.n	8006f6a <_printf_float+0xba>
 80072ac:	2301      	movs	r3, #1
 80072ae:	4652      	mov	r2, sl
 80072b0:	4631      	mov	r1, r6
 80072b2:	4628      	mov	r0, r5
 80072b4:	47b8      	blx	r7
 80072b6:	3001      	adds	r0, #1
 80072b8:	f43f ae57 	beq.w	8006f6a <_printf_float+0xba>
 80072bc:	f108 0801 	add.w	r8, r8, #1
 80072c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c2:	3b01      	subs	r3, #1
 80072c4:	4543      	cmp	r3, r8
 80072c6:	dcf1      	bgt.n	80072ac <_printf_float+0x3fc>
 80072c8:	464b      	mov	r3, r9
 80072ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072ce:	e6de      	b.n	800708e <_printf_float+0x1de>
 80072d0:	f04f 0800 	mov.w	r8, #0
 80072d4:	f104 0a1a 	add.w	sl, r4, #26
 80072d8:	e7f2      	b.n	80072c0 <_printf_float+0x410>
 80072da:	2301      	movs	r3, #1
 80072dc:	e7df      	b.n	800729e <_printf_float+0x3ee>
 80072de:	2301      	movs	r3, #1
 80072e0:	464a      	mov	r2, r9
 80072e2:	4631      	mov	r1, r6
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	f43f ae3e 	beq.w	8006f6a <_printf_float+0xba>
 80072ee:	f108 0801 	add.w	r8, r8, #1
 80072f2:	68e3      	ldr	r3, [r4, #12]
 80072f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072f6:	1a9b      	subs	r3, r3, r2
 80072f8:	4543      	cmp	r3, r8
 80072fa:	dcf0      	bgt.n	80072de <_printf_float+0x42e>
 80072fc:	e6fc      	b.n	80070f8 <_printf_float+0x248>
 80072fe:	f04f 0800 	mov.w	r8, #0
 8007302:	f104 0919 	add.w	r9, r4, #25
 8007306:	e7f4      	b.n	80072f2 <_printf_float+0x442>
 8007308:	2900      	cmp	r1, #0
 800730a:	f43f ae8b 	beq.w	8007024 <_printf_float+0x174>
 800730e:	2300      	movs	r3, #0
 8007310:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007314:	ab09      	add	r3, sp, #36	; 0x24
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	ec49 8b10 	vmov	d0, r8, r9
 800731c:	6022      	str	r2, [r4, #0]
 800731e:	f8cd a004 	str.w	sl, [sp, #4]
 8007322:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007326:	4628      	mov	r0, r5
 8007328:	f7ff fd2e 	bl	8006d88 <__cvt>
 800732c:	4680      	mov	r8, r0
 800732e:	e648      	b.n	8006fc2 <_printf_float+0x112>

08007330 <_printf_common>:
 8007330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	4691      	mov	r9, r2
 8007336:	461f      	mov	r7, r3
 8007338:	688a      	ldr	r2, [r1, #8]
 800733a:	690b      	ldr	r3, [r1, #16]
 800733c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007340:	4293      	cmp	r3, r2
 8007342:	bfb8      	it	lt
 8007344:	4613      	movlt	r3, r2
 8007346:	f8c9 3000 	str.w	r3, [r9]
 800734a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800734e:	4606      	mov	r6, r0
 8007350:	460c      	mov	r4, r1
 8007352:	b112      	cbz	r2, 800735a <_printf_common+0x2a>
 8007354:	3301      	adds	r3, #1
 8007356:	f8c9 3000 	str.w	r3, [r9]
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	0699      	lsls	r1, r3, #26
 800735e:	bf42      	ittt	mi
 8007360:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007364:	3302      	addmi	r3, #2
 8007366:	f8c9 3000 	strmi.w	r3, [r9]
 800736a:	6825      	ldr	r5, [r4, #0]
 800736c:	f015 0506 	ands.w	r5, r5, #6
 8007370:	d107      	bne.n	8007382 <_printf_common+0x52>
 8007372:	f104 0a19 	add.w	sl, r4, #25
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	f8d9 2000 	ldr.w	r2, [r9]
 800737c:	1a9b      	subs	r3, r3, r2
 800737e:	42ab      	cmp	r3, r5
 8007380:	dc28      	bgt.n	80073d4 <_printf_common+0xa4>
 8007382:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	3300      	adds	r3, #0
 800738a:	bf18      	it	ne
 800738c:	2301      	movne	r3, #1
 800738e:	0692      	lsls	r2, r2, #26
 8007390:	d42d      	bmi.n	80073ee <_printf_common+0xbe>
 8007392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007396:	4639      	mov	r1, r7
 8007398:	4630      	mov	r0, r6
 800739a:	47c0      	blx	r8
 800739c:	3001      	adds	r0, #1
 800739e:	d020      	beq.n	80073e2 <_printf_common+0xb2>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	68e5      	ldr	r5, [r4, #12]
 80073a4:	f8d9 2000 	ldr.w	r2, [r9]
 80073a8:	f003 0306 	and.w	r3, r3, #6
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	bf08      	it	eq
 80073b0:	1aad      	subeq	r5, r5, r2
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	6922      	ldr	r2, [r4, #16]
 80073b6:	bf0c      	ite	eq
 80073b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073bc:	2500      	movne	r5, #0
 80073be:	4293      	cmp	r3, r2
 80073c0:	bfc4      	itt	gt
 80073c2:	1a9b      	subgt	r3, r3, r2
 80073c4:	18ed      	addgt	r5, r5, r3
 80073c6:	f04f 0900 	mov.w	r9, #0
 80073ca:	341a      	adds	r4, #26
 80073cc:	454d      	cmp	r5, r9
 80073ce:	d11a      	bne.n	8007406 <_printf_common+0xd6>
 80073d0:	2000      	movs	r0, #0
 80073d2:	e008      	b.n	80073e6 <_printf_common+0xb6>
 80073d4:	2301      	movs	r3, #1
 80073d6:	4652      	mov	r2, sl
 80073d8:	4639      	mov	r1, r7
 80073da:	4630      	mov	r0, r6
 80073dc:	47c0      	blx	r8
 80073de:	3001      	adds	r0, #1
 80073e0:	d103      	bne.n	80073ea <_printf_common+0xba>
 80073e2:	f04f 30ff 	mov.w	r0, #4294967295
 80073e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ea:	3501      	adds	r5, #1
 80073ec:	e7c3      	b.n	8007376 <_printf_common+0x46>
 80073ee:	18e1      	adds	r1, r4, r3
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	2030      	movs	r0, #48	; 0x30
 80073f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f8:	4422      	add	r2, r4
 80073fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007402:	3302      	adds	r3, #2
 8007404:	e7c5      	b.n	8007392 <_printf_common+0x62>
 8007406:	2301      	movs	r3, #1
 8007408:	4622      	mov	r2, r4
 800740a:	4639      	mov	r1, r7
 800740c:	4630      	mov	r0, r6
 800740e:	47c0      	blx	r8
 8007410:	3001      	adds	r0, #1
 8007412:	d0e6      	beq.n	80073e2 <_printf_common+0xb2>
 8007414:	f109 0901 	add.w	r9, r9, #1
 8007418:	e7d8      	b.n	80073cc <_printf_common+0x9c>
	...

0800741c <_printf_i>:
 800741c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007420:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007424:	460c      	mov	r4, r1
 8007426:	7e09      	ldrb	r1, [r1, #24]
 8007428:	b085      	sub	sp, #20
 800742a:	296e      	cmp	r1, #110	; 0x6e
 800742c:	4617      	mov	r7, r2
 800742e:	4606      	mov	r6, r0
 8007430:	4698      	mov	r8, r3
 8007432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007434:	f000 80b3 	beq.w	800759e <_printf_i+0x182>
 8007438:	d822      	bhi.n	8007480 <_printf_i+0x64>
 800743a:	2963      	cmp	r1, #99	; 0x63
 800743c:	d036      	beq.n	80074ac <_printf_i+0x90>
 800743e:	d80a      	bhi.n	8007456 <_printf_i+0x3a>
 8007440:	2900      	cmp	r1, #0
 8007442:	f000 80b9 	beq.w	80075b8 <_printf_i+0x19c>
 8007446:	2958      	cmp	r1, #88	; 0x58
 8007448:	f000 8083 	beq.w	8007552 <_printf_i+0x136>
 800744c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007450:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007454:	e032      	b.n	80074bc <_printf_i+0xa0>
 8007456:	2964      	cmp	r1, #100	; 0x64
 8007458:	d001      	beq.n	800745e <_printf_i+0x42>
 800745a:	2969      	cmp	r1, #105	; 0x69
 800745c:	d1f6      	bne.n	800744c <_printf_i+0x30>
 800745e:	6820      	ldr	r0, [r4, #0]
 8007460:	6813      	ldr	r3, [r2, #0]
 8007462:	0605      	lsls	r5, r0, #24
 8007464:	f103 0104 	add.w	r1, r3, #4
 8007468:	d52a      	bpl.n	80074c0 <_printf_i+0xa4>
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6011      	str	r1, [r2, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	da03      	bge.n	800747a <_printf_i+0x5e>
 8007472:	222d      	movs	r2, #45	; 0x2d
 8007474:	425b      	negs	r3, r3
 8007476:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800747a:	486f      	ldr	r0, [pc, #444]	; (8007638 <_printf_i+0x21c>)
 800747c:	220a      	movs	r2, #10
 800747e:	e039      	b.n	80074f4 <_printf_i+0xd8>
 8007480:	2973      	cmp	r1, #115	; 0x73
 8007482:	f000 809d 	beq.w	80075c0 <_printf_i+0x1a4>
 8007486:	d808      	bhi.n	800749a <_printf_i+0x7e>
 8007488:	296f      	cmp	r1, #111	; 0x6f
 800748a:	d020      	beq.n	80074ce <_printf_i+0xb2>
 800748c:	2970      	cmp	r1, #112	; 0x70
 800748e:	d1dd      	bne.n	800744c <_printf_i+0x30>
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	f043 0320 	orr.w	r3, r3, #32
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	e003      	b.n	80074a2 <_printf_i+0x86>
 800749a:	2975      	cmp	r1, #117	; 0x75
 800749c:	d017      	beq.n	80074ce <_printf_i+0xb2>
 800749e:	2978      	cmp	r1, #120	; 0x78
 80074a0:	d1d4      	bne.n	800744c <_printf_i+0x30>
 80074a2:	2378      	movs	r3, #120	; 0x78
 80074a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074a8:	4864      	ldr	r0, [pc, #400]	; (800763c <_printf_i+0x220>)
 80074aa:	e055      	b.n	8007558 <_printf_i+0x13c>
 80074ac:	6813      	ldr	r3, [r2, #0]
 80074ae:	1d19      	adds	r1, r3, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6011      	str	r1, [r2, #0]
 80074b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074bc:	2301      	movs	r3, #1
 80074be:	e08c      	b.n	80075da <_printf_i+0x1be>
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6011      	str	r1, [r2, #0]
 80074c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074c8:	bf18      	it	ne
 80074ca:	b21b      	sxthne	r3, r3
 80074cc:	e7cf      	b.n	800746e <_printf_i+0x52>
 80074ce:	6813      	ldr	r3, [r2, #0]
 80074d0:	6825      	ldr	r5, [r4, #0]
 80074d2:	1d18      	adds	r0, r3, #4
 80074d4:	6010      	str	r0, [r2, #0]
 80074d6:	0628      	lsls	r0, r5, #24
 80074d8:	d501      	bpl.n	80074de <_printf_i+0xc2>
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	e002      	b.n	80074e4 <_printf_i+0xc8>
 80074de:	0668      	lsls	r0, r5, #25
 80074e0:	d5fb      	bpl.n	80074da <_printf_i+0xbe>
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	4854      	ldr	r0, [pc, #336]	; (8007638 <_printf_i+0x21c>)
 80074e6:	296f      	cmp	r1, #111	; 0x6f
 80074e8:	bf14      	ite	ne
 80074ea:	220a      	movne	r2, #10
 80074ec:	2208      	moveq	r2, #8
 80074ee:	2100      	movs	r1, #0
 80074f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074f4:	6865      	ldr	r5, [r4, #4]
 80074f6:	60a5      	str	r5, [r4, #8]
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	f2c0 8095 	blt.w	8007628 <_printf_i+0x20c>
 80074fe:	6821      	ldr	r1, [r4, #0]
 8007500:	f021 0104 	bic.w	r1, r1, #4
 8007504:	6021      	str	r1, [r4, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d13d      	bne.n	8007586 <_printf_i+0x16a>
 800750a:	2d00      	cmp	r5, #0
 800750c:	f040 808e 	bne.w	800762c <_printf_i+0x210>
 8007510:	4665      	mov	r5, ip
 8007512:	2a08      	cmp	r2, #8
 8007514:	d10b      	bne.n	800752e <_printf_i+0x112>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	07db      	lsls	r3, r3, #31
 800751a:	d508      	bpl.n	800752e <_printf_i+0x112>
 800751c:	6923      	ldr	r3, [r4, #16]
 800751e:	6862      	ldr	r2, [r4, #4]
 8007520:	429a      	cmp	r2, r3
 8007522:	bfde      	ittt	le
 8007524:	2330      	movle	r3, #48	; 0x30
 8007526:	f805 3c01 	strble.w	r3, [r5, #-1]
 800752a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800752e:	ebac 0305 	sub.w	r3, ip, r5
 8007532:	6123      	str	r3, [r4, #16]
 8007534:	f8cd 8000 	str.w	r8, [sp]
 8007538:	463b      	mov	r3, r7
 800753a:	aa03      	add	r2, sp, #12
 800753c:	4621      	mov	r1, r4
 800753e:	4630      	mov	r0, r6
 8007540:	f7ff fef6 	bl	8007330 <_printf_common>
 8007544:	3001      	adds	r0, #1
 8007546:	d14d      	bne.n	80075e4 <_printf_i+0x1c8>
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	b005      	add	sp, #20
 800754e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007552:	4839      	ldr	r0, [pc, #228]	; (8007638 <_printf_i+0x21c>)
 8007554:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007558:	6813      	ldr	r3, [r2, #0]
 800755a:	6821      	ldr	r1, [r4, #0]
 800755c:	1d1d      	adds	r5, r3, #4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6015      	str	r5, [r2, #0]
 8007562:	060a      	lsls	r2, r1, #24
 8007564:	d50b      	bpl.n	800757e <_printf_i+0x162>
 8007566:	07ca      	lsls	r2, r1, #31
 8007568:	bf44      	itt	mi
 800756a:	f041 0120 	orrmi.w	r1, r1, #32
 800756e:	6021      	strmi	r1, [r4, #0]
 8007570:	b91b      	cbnz	r3, 800757a <_printf_i+0x15e>
 8007572:	6822      	ldr	r2, [r4, #0]
 8007574:	f022 0220 	bic.w	r2, r2, #32
 8007578:	6022      	str	r2, [r4, #0]
 800757a:	2210      	movs	r2, #16
 800757c:	e7b7      	b.n	80074ee <_printf_i+0xd2>
 800757e:	064d      	lsls	r5, r1, #25
 8007580:	bf48      	it	mi
 8007582:	b29b      	uxthmi	r3, r3
 8007584:	e7ef      	b.n	8007566 <_printf_i+0x14a>
 8007586:	4665      	mov	r5, ip
 8007588:	fbb3 f1f2 	udiv	r1, r3, r2
 800758c:	fb02 3311 	mls	r3, r2, r1, r3
 8007590:	5cc3      	ldrb	r3, [r0, r3]
 8007592:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007596:	460b      	mov	r3, r1
 8007598:	2900      	cmp	r1, #0
 800759a:	d1f5      	bne.n	8007588 <_printf_i+0x16c>
 800759c:	e7b9      	b.n	8007512 <_printf_i+0xf6>
 800759e:	6813      	ldr	r3, [r2, #0]
 80075a0:	6825      	ldr	r5, [r4, #0]
 80075a2:	6961      	ldr	r1, [r4, #20]
 80075a4:	1d18      	adds	r0, r3, #4
 80075a6:	6010      	str	r0, [r2, #0]
 80075a8:	0628      	lsls	r0, r5, #24
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	d501      	bpl.n	80075b2 <_printf_i+0x196>
 80075ae:	6019      	str	r1, [r3, #0]
 80075b0:	e002      	b.n	80075b8 <_printf_i+0x19c>
 80075b2:	066a      	lsls	r2, r5, #25
 80075b4:	d5fb      	bpl.n	80075ae <_printf_i+0x192>
 80075b6:	8019      	strh	r1, [r3, #0]
 80075b8:	2300      	movs	r3, #0
 80075ba:	6123      	str	r3, [r4, #16]
 80075bc:	4665      	mov	r5, ip
 80075be:	e7b9      	b.n	8007534 <_printf_i+0x118>
 80075c0:	6813      	ldr	r3, [r2, #0]
 80075c2:	1d19      	adds	r1, r3, #4
 80075c4:	6011      	str	r1, [r2, #0]
 80075c6:	681d      	ldr	r5, [r3, #0]
 80075c8:	6862      	ldr	r2, [r4, #4]
 80075ca:	2100      	movs	r1, #0
 80075cc:	4628      	mov	r0, r5
 80075ce:	f7f8 fe27 	bl	8000220 <memchr>
 80075d2:	b108      	cbz	r0, 80075d8 <_printf_i+0x1bc>
 80075d4:	1b40      	subs	r0, r0, r5
 80075d6:	6060      	str	r0, [r4, #4]
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	6123      	str	r3, [r4, #16]
 80075dc:	2300      	movs	r3, #0
 80075de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e2:	e7a7      	b.n	8007534 <_printf_i+0x118>
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	462a      	mov	r2, r5
 80075e8:	4639      	mov	r1, r7
 80075ea:	4630      	mov	r0, r6
 80075ec:	47c0      	blx	r8
 80075ee:	3001      	adds	r0, #1
 80075f0:	d0aa      	beq.n	8007548 <_printf_i+0x12c>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	079b      	lsls	r3, r3, #30
 80075f6:	d413      	bmi.n	8007620 <_printf_i+0x204>
 80075f8:	68e0      	ldr	r0, [r4, #12]
 80075fa:	9b03      	ldr	r3, [sp, #12]
 80075fc:	4298      	cmp	r0, r3
 80075fe:	bfb8      	it	lt
 8007600:	4618      	movlt	r0, r3
 8007602:	e7a3      	b.n	800754c <_printf_i+0x130>
 8007604:	2301      	movs	r3, #1
 8007606:	464a      	mov	r2, r9
 8007608:	4639      	mov	r1, r7
 800760a:	4630      	mov	r0, r6
 800760c:	47c0      	blx	r8
 800760e:	3001      	adds	r0, #1
 8007610:	d09a      	beq.n	8007548 <_printf_i+0x12c>
 8007612:	3501      	adds	r5, #1
 8007614:	68e3      	ldr	r3, [r4, #12]
 8007616:	9a03      	ldr	r2, [sp, #12]
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	42ab      	cmp	r3, r5
 800761c:	dcf2      	bgt.n	8007604 <_printf_i+0x1e8>
 800761e:	e7eb      	b.n	80075f8 <_printf_i+0x1dc>
 8007620:	2500      	movs	r5, #0
 8007622:	f104 0919 	add.w	r9, r4, #25
 8007626:	e7f5      	b.n	8007614 <_printf_i+0x1f8>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1ac      	bne.n	8007586 <_printf_i+0x16a>
 800762c:	7803      	ldrb	r3, [r0, #0]
 800762e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007632:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007636:	e76c      	b.n	8007512 <_printf_i+0xf6>
 8007638:	0800b148 	.word	0x0800b148
 800763c:	0800b159 	.word	0x0800b159

08007640 <_scanf_float>:
 8007640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	469a      	mov	sl, r3
 8007646:	688b      	ldr	r3, [r1, #8]
 8007648:	4616      	mov	r6, r2
 800764a:	1e5a      	subs	r2, r3, #1
 800764c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007650:	b087      	sub	sp, #28
 8007652:	bf83      	ittte	hi
 8007654:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007658:	189b      	addhi	r3, r3, r2
 800765a:	9301      	strhi	r3, [sp, #4]
 800765c:	2300      	movls	r3, #0
 800765e:	bf86      	itte	hi
 8007660:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007664:	608b      	strhi	r3, [r1, #8]
 8007666:	9301      	strls	r3, [sp, #4]
 8007668:	680b      	ldr	r3, [r1, #0]
 800766a:	4688      	mov	r8, r1
 800766c:	f04f 0b00 	mov.w	fp, #0
 8007670:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007674:	f848 3b1c 	str.w	r3, [r8], #28
 8007678:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800767c:	4607      	mov	r7, r0
 800767e:	460c      	mov	r4, r1
 8007680:	4645      	mov	r5, r8
 8007682:	465a      	mov	r2, fp
 8007684:	46d9      	mov	r9, fp
 8007686:	f8cd b008 	str.w	fp, [sp, #8]
 800768a:	68a1      	ldr	r1, [r4, #8]
 800768c:	b181      	cbz	r1, 80076b0 <_scanf_float+0x70>
 800768e:	6833      	ldr	r3, [r6, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b49      	cmp	r3, #73	; 0x49
 8007694:	d071      	beq.n	800777a <_scanf_float+0x13a>
 8007696:	d84d      	bhi.n	8007734 <_scanf_float+0xf4>
 8007698:	2b39      	cmp	r3, #57	; 0x39
 800769a:	d840      	bhi.n	800771e <_scanf_float+0xde>
 800769c:	2b31      	cmp	r3, #49	; 0x31
 800769e:	f080 8088 	bcs.w	80077b2 <_scanf_float+0x172>
 80076a2:	2b2d      	cmp	r3, #45	; 0x2d
 80076a4:	f000 8090 	beq.w	80077c8 <_scanf_float+0x188>
 80076a8:	d815      	bhi.n	80076d6 <_scanf_float+0x96>
 80076aa:	2b2b      	cmp	r3, #43	; 0x2b
 80076ac:	f000 808c 	beq.w	80077c8 <_scanf_float+0x188>
 80076b0:	f1b9 0f00 	cmp.w	r9, #0
 80076b4:	d003      	beq.n	80076be <_scanf_float+0x7e>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	3a01      	subs	r2, #1
 80076c0:	2a01      	cmp	r2, #1
 80076c2:	f200 80ea 	bhi.w	800789a <_scanf_float+0x25a>
 80076c6:	4545      	cmp	r5, r8
 80076c8:	f200 80dc 	bhi.w	8007884 <_scanf_float+0x244>
 80076cc:	2601      	movs	r6, #1
 80076ce:	4630      	mov	r0, r6
 80076d0:	b007      	add	sp, #28
 80076d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d6:	2b2e      	cmp	r3, #46	; 0x2e
 80076d8:	f000 809f 	beq.w	800781a <_scanf_float+0x1da>
 80076dc:	2b30      	cmp	r3, #48	; 0x30
 80076de:	d1e7      	bne.n	80076b0 <_scanf_float+0x70>
 80076e0:	6820      	ldr	r0, [r4, #0]
 80076e2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80076e6:	d064      	beq.n	80077b2 <_scanf_float+0x172>
 80076e8:	9b01      	ldr	r3, [sp, #4]
 80076ea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80076ee:	6020      	str	r0, [r4, #0]
 80076f0:	f109 0901 	add.w	r9, r9, #1
 80076f4:	b11b      	cbz	r3, 80076fe <_scanf_float+0xbe>
 80076f6:	3b01      	subs	r3, #1
 80076f8:	3101      	adds	r1, #1
 80076fa:	9301      	str	r3, [sp, #4]
 80076fc:	60a1      	str	r1, [r4, #8]
 80076fe:	68a3      	ldr	r3, [r4, #8]
 8007700:	3b01      	subs	r3, #1
 8007702:	60a3      	str	r3, [r4, #8]
 8007704:	6923      	ldr	r3, [r4, #16]
 8007706:	3301      	adds	r3, #1
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	6873      	ldr	r3, [r6, #4]
 800770c:	3b01      	subs	r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	6073      	str	r3, [r6, #4]
 8007712:	f340 80ac 	ble.w	800786e <_scanf_float+0x22e>
 8007716:	6833      	ldr	r3, [r6, #0]
 8007718:	3301      	adds	r3, #1
 800771a:	6033      	str	r3, [r6, #0]
 800771c:	e7b5      	b.n	800768a <_scanf_float+0x4a>
 800771e:	2b45      	cmp	r3, #69	; 0x45
 8007720:	f000 8085 	beq.w	800782e <_scanf_float+0x1ee>
 8007724:	2b46      	cmp	r3, #70	; 0x46
 8007726:	d06a      	beq.n	80077fe <_scanf_float+0x1be>
 8007728:	2b41      	cmp	r3, #65	; 0x41
 800772a:	d1c1      	bne.n	80076b0 <_scanf_float+0x70>
 800772c:	2a01      	cmp	r2, #1
 800772e:	d1bf      	bne.n	80076b0 <_scanf_float+0x70>
 8007730:	2202      	movs	r2, #2
 8007732:	e046      	b.n	80077c2 <_scanf_float+0x182>
 8007734:	2b65      	cmp	r3, #101	; 0x65
 8007736:	d07a      	beq.n	800782e <_scanf_float+0x1ee>
 8007738:	d818      	bhi.n	800776c <_scanf_float+0x12c>
 800773a:	2b54      	cmp	r3, #84	; 0x54
 800773c:	d066      	beq.n	800780c <_scanf_float+0x1cc>
 800773e:	d811      	bhi.n	8007764 <_scanf_float+0x124>
 8007740:	2b4e      	cmp	r3, #78	; 0x4e
 8007742:	d1b5      	bne.n	80076b0 <_scanf_float+0x70>
 8007744:	2a00      	cmp	r2, #0
 8007746:	d146      	bne.n	80077d6 <_scanf_float+0x196>
 8007748:	f1b9 0f00 	cmp.w	r9, #0
 800774c:	d145      	bne.n	80077da <_scanf_float+0x19a>
 800774e:	6821      	ldr	r1, [r4, #0]
 8007750:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007754:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007758:	d13f      	bne.n	80077da <_scanf_float+0x19a>
 800775a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800775e:	6021      	str	r1, [r4, #0]
 8007760:	2201      	movs	r2, #1
 8007762:	e02e      	b.n	80077c2 <_scanf_float+0x182>
 8007764:	2b59      	cmp	r3, #89	; 0x59
 8007766:	d01e      	beq.n	80077a6 <_scanf_float+0x166>
 8007768:	2b61      	cmp	r3, #97	; 0x61
 800776a:	e7de      	b.n	800772a <_scanf_float+0xea>
 800776c:	2b6e      	cmp	r3, #110	; 0x6e
 800776e:	d0e9      	beq.n	8007744 <_scanf_float+0x104>
 8007770:	d815      	bhi.n	800779e <_scanf_float+0x15e>
 8007772:	2b66      	cmp	r3, #102	; 0x66
 8007774:	d043      	beq.n	80077fe <_scanf_float+0x1be>
 8007776:	2b69      	cmp	r3, #105	; 0x69
 8007778:	d19a      	bne.n	80076b0 <_scanf_float+0x70>
 800777a:	f1bb 0f00 	cmp.w	fp, #0
 800777e:	d138      	bne.n	80077f2 <_scanf_float+0x1b2>
 8007780:	f1b9 0f00 	cmp.w	r9, #0
 8007784:	d197      	bne.n	80076b6 <_scanf_float+0x76>
 8007786:	6821      	ldr	r1, [r4, #0]
 8007788:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800778c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007790:	d195      	bne.n	80076be <_scanf_float+0x7e>
 8007792:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007796:	6021      	str	r1, [r4, #0]
 8007798:	f04f 0b01 	mov.w	fp, #1
 800779c:	e011      	b.n	80077c2 <_scanf_float+0x182>
 800779e:	2b74      	cmp	r3, #116	; 0x74
 80077a0:	d034      	beq.n	800780c <_scanf_float+0x1cc>
 80077a2:	2b79      	cmp	r3, #121	; 0x79
 80077a4:	d184      	bne.n	80076b0 <_scanf_float+0x70>
 80077a6:	f1bb 0f07 	cmp.w	fp, #7
 80077aa:	d181      	bne.n	80076b0 <_scanf_float+0x70>
 80077ac:	f04f 0b08 	mov.w	fp, #8
 80077b0:	e007      	b.n	80077c2 <_scanf_float+0x182>
 80077b2:	eb12 0f0b 	cmn.w	r2, fp
 80077b6:	f47f af7b 	bne.w	80076b0 <_scanf_float+0x70>
 80077ba:	6821      	ldr	r1, [r4, #0]
 80077bc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80077c0:	6021      	str	r1, [r4, #0]
 80077c2:	702b      	strb	r3, [r5, #0]
 80077c4:	3501      	adds	r5, #1
 80077c6:	e79a      	b.n	80076fe <_scanf_float+0xbe>
 80077c8:	6821      	ldr	r1, [r4, #0]
 80077ca:	0608      	lsls	r0, r1, #24
 80077cc:	f57f af70 	bpl.w	80076b0 <_scanf_float+0x70>
 80077d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80077d4:	e7f4      	b.n	80077c0 <_scanf_float+0x180>
 80077d6:	2a02      	cmp	r2, #2
 80077d8:	d047      	beq.n	800786a <_scanf_float+0x22a>
 80077da:	f1bb 0f01 	cmp.w	fp, #1
 80077de:	d003      	beq.n	80077e8 <_scanf_float+0x1a8>
 80077e0:	f1bb 0f04 	cmp.w	fp, #4
 80077e4:	f47f af64 	bne.w	80076b0 <_scanf_float+0x70>
 80077e8:	f10b 0b01 	add.w	fp, fp, #1
 80077ec:	fa5f fb8b 	uxtb.w	fp, fp
 80077f0:	e7e7      	b.n	80077c2 <_scanf_float+0x182>
 80077f2:	f1bb 0f03 	cmp.w	fp, #3
 80077f6:	d0f7      	beq.n	80077e8 <_scanf_float+0x1a8>
 80077f8:	f1bb 0f05 	cmp.w	fp, #5
 80077fc:	e7f2      	b.n	80077e4 <_scanf_float+0x1a4>
 80077fe:	f1bb 0f02 	cmp.w	fp, #2
 8007802:	f47f af55 	bne.w	80076b0 <_scanf_float+0x70>
 8007806:	f04f 0b03 	mov.w	fp, #3
 800780a:	e7da      	b.n	80077c2 <_scanf_float+0x182>
 800780c:	f1bb 0f06 	cmp.w	fp, #6
 8007810:	f47f af4e 	bne.w	80076b0 <_scanf_float+0x70>
 8007814:	f04f 0b07 	mov.w	fp, #7
 8007818:	e7d3      	b.n	80077c2 <_scanf_float+0x182>
 800781a:	6821      	ldr	r1, [r4, #0]
 800781c:	0588      	lsls	r0, r1, #22
 800781e:	f57f af47 	bpl.w	80076b0 <_scanf_float+0x70>
 8007822:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007826:	6021      	str	r1, [r4, #0]
 8007828:	f8cd 9008 	str.w	r9, [sp, #8]
 800782c:	e7c9      	b.n	80077c2 <_scanf_float+0x182>
 800782e:	6821      	ldr	r1, [r4, #0]
 8007830:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007834:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007838:	d006      	beq.n	8007848 <_scanf_float+0x208>
 800783a:	0548      	lsls	r0, r1, #21
 800783c:	f57f af38 	bpl.w	80076b0 <_scanf_float+0x70>
 8007840:	f1b9 0f00 	cmp.w	r9, #0
 8007844:	f43f af3b 	beq.w	80076be <_scanf_float+0x7e>
 8007848:	0588      	lsls	r0, r1, #22
 800784a:	bf58      	it	pl
 800784c:	9802      	ldrpl	r0, [sp, #8]
 800784e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007852:	bf58      	it	pl
 8007854:	eba9 0000 	subpl.w	r0, r9, r0
 8007858:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800785c:	bf58      	it	pl
 800785e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007862:	6021      	str	r1, [r4, #0]
 8007864:	f04f 0900 	mov.w	r9, #0
 8007868:	e7ab      	b.n	80077c2 <_scanf_float+0x182>
 800786a:	2203      	movs	r2, #3
 800786c:	e7a9      	b.n	80077c2 <_scanf_float+0x182>
 800786e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007872:	9205      	str	r2, [sp, #20]
 8007874:	4631      	mov	r1, r6
 8007876:	4638      	mov	r0, r7
 8007878:	4798      	blx	r3
 800787a:	9a05      	ldr	r2, [sp, #20]
 800787c:	2800      	cmp	r0, #0
 800787e:	f43f af04 	beq.w	800768a <_scanf_float+0x4a>
 8007882:	e715      	b.n	80076b0 <_scanf_float+0x70>
 8007884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007888:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800788c:	4632      	mov	r2, r6
 800788e:	4638      	mov	r0, r7
 8007890:	4798      	blx	r3
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	3b01      	subs	r3, #1
 8007896:	6123      	str	r3, [r4, #16]
 8007898:	e715      	b.n	80076c6 <_scanf_float+0x86>
 800789a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800789e:	2b06      	cmp	r3, #6
 80078a0:	d80a      	bhi.n	80078b8 <_scanf_float+0x278>
 80078a2:	f1bb 0f02 	cmp.w	fp, #2
 80078a6:	d968      	bls.n	800797a <_scanf_float+0x33a>
 80078a8:	f1ab 0b03 	sub.w	fp, fp, #3
 80078ac:	fa5f fb8b 	uxtb.w	fp, fp
 80078b0:	eba5 0b0b 	sub.w	fp, r5, fp
 80078b4:	455d      	cmp	r5, fp
 80078b6:	d14b      	bne.n	8007950 <_scanf_float+0x310>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	05da      	lsls	r2, r3, #23
 80078bc:	d51f      	bpl.n	80078fe <_scanf_float+0x2be>
 80078be:	055b      	lsls	r3, r3, #21
 80078c0:	d468      	bmi.n	8007994 <_scanf_float+0x354>
 80078c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80078c6:	6923      	ldr	r3, [r4, #16]
 80078c8:	2965      	cmp	r1, #101	; 0x65
 80078ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ce:	f105 3bff 	add.w	fp, r5, #4294967295
 80078d2:	6123      	str	r3, [r4, #16]
 80078d4:	d00d      	beq.n	80078f2 <_scanf_float+0x2b2>
 80078d6:	2945      	cmp	r1, #69	; 0x45
 80078d8:	d00b      	beq.n	80078f2 <_scanf_float+0x2b2>
 80078da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078de:	4632      	mov	r2, r6
 80078e0:	4638      	mov	r0, r7
 80078e2:	4798      	blx	r3
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	f1a5 0b02 	sub.w	fp, r5, #2
 80078f0:	6123      	str	r3, [r4, #16]
 80078f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078f6:	4632      	mov	r2, r6
 80078f8:	4638      	mov	r0, r7
 80078fa:	4798      	blx	r3
 80078fc:	465d      	mov	r5, fp
 80078fe:	6826      	ldr	r6, [r4, #0]
 8007900:	f016 0610 	ands.w	r6, r6, #16
 8007904:	d17a      	bne.n	80079fc <_scanf_float+0x3bc>
 8007906:	702e      	strb	r6, [r5, #0]
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800790e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007912:	d142      	bne.n	800799a <_scanf_float+0x35a>
 8007914:	9b02      	ldr	r3, [sp, #8]
 8007916:	eba9 0303 	sub.w	r3, r9, r3
 800791a:	425a      	negs	r2, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d149      	bne.n	80079b4 <_scanf_float+0x374>
 8007920:	2200      	movs	r2, #0
 8007922:	4641      	mov	r1, r8
 8007924:	4638      	mov	r0, r7
 8007926:	f000 fecf 	bl	80086c8 <_strtod_r>
 800792a:	6825      	ldr	r5, [r4, #0]
 800792c:	f8da 3000 	ldr.w	r3, [sl]
 8007930:	f015 0f02 	tst.w	r5, #2
 8007934:	f103 0204 	add.w	r2, r3, #4
 8007938:	ec59 8b10 	vmov	r8, r9, d0
 800793c:	f8ca 2000 	str.w	r2, [sl]
 8007940:	d043      	beq.n	80079ca <_scanf_float+0x38a>
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	e9c3 8900 	strd	r8, r9, [r3]
 8007948:	68e3      	ldr	r3, [r4, #12]
 800794a:	3301      	adds	r3, #1
 800794c:	60e3      	str	r3, [r4, #12]
 800794e:	e6be      	b.n	80076ce <_scanf_float+0x8e>
 8007950:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007954:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007958:	4632      	mov	r2, r6
 800795a:	4638      	mov	r0, r7
 800795c:	4798      	blx	r3
 800795e:	6923      	ldr	r3, [r4, #16]
 8007960:	3b01      	subs	r3, #1
 8007962:	6123      	str	r3, [r4, #16]
 8007964:	e7a6      	b.n	80078b4 <_scanf_float+0x274>
 8007966:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800796a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800796e:	4632      	mov	r2, r6
 8007970:	4638      	mov	r0, r7
 8007972:	4798      	blx	r3
 8007974:	6923      	ldr	r3, [r4, #16]
 8007976:	3b01      	subs	r3, #1
 8007978:	6123      	str	r3, [r4, #16]
 800797a:	4545      	cmp	r5, r8
 800797c:	d8f3      	bhi.n	8007966 <_scanf_float+0x326>
 800797e:	e6a5      	b.n	80076cc <_scanf_float+0x8c>
 8007980:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007984:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007988:	4632      	mov	r2, r6
 800798a:	4638      	mov	r0, r7
 800798c:	4798      	blx	r3
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	3b01      	subs	r3, #1
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	4545      	cmp	r5, r8
 8007996:	d8f3      	bhi.n	8007980 <_scanf_float+0x340>
 8007998:	e698      	b.n	80076cc <_scanf_float+0x8c>
 800799a:	9b03      	ldr	r3, [sp, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0bf      	beq.n	8007920 <_scanf_float+0x2e0>
 80079a0:	9904      	ldr	r1, [sp, #16]
 80079a2:	230a      	movs	r3, #10
 80079a4:	4632      	mov	r2, r6
 80079a6:	3101      	adds	r1, #1
 80079a8:	4638      	mov	r0, r7
 80079aa:	f000 ff19 	bl	80087e0 <_strtol_r>
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	9d04      	ldr	r5, [sp, #16]
 80079b2:	1ac2      	subs	r2, r0, r3
 80079b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80079b8:	429d      	cmp	r5, r3
 80079ba:	bf28      	it	cs
 80079bc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80079c0:	490f      	ldr	r1, [pc, #60]	; (8007a00 <_scanf_float+0x3c0>)
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 f824 	bl	8007a10 <siprintf>
 80079c8:	e7aa      	b.n	8007920 <_scanf_float+0x2e0>
 80079ca:	f015 0504 	ands.w	r5, r5, #4
 80079ce:	d1b8      	bne.n	8007942 <_scanf_float+0x302>
 80079d0:	681f      	ldr	r7, [r3, #0]
 80079d2:	ee10 2a10 	vmov	r2, s0
 80079d6:	464b      	mov	r3, r9
 80079d8:	ee10 0a10 	vmov	r0, s0
 80079dc:	4649      	mov	r1, r9
 80079de:	f7f9 f8c5 	bl	8000b6c <__aeabi_dcmpun>
 80079e2:	b128      	cbz	r0, 80079f0 <_scanf_float+0x3b0>
 80079e4:	4628      	mov	r0, r5
 80079e6:	f000 f80d 	bl	8007a04 <nanf>
 80079ea:	ed87 0a00 	vstr	s0, [r7]
 80079ee:	e7ab      	b.n	8007948 <_scanf_float+0x308>
 80079f0:	4640      	mov	r0, r8
 80079f2:	4649      	mov	r1, r9
 80079f4:	f7f9 f918 	bl	8000c28 <__aeabi_d2f>
 80079f8:	6038      	str	r0, [r7, #0]
 80079fa:	e7a5      	b.n	8007948 <_scanf_float+0x308>
 80079fc:	2600      	movs	r6, #0
 80079fe:	e666      	b.n	80076ce <_scanf_float+0x8e>
 8007a00:	0800b16a 	.word	0x0800b16a

08007a04 <nanf>:
 8007a04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007a0c <nanf+0x8>
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	7fc00000 	.word	0x7fc00000

08007a10 <siprintf>:
 8007a10:	b40e      	push	{r1, r2, r3}
 8007a12:	b500      	push	{lr}
 8007a14:	b09c      	sub	sp, #112	; 0x70
 8007a16:	ab1d      	add	r3, sp, #116	; 0x74
 8007a18:	9002      	str	r0, [sp, #8]
 8007a1a:	9006      	str	r0, [sp, #24]
 8007a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a20:	4809      	ldr	r0, [pc, #36]	; (8007a48 <siprintf+0x38>)
 8007a22:	9107      	str	r1, [sp, #28]
 8007a24:	9104      	str	r1, [sp, #16]
 8007a26:	4909      	ldr	r1, [pc, #36]	; (8007a4c <siprintf+0x3c>)
 8007a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2c:	9105      	str	r1, [sp, #20]
 8007a2e:	6800      	ldr	r0, [r0, #0]
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	a902      	add	r1, sp, #8
 8007a34:	f002 fdc8 	bl	800a5c8 <_svfiprintf_r>
 8007a38:	9b02      	ldr	r3, [sp, #8]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	701a      	strb	r2, [r3, #0]
 8007a3e:	b01c      	add	sp, #112	; 0x70
 8007a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a44:	b003      	add	sp, #12
 8007a46:	4770      	bx	lr
 8007a48:	20000050 	.word	0x20000050
 8007a4c:	ffff0208 	.word	0xffff0208

08007a50 <siscanf>:
 8007a50:	b40e      	push	{r1, r2, r3}
 8007a52:	b530      	push	{r4, r5, lr}
 8007a54:	b09c      	sub	sp, #112	; 0x70
 8007a56:	ac1f      	add	r4, sp, #124	; 0x7c
 8007a58:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007a5c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007a60:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007a64:	9002      	str	r0, [sp, #8]
 8007a66:	9006      	str	r0, [sp, #24]
 8007a68:	f7f8 fbd2 	bl	8000210 <strlen>
 8007a6c:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <siscanf+0x4c>)
 8007a6e:	9003      	str	r0, [sp, #12]
 8007a70:	9007      	str	r0, [sp, #28]
 8007a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a74:	480a      	ldr	r0, [pc, #40]	; (8007aa0 <siscanf+0x50>)
 8007a76:	9401      	str	r4, [sp, #4]
 8007a78:	2300      	movs	r3, #0
 8007a7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a7c:	9314      	str	r3, [sp, #80]	; 0x50
 8007a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a86:	462a      	mov	r2, r5
 8007a88:	4623      	mov	r3, r4
 8007a8a:	a902      	add	r1, sp, #8
 8007a8c:	6800      	ldr	r0, [r0, #0]
 8007a8e:	f002 feed 	bl	800a86c <__ssvfiscanf_r>
 8007a92:	b01c      	add	sp, #112	; 0x70
 8007a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a98:	b003      	add	sp, #12
 8007a9a:	4770      	bx	lr
 8007a9c:	08007aa5 	.word	0x08007aa5
 8007aa0:	20000050 	.word	0x20000050

08007aa4 <__seofread>:
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	4770      	bx	lr

08007aa8 <sulp>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	4604      	mov	r4, r0
 8007aac:	460d      	mov	r5, r1
 8007aae:	ec45 4b10 	vmov	d0, r4, r5
 8007ab2:	4616      	mov	r6, r2
 8007ab4:	f002 fb44 	bl	800a140 <__ulp>
 8007ab8:	ec51 0b10 	vmov	r0, r1, d0
 8007abc:	b17e      	cbz	r6, 8007ade <sulp+0x36>
 8007abe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007ac2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	dd09      	ble.n	8007ade <sulp+0x36>
 8007aca:	051b      	lsls	r3, r3, #20
 8007acc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007ad0:	2400      	movs	r4, #0
 8007ad2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	462b      	mov	r3, r5
 8007ada:	f7f8 fdad 	bl	8000638 <__aeabi_dmul>
 8007ade:	bd70      	pop	{r4, r5, r6, pc}

08007ae0 <_strtod_l>:
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	461f      	mov	r7, r3
 8007ae6:	b0a1      	sub	sp, #132	; 0x84
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4681      	mov	r9, r0
 8007aec:	4638      	mov	r0, r7
 8007aee:	460e      	mov	r6, r1
 8007af0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007af2:	931c      	str	r3, [sp, #112]	; 0x70
 8007af4:	f002 f824 	bl	8009b40 <__localeconv_l>
 8007af8:	4680      	mov	r8, r0
 8007afa:	6800      	ldr	r0, [r0, #0]
 8007afc:	f7f8 fb88 	bl	8000210 <strlen>
 8007b00:	f04f 0a00 	mov.w	sl, #0
 8007b04:	4604      	mov	r4, r0
 8007b06:	f04f 0b00 	mov.w	fp, #0
 8007b0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8007b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b0e:	781a      	ldrb	r2, [r3, #0]
 8007b10:	2a0d      	cmp	r2, #13
 8007b12:	d832      	bhi.n	8007b7a <_strtod_l+0x9a>
 8007b14:	2a09      	cmp	r2, #9
 8007b16:	d236      	bcs.n	8007b86 <_strtod_l+0xa6>
 8007b18:	2a00      	cmp	r2, #0
 8007b1a:	d03e      	beq.n	8007b9a <_strtod_l+0xba>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	930d      	str	r3, [sp, #52]	; 0x34
 8007b20:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007b22:	782b      	ldrb	r3, [r5, #0]
 8007b24:	2b30      	cmp	r3, #48	; 0x30
 8007b26:	f040 80ac 	bne.w	8007c82 <_strtod_l+0x1a2>
 8007b2a:	786b      	ldrb	r3, [r5, #1]
 8007b2c:	2b58      	cmp	r3, #88	; 0x58
 8007b2e:	d001      	beq.n	8007b34 <_strtod_l+0x54>
 8007b30:	2b78      	cmp	r3, #120	; 0x78
 8007b32:	d167      	bne.n	8007c04 <_strtod_l+0x124>
 8007b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	ab1c      	add	r3, sp, #112	; 0x70
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	9702      	str	r7, [sp, #8]
 8007b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8007b40:	4a88      	ldr	r2, [pc, #544]	; (8007d64 <_strtod_l+0x284>)
 8007b42:	a91b      	add	r1, sp, #108	; 0x6c
 8007b44:	4648      	mov	r0, r9
 8007b46:	f001 fd12 	bl	800956e <__gethex>
 8007b4a:	f010 0407 	ands.w	r4, r0, #7
 8007b4e:	4606      	mov	r6, r0
 8007b50:	d005      	beq.n	8007b5e <_strtod_l+0x7e>
 8007b52:	2c06      	cmp	r4, #6
 8007b54:	d12b      	bne.n	8007bae <_strtod_l+0xce>
 8007b56:	3501      	adds	r5, #1
 8007b58:	2300      	movs	r3, #0
 8007b5a:	951b      	str	r5, [sp, #108]	; 0x6c
 8007b5c:	930d      	str	r3, [sp, #52]	; 0x34
 8007b5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f040 859a 	bne.w	800869a <_strtod_l+0xbba>
 8007b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b68:	b1e3      	cbz	r3, 8007ba4 <_strtod_l+0xc4>
 8007b6a:	4652      	mov	r2, sl
 8007b6c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b70:	ec43 2b10 	vmov	d0, r2, r3
 8007b74:	b021      	add	sp, #132	; 0x84
 8007b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7a:	2a2b      	cmp	r2, #43	; 0x2b
 8007b7c:	d015      	beq.n	8007baa <_strtod_l+0xca>
 8007b7e:	2a2d      	cmp	r2, #45	; 0x2d
 8007b80:	d004      	beq.n	8007b8c <_strtod_l+0xac>
 8007b82:	2a20      	cmp	r2, #32
 8007b84:	d1ca      	bne.n	8007b1c <_strtod_l+0x3c>
 8007b86:	3301      	adds	r3, #1
 8007b88:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b8a:	e7bf      	b.n	8007b0c <_strtod_l+0x2c>
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	920d      	str	r2, [sp, #52]	; 0x34
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b94:	785b      	ldrb	r3, [r3, #1]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1c2      	bne.n	8007b20 <_strtod_l+0x40>
 8007b9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b9c:	961b      	str	r6, [sp, #108]	; 0x6c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f040 8579 	bne.w	8008696 <_strtod_l+0xbb6>
 8007ba4:	4652      	mov	r2, sl
 8007ba6:	465b      	mov	r3, fp
 8007ba8:	e7e2      	b.n	8007b70 <_strtod_l+0x90>
 8007baa:	2200      	movs	r2, #0
 8007bac:	e7ef      	b.n	8007b8e <_strtod_l+0xae>
 8007bae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007bb0:	b13a      	cbz	r2, 8007bc2 <_strtod_l+0xe2>
 8007bb2:	2135      	movs	r1, #53	; 0x35
 8007bb4:	a81e      	add	r0, sp, #120	; 0x78
 8007bb6:	f002 fbbb 	bl	800a330 <__copybits>
 8007bba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007bbc:	4648      	mov	r0, r9
 8007bbe:	f002 f828 	bl	8009c12 <_Bfree>
 8007bc2:	3c01      	subs	r4, #1
 8007bc4:	2c04      	cmp	r4, #4
 8007bc6:	d806      	bhi.n	8007bd6 <_strtod_l+0xf6>
 8007bc8:	e8df f004 	tbb	[pc, r4]
 8007bcc:	1714030a 	.word	0x1714030a
 8007bd0:	0a          	.byte	0x0a
 8007bd1:	00          	.byte	0x00
 8007bd2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007bd6:	0730      	lsls	r0, r6, #28
 8007bd8:	d5c1      	bpl.n	8007b5e <_strtod_l+0x7e>
 8007bda:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007bde:	e7be      	b.n	8007b5e <_strtod_l+0x7e>
 8007be0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007be4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007be6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007bea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007bee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007bf2:	e7f0      	b.n	8007bd6 <_strtod_l+0xf6>
 8007bf4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007d68 <_strtod_l+0x288>
 8007bf8:	e7ed      	b.n	8007bd6 <_strtod_l+0xf6>
 8007bfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007bfe:	f04f 3aff 	mov.w	sl, #4294967295
 8007c02:	e7e8      	b.n	8007bd6 <_strtod_l+0xf6>
 8007c04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c0a:	785b      	ldrb	r3, [r3, #1]
 8007c0c:	2b30      	cmp	r3, #48	; 0x30
 8007c0e:	d0f9      	beq.n	8007c04 <_strtod_l+0x124>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0a4      	beq.n	8007b5e <_strtod_l+0x7e>
 8007c14:	2301      	movs	r3, #1
 8007c16:	2500      	movs	r5, #0
 8007c18:	9306      	str	r3, [sp, #24]
 8007c1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c1c:	9308      	str	r3, [sp, #32]
 8007c1e:	9507      	str	r5, [sp, #28]
 8007c20:	9505      	str	r5, [sp, #20]
 8007c22:	220a      	movs	r2, #10
 8007c24:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007c26:	7807      	ldrb	r7, [r0, #0]
 8007c28:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007c2c:	b2d9      	uxtb	r1, r3
 8007c2e:	2909      	cmp	r1, #9
 8007c30:	d929      	bls.n	8007c86 <_strtod_l+0x1a6>
 8007c32:	4622      	mov	r2, r4
 8007c34:	f8d8 1000 	ldr.w	r1, [r8]
 8007c38:	f003 f902 	bl	800ae40 <strncmp>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d031      	beq.n	8007ca4 <_strtod_l+0x1c4>
 8007c40:	2000      	movs	r0, #0
 8007c42:	9c05      	ldr	r4, [sp, #20]
 8007c44:	9004      	str	r0, [sp, #16]
 8007c46:	463b      	mov	r3, r7
 8007c48:	4602      	mov	r2, r0
 8007c4a:	2b65      	cmp	r3, #101	; 0x65
 8007c4c:	d001      	beq.n	8007c52 <_strtod_l+0x172>
 8007c4e:	2b45      	cmp	r3, #69	; 0x45
 8007c50:	d114      	bne.n	8007c7c <_strtod_l+0x19c>
 8007c52:	b924      	cbnz	r4, 8007c5e <_strtod_l+0x17e>
 8007c54:	b910      	cbnz	r0, 8007c5c <_strtod_l+0x17c>
 8007c56:	9b06      	ldr	r3, [sp, #24]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d09e      	beq.n	8007b9a <_strtod_l+0xba>
 8007c5c:	2400      	movs	r4, #0
 8007c5e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007c60:	1c73      	adds	r3, r6, #1
 8007c62:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c64:	7873      	ldrb	r3, [r6, #1]
 8007c66:	2b2b      	cmp	r3, #43	; 0x2b
 8007c68:	d078      	beq.n	8007d5c <_strtod_l+0x27c>
 8007c6a:	2b2d      	cmp	r3, #45	; 0x2d
 8007c6c:	d070      	beq.n	8007d50 <_strtod_l+0x270>
 8007c6e:	f04f 0c00 	mov.w	ip, #0
 8007c72:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007c76:	2f09      	cmp	r7, #9
 8007c78:	d97c      	bls.n	8007d74 <_strtod_l+0x294>
 8007c7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8007c7c:	f04f 0e00 	mov.w	lr, #0
 8007c80:	e09a      	b.n	8007db8 <_strtod_l+0x2d8>
 8007c82:	2300      	movs	r3, #0
 8007c84:	e7c7      	b.n	8007c16 <_strtod_l+0x136>
 8007c86:	9905      	ldr	r1, [sp, #20]
 8007c88:	2908      	cmp	r1, #8
 8007c8a:	bfdd      	ittte	le
 8007c8c:	9907      	ldrle	r1, [sp, #28]
 8007c8e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c92:	9307      	strle	r3, [sp, #28]
 8007c94:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007c98:	9b05      	ldr	r3, [sp, #20]
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	9305      	str	r3, [sp, #20]
 8007ca0:	901b      	str	r0, [sp, #108]	; 0x6c
 8007ca2:	e7bf      	b.n	8007c24 <_strtod_l+0x144>
 8007ca4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ca6:	191a      	adds	r2, r3, r4
 8007ca8:	921b      	str	r2, [sp, #108]	; 0x6c
 8007caa:	9a05      	ldr	r2, [sp, #20]
 8007cac:	5d1b      	ldrb	r3, [r3, r4]
 8007cae:	2a00      	cmp	r2, #0
 8007cb0:	d037      	beq.n	8007d22 <_strtod_l+0x242>
 8007cb2:	9c05      	ldr	r4, [sp, #20]
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007cba:	2909      	cmp	r1, #9
 8007cbc:	d913      	bls.n	8007ce6 <_strtod_l+0x206>
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	9104      	str	r1, [sp, #16]
 8007cc2:	e7c2      	b.n	8007c4a <_strtod_l+0x16a>
 8007cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	921b      	str	r2, [sp, #108]	; 0x6c
 8007cca:	785b      	ldrb	r3, [r3, #1]
 8007ccc:	3001      	adds	r0, #1
 8007cce:	2b30      	cmp	r3, #48	; 0x30
 8007cd0:	d0f8      	beq.n	8007cc4 <_strtod_l+0x1e4>
 8007cd2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007cd6:	2a08      	cmp	r2, #8
 8007cd8:	f200 84e4 	bhi.w	80086a4 <_strtod_l+0xbc4>
 8007cdc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007cde:	9208      	str	r2, [sp, #32]
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007cea:	f100 0101 	add.w	r1, r0, #1
 8007cee:	d012      	beq.n	8007d16 <_strtod_l+0x236>
 8007cf0:	440a      	add	r2, r1
 8007cf2:	eb00 0c04 	add.w	ip, r0, r4
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	270a      	movs	r7, #10
 8007cfa:	458c      	cmp	ip, r1
 8007cfc:	d113      	bne.n	8007d26 <_strtod_l+0x246>
 8007cfe:	1821      	adds	r1, r4, r0
 8007d00:	2908      	cmp	r1, #8
 8007d02:	f104 0401 	add.w	r4, r4, #1
 8007d06:	4404      	add	r4, r0
 8007d08:	dc19      	bgt.n	8007d3e <_strtod_l+0x25e>
 8007d0a:	9b07      	ldr	r3, [sp, #28]
 8007d0c:	210a      	movs	r1, #10
 8007d0e:	fb01 e303 	mla	r3, r1, r3, lr
 8007d12:	9307      	str	r3, [sp, #28]
 8007d14:	2100      	movs	r1, #0
 8007d16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d18:	1c58      	adds	r0, r3, #1
 8007d1a:	901b      	str	r0, [sp, #108]	; 0x6c
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	4608      	mov	r0, r1
 8007d20:	e7c9      	b.n	8007cb6 <_strtod_l+0x1d6>
 8007d22:	9805      	ldr	r0, [sp, #20]
 8007d24:	e7d3      	b.n	8007cce <_strtod_l+0x1ee>
 8007d26:	2908      	cmp	r1, #8
 8007d28:	f101 0101 	add.w	r1, r1, #1
 8007d2c:	dc03      	bgt.n	8007d36 <_strtod_l+0x256>
 8007d2e:	9b07      	ldr	r3, [sp, #28]
 8007d30:	437b      	muls	r3, r7
 8007d32:	9307      	str	r3, [sp, #28]
 8007d34:	e7e1      	b.n	8007cfa <_strtod_l+0x21a>
 8007d36:	2910      	cmp	r1, #16
 8007d38:	bfd8      	it	le
 8007d3a:	437d      	mulle	r5, r7
 8007d3c:	e7dd      	b.n	8007cfa <_strtod_l+0x21a>
 8007d3e:	2c10      	cmp	r4, #16
 8007d40:	bfdc      	itt	le
 8007d42:	210a      	movle	r1, #10
 8007d44:	fb01 e505 	mlale	r5, r1, r5, lr
 8007d48:	e7e4      	b.n	8007d14 <_strtod_l+0x234>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	9304      	str	r3, [sp, #16]
 8007d4e:	e781      	b.n	8007c54 <_strtod_l+0x174>
 8007d50:	f04f 0c01 	mov.w	ip, #1
 8007d54:	1cb3      	adds	r3, r6, #2
 8007d56:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d58:	78b3      	ldrb	r3, [r6, #2]
 8007d5a:	e78a      	b.n	8007c72 <_strtod_l+0x192>
 8007d5c:	f04f 0c00 	mov.w	ip, #0
 8007d60:	e7f8      	b.n	8007d54 <_strtod_l+0x274>
 8007d62:	bf00      	nop
 8007d64:	0800b170 	.word	0x0800b170
 8007d68:	7ff00000 	.word	0x7ff00000
 8007d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d6e:	1c5f      	adds	r7, r3, #1
 8007d70:	971b      	str	r7, [sp, #108]	; 0x6c
 8007d72:	785b      	ldrb	r3, [r3, #1]
 8007d74:	2b30      	cmp	r3, #48	; 0x30
 8007d76:	d0f9      	beq.n	8007d6c <_strtod_l+0x28c>
 8007d78:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007d7c:	2f08      	cmp	r7, #8
 8007d7e:	f63f af7d 	bhi.w	8007c7c <_strtod_l+0x19c>
 8007d82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007d86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d88:	930a      	str	r3, [sp, #40]	; 0x28
 8007d8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d8c:	1c5f      	adds	r7, r3, #1
 8007d8e:	971b      	str	r7, [sp, #108]	; 0x6c
 8007d90:	785b      	ldrb	r3, [r3, #1]
 8007d92:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007d96:	f1b8 0f09 	cmp.w	r8, #9
 8007d9a:	d937      	bls.n	8007e0c <_strtod_l+0x32c>
 8007d9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d9e:	1a7f      	subs	r7, r7, r1
 8007da0:	2f08      	cmp	r7, #8
 8007da2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007da6:	dc37      	bgt.n	8007e18 <_strtod_l+0x338>
 8007da8:	45be      	cmp	lr, r7
 8007daa:	bfa8      	it	ge
 8007dac:	46be      	movge	lr, r7
 8007dae:	f1bc 0f00 	cmp.w	ip, #0
 8007db2:	d001      	beq.n	8007db8 <_strtod_l+0x2d8>
 8007db4:	f1ce 0e00 	rsb	lr, lr, #0
 8007db8:	2c00      	cmp	r4, #0
 8007dba:	d151      	bne.n	8007e60 <_strtod_l+0x380>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f47f aece 	bne.w	8007b5e <_strtod_l+0x7e>
 8007dc2:	9a06      	ldr	r2, [sp, #24]
 8007dc4:	2a00      	cmp	r2, #0
 8007dc6:	f47f aeca 	bne.w	8007b5e <_strtod_l+0x7e>
 8007dca:	9a04      	ldr	r2, [sp, #16]
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	f47f aee4 	bne.w	8007b9a <_strtod_l+0xba>
 8007dd2:	2b4e      	cmp	r3, #78	; 0x4e
 8007dd4:	d027      	beq.n	8007e26 <_strtod_l+0x346>
 8007dd6:	dc21      	bgt.n	8007e1c <_strtod_l+0x33c>
 8007dd8:	2b49      	cmp	r3, #73	; 0x49
 8007dda:	f47f aede 	bne.w	8007b9a <_strtod_l+0xba>
 8007dde:	49a0      	ldr	r1, [pc, #640]	; (8008060 <_strtod_l+0x580>)
 8007de0:	a81b      	add	r0, sp, #108	; 0x6c
 8007de2:	f001 fdf7 	bl	80099d4 <__match>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f aed7 	beq.w	8007b9a <_strtod_l+0xba>
 8007dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dee:	499d      	ldr	r1, [pc, #628]	; (8008064 <_strtod_l+0x584>)
 8007df0:	3b01      	subs	r3, #1
 8007df2:	a81b      	add	r0, sp, #108	; 0x6c
 8007df4:	931b      	str	r3, [sp, #108]	; 0x6c
 8007df6:	f001 fded 	bl	80099d4 <__match>
 8007dfa:	b910      	cbnz	r0, 8007e02 <_strtod_l+0x322>
 8007dfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dfe:	3301      	adds	r3, #1
 8007e00:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e02:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008078 <_strtod_l+0x598>
 8007e06:	f04f 0a00 	mov.w	sl, #0
 8007e0a:	e6a8      	b.n	8007b5e <_strtod_l+0x7e>
 8007e0c:	210a      	movs	r1, #10
 8007e0e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007e12:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007e16:	e7b8      	b.n	8007d8a <_strtod_l+0x2aa>
 8007e18:	46be      	mov	lr, r7
 8007e1a:	e7c8      	b.n	8007dae <_strtod_l+0x2ce>
 8007e1c:	2b69      	cmp	r3, #105	; 0x69
 8007e1e:	d0de      	beq.n	8007dde <_strtod_l+0x2fe>
 8007e20:	2b6e      	cmp	r3, #110	; 0x6e
 8007e22:	f47f aeba 	bne.w	8007b9a <_strtod_l+0xba>
 8007e26:	4990      	ldr	r1, [pc, #576]	; (8008068 <_strtod_l+0x588>)
 8007e28:	a81b      	add	r0, sp, #108	; 0x6c
 8007e2a:	f001 fdd3 	bl	80099d4 <__match>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	f43f aeb3 	beq.w	8007b9a <_strtod_l+0xba>
 8007e34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b28      	cmp	r3, #40	; 0x28
 8007e3a:	d10e      	bne.n	8007e5a <_strtod_l+0x37a>
 8007e3c:	aa1e      	add	r2, sp, #120	; 0x78
 8007e3e:	498b      	ldr	r1, [pc, #556]	; (800806c <_strtod_l+0x58c>)
 8007e40:	a81b      	add	r0, sp, #108	; 0x6c
 8007e42:	f001 fddb 	bl	80099fc <__hexnan>
 8007e46:	2805      	cmp	r0, #5
 8007e48:	d107      	bne.n	8007e5a <_strtod_l+0x37a>
 8007e4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e4c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007e50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007e54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007e58:	e681      	b.n	8007b5e <_strtod_l+0x7e>
 8007e5a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008080 <_strtod_l+0x5a0>
 8007e5e:	e7d2      	b.n	8007e06 <_strtod_l+0x326>
 8007e60:	ebae 0302 	sub.w	r3, lr, r2
 8007e64:	9306      	str	r3, [sp, #24]
 8007e66:	9b05      	ldr	r3, [sp, #20]
 8007e68:	9807      	ldr	r0, [sp, #28]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	bf08      	it	eq
 8007e6e:	4623      	moveq	r3, r4
 8007e70:	2c10      	cmp	r4, #16
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	46a0      	mov	r8, r4
 8007e76:	bfa8      	it	ge
 8007e78:	f04f 0810 	movge.w	r8, #16
 8007e7c:	f7f8 fb62 	bl	8000544 <__aeabi_ui2d>
 8007e80:	2c09      	cmp	r4, #9
 8007e82:	4682      	mov	sl, r0
 8007e84:	468b      	mov	fp, r1
 8007e86:	dc13      	bgt.n	8007eb0 <_strtod_l+0x3d0>
 8007e88:	9b06      	ldr	r3, [sp, #24]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f43f ae67 	beq.w	8007b5e <_strtod_l+0x7e>
 8007e90:	9b06      	ldr	r3, [sp, #24]
 8007e92:	dd7a      	ble.n	8007f8a <_strtod_l+0x4aa>
 8007e94:	2b16      	cmp	r3, #22
 8007e96:	dc61      	bgt.n	8007f5c <_strtod_l+0x47c>
 8007e98:	4a75      	ldr	r2, [pc, #468]	; (8008070 <_strtod_l+0x590>)
 8007e9a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007e9e:	e9de 0100 	ldrd	r0, r1, [lr]
 8007ea2:	4652      	mov	r2, sl
 8007ea4:	465b      	mov	r3, fp
 8007ea6:	f7f8 fbc7 	bl	8000638 <__aeabi_dmul>
 8007eaa:	4682      	mov	sl, r0
 8007eac:	468b      	mov	fp, r1
 8007eae:	e656      	b.n	8007b5e <_strtod_l+0x7e>
 8007eb0:	4b6f      	ldr	r3, [pc, #444]	; (8008070 <_strtod_l+0x590>)
 8007eb2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007eb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007eba:	f7f8 fbbd 	bl	8000638 <__aeabi_dmul>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	460f      	mov	r7, r1
 8007ec4:	f7f8 fb3e 	bl	8000544 <__aeabi_ui2d>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4630      	mov	r0, r6
 8007ece:	4639      	mov	r1, r7
 8007ed0:	f7f8 f9fc 	bl	80002cc <__adddf3>
 8007ed4:	2c0f      	cmp	r4, #15
 8007ed6:	4682      	mov	sl, r0
 8007ed8:	468b      	mov	fp, r1
 8007eda:	ddd5      	ble.n	8007e88 <_strtod_l+0x3a8>
 8007edc:	9b06      	ldr	r3, [sp, #24]
 8007ede:	eba4 0808 	sub.w	r8, r4, r8
 8007ee2:	4498      	add	r8, r3
 8007ee4:	f1b8 0f00 	cmp.w	r8, #0
 8007ee8:	f340 8096 	ble.w	8008018 <_strtod_l+0x538>
 8007eec:	f018 030f 	ands.w	r3, r8, #15
 8007ef0:	d00a      	beq.n	8007f08 <_strtod_l+0x428>
 8007ef2:	495f      	ldr	r1, [pc, #380]	; (8008070 <_strtod_l+0x590>)
 8007ef4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ef8:	4652      	mov	r2, sl
 8007efa:	465b      	mov	r3, fp
 8007efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f00:	f7f8 fb9a 	bl	8000638 <__aeabi_dmul>
 8007f04:	4682      	mov	sl, r0
 8007f06:	468b      	mov	fp, r1
 8007f08:	f038 080f 	bics.w	r8, r8, #15
 8007f0c:	d073      	beq.n	8007ff6 <_strtod_l+0x516>
 8007f0e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007f12:	dd47      	ble.n	8007fa4 <_strtod_l+0x4c4>
 8007f14:	2400      	movs	r4, #0
 8007f16:	46a0      	mov	r8, r4
 8007f18:	9407      	str	r4, [sp, #28]
 8007f1a:	9405      	str	r4, [sp, #20]
 8007f1c:	2322      	movs	r3, #34	; 0x22
 8007f1e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008078 <_strtod_l+0x598>
 8007f22:	f8c9 3000 	str.w	r3, [r9]
 8007f26:	f04f 0a00 	mov.w	sl, #0
 8007f2a:	9b07      	ldr	r3, [sp, #28]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f43f ae16 	beq.w	8007b5e <_strtod_l+0x7e>
 8007f32:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f34:	4648      	mov	r0, r9
 8007f36:	f001 fe6c 	bl	8009c12 <_Bfree>
 8007f3a:	9905      	ldr	r1, [sp, #20]
 8007f3c:	4648      	mov	r0, r9
 8007f3e:	f001 fe68 	bl	8009c12 <_Bfree>
 8007f42:	4641      	mov	r1, r8
 8007f44:	4648      	mov	r0, r9
 8007f46:	f001 fe64 	bl	8009c12 <_Bfree>
 8007f4a:	9907      	ldr	r1, [sp, #28]
 8007f4c:	4648      	mov	r0, r9
 8007f4e:	f001 fe60 	bl	8009c12 <_Bfree>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4648      	mov	r0, r9
 8007f56:	f001 fe5c 	bl	8009c12 <_Bfree>
 8007f5a:	e600      	b.n	8007b5e <_strtod_l+0x7e>
 8007f5c:	9a06      	ldr	r2, [sp, #24]
 8007f5e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007f62:	4293      	cmp	r3, r2
 8007f64:	dbba      	blt.n	8007edc <_strtod_l+0x3fc>
 8007f66:	4d42      	ldr	r5, [pc, #264]	; (8008070 <_strtod_l+0x590>)
 8007f68:	f1c4 040f 	rsb	r4, r4, #15
 8007f6c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007f70:	4652      	mov	r2, sl
 8007f72:	465b      	mov	r3, fp
 8007f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f78:	f7f8 fb5e 	bl	8000638 <__aeabi_dmul>
 8007f7c:	9b06      	ldr	r3, [sp, #24]
 8007f7e:	1b1c      	subs	r4, r3, r4
 8007f80:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007f84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f88:	e78d      	b.n	8007ea6 <_strtod_l+0x3c6>
 8007f8a:	f113 0f16 	cmn.w	r3, #22
 8007f8e:	dba5      	blt.n	8007edc <_strtod_l+0x3fc>
 8007f90:	4a37      	ldr	r2, [pc, #220]	; (8008070 <_strtod_l+0x590>)
 8007f92:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007f96:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	4659      	mov	r1, fp
 8007f9e:	f7f8 fc75 	bl	800088c <__aeabi_ddiv>
 8007fa2:	e782      	b.n	8007eaa <_strtod_l+0x3ca>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4e33      	ldr	r6, [pc, #204]	; (8008074 <_strtod_l+0x594>)
 8007fa8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007fac:	4650      	mov	r0, sl
 8007fae:	4659      	mov	r1, fp
 8007fb0:	461d      	mov	r5, r3
 8007fb2:	f1b8 0f01 	cmp.w	r8, #1
 8007fb6:	dc21      	bgt.n	8007ffc <_strtod_l+0x51c>
 8007fb8:	b10b      	cbz	r3, 8007fbe <_strtod_l+0x4de>
 8007fba:	4682      	mov	sl, r0
 8007fbc:	468b      	mov	fp, r1
 8007fbe:	4b2d      	ldr	r3, [pc, #180]	; (8008074 <_strtod_l+0x594>)
 8007fc0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007fc4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007fc8:	4652      	mov	r2, sl
 8007fca:	465b      	mov	r3, fp
 8007fcc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007fd0:	f7f8 fb32 	bl	8000638 <__aeabi_dmul>
 8007fd4:	4b28      	ldr	r3, [pc, #160]	; (8008078 <_strtod_l+0x598>)
 8007fd6:	460a      	mov	r2, r1
 8007fd8:	400b      	ands	r3, r1
 8007fda:	4928      	ldr	r1, [pc, #160]	; (800807c <_strtod_l+0x59c>)
 8007fdc:	428b      	cmp	r3, r1
 8007fde:	4682      	mov	sl, r0
 8007fe0:	d898      	bhi.n	8007f14 <_strtod_l+0x434>
 8007fe2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007fe6:	428b      	cmp	r3, r1
 8007fe8:	bf86      	itte	hi
 8007fea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008084 <_strtod_l+0x5a4>
 8007fee:	f04f 3aff 	movhi.w	sl, #4294967295
 8007ff2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	9304      	str	r3, [sp, #16]
 8007ffa:	e077      	b.n	80080ec <_strtod_l+0x60c>
 8007ffc:	f018 0f01 	tst.w	r8, #1
 8008000:	d006      	beq.n	8008010 <_strtod_l+0x530>
 8008002:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	f7f8 fb15 	bl	8000638 <__aeabi_dmul>
 800800e:	2301      	movs	r3, #1
 8008010:	3501      	adds	r5, #1
 8008012:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008016:	e7cc      	b.n	8007fb2 <_strtod_l+0x4d2>
 8008018:	d0ed      	beq.n	8007ff6 <_strtod_l+0x516>
 800801a:	f1c8 0800 	rsb	r8, r8, #0
 800801e:	f018 020f 	ands.w	r2, r8, #15
 8008022:	d00a      	beq.n	800803a <_strtod_l+0x55a>
 8008024:	4b12      	ldr	r3, [pc, #72]	; (8008070 <_strtod_l+0x590>)
 8008026:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800802a:	4650      	mov	r0, sl
 800802c:	4659      	mov	r1, fp
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f7f8 fc2b 	bl	800088c <__aeabi_ddiv>
 8008036:	4682      	mov	sl, r0
 8008038:	468b      	mov	fp, r1
 800803a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800803e:	d0da      	beq.n	8007ff6 <_strtod_l+0x516>
 8008040:	f1b8 0f1f 	cmp.w	r8, #31
 8008044:	dd20      	ble.n	8008088 <_strtod_l+0x5a8>
 8008046:	2400      	movs	r4, #0
 8008048:	46a0      	mov	r8, r4
 800804a:	9407      	str	r4, [sp, #28]
 800804c:	9405      	str	r4, [sp, #20]
 800804e:	2322      	movs	r3, #34	; 0x22
 8008050:	f04f 0a00 	mov.w	sl, #0
 8008054:	f04f 0b00 	mov.w	fp, #0
 8008058:	f8c9 3000 	str.w	r3, [r9]
 800805c:	e765      	b.n	8007f2a <_strtod_l+0x44a>
 800805e:	bf00      	nop
 8008060:	0800b13d 	.word	0x0800b13d
 8008064:	0800b1c3 	.word	0x0800b1c3
 8008068:	0800b145 	.word	0x0800b145
 800806c:	0800b184 	.word	0x0800b184
 8008070:	0800b200 	.word	0x0800b200
 8008074:	0800b1d8 	.word	0x0800b1d8
 8008078:	7ff00000 	.word	0x7ff00000
 800807c:	7ca00000 	.word	0x7ca00000
 8008080:	fff80000 	.word	0xfff80000
 8008084:	7fefffff 	.word	0x7fefffff
 8008088:	f018 0310 	ands.w	r3, r8, #16
 800808c:	bf18      	it	ne
 800808e:	236a      	movne	r3, #106	; 0x6a
 8008090:	4da0      	ldr	r5, [pc, #640]	; (8008314 <_strtod_l+0x834>)
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	4650      	mov	r0, sl
 8008096:	4659      	mov	r1, fp
 8008098:	2300      	movs	r3, #0
 800809a:	f1b8 0f00 	cmp.w	r8, #0
 800809e:	f300 810a 	bgt.w	80082b6 <_strtod_l+0x7d6>
 80080a2:	b10b      	cbz	r3, 80080a8 <_strtod_l+0x5c8>
 80080a4:	4682      	mov	sl, r0
 80080a6:	468b      	mov	fp, r1
 80080a8:	9b04      	ldr	r3, [sp, #16]
 80080aa:	b1bb      	cbz	r3, 80080dc <_strtod_l+0x5fc>
 80080ac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80080b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	4659      	mov	r1, fp
 80080b8:	dd10      	ble.n	80080dc <_strtod_l+0x5fc>
 80080ba:	2b1f      	cmp	r3, #31
 80080bc:	f340 8107 	ble.w	80082ce <_strtod_l+0x7ee>
 80080c0:	2b34      	cmp	r3, #52	; 0x34
 80080c2:	bfde      	ittt	le
 80080c4:	3b20      	suble	r3, #32
 80080c6:	f04f 32ff 	movle.w	r2, #4294967295
 80080ca:	fa02 f303 	lslle.w	r3, r2, r3
 80080ce:	f04f 0a00 	mov.w	sl, #0
 80080d2:	bfcc      	ite	gt
 80080d4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80080d8:	ea03 0b01 	andle.w	fp, r3, r1
 80080dc:	2200      	movs	r2, #0
 80080de:	2300      	movs	r3, #0
 80080e0:	4650      	mov	r0, sl
 80080e2:	4659      	mov	r1, fp
 80080e4:	f7f8 fd10 	bl	8000b08 <__aeabi_dcmpeq>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d1ac      	bne.n	8008046 <_strtod_l+0x566>
 80080ec:	9b07      	ldr	r3, [sp, #28]
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	9a05      	ldr	r2, [sp, #20]
 80080f2:	9908      	ldr	r1, [sp, #32]
 80080f4:	4623      	mov	r3, r4
 80080f6:	4648      	mov	r0, r9
 80080f8:	f001 fddd 	bl	8009cb6 <__s2b>
 80080fc:	9007      	str	r0, [sp, #28]
 80080fe:	2800      	cmp	r0, #0
 8008100:	f43f af08 	beq.w	8007f14 <_strtod_l+0x434>
 8008104:	9a06      	ldr	r2, [sp, #24]
 8008106:	9b06      	ldr	r3, [sp, #24]
 8008108:	2a00      	cmp	r2, #0
 800810a:	f1c3 0300 	rsb	r3, r3, #0
 800810e:	bfa8      	it	ge
 8008110:	2300      	movge	r3, #0
 8008112:	930e      	str	r3, [sp, #56]	; 0x38
 8008114:	2400      	movs	r4, #0
 8008116:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800811a:	9316      	str	r3, [sp, #88]	; 0x58
 800811c:	46a0      	mov	r8, r4
 800811e:	9b07      	ldr	r3, [sp, #28]
 8008120:	4648      	mov	r0, r9
 8008122:	6859      	ldr	r1, [r3, #4]
 8008124:	f001 fd41 	bl	8009baa <_Balloc>
 8008128:	9005      	str	r0, [sp, #20]
 800812a:	2800      	cmp	r0, #0
 800812c:	f43f aef6 	beq.w	8007f1c <_strtod_l+0x43c>
 8008130:	9b07      	ldr	r3, [sp, #28]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	3202      	adds	r2, #2
 8008136:	f103 010c 	add.w	r1, r3, #12
 800813a:	0092      	lsls	r2, r2, #2
 800813c:	300c      	adds	r0, #12
 800813e:	f001 fd29 	bl	8009b94 <memcpy>
 8008142:	aa1e      	add	r2, sp, #120	; 0x78
 8008144:	a91d      	add	r1, sp, #116	; 0x74
 8008146:	ec4b ab10 	vmov	d0, sl, fp
 800814a:	4648      	mov	r0, r9
 800814c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008150:	f002 f86c 	bl	800a22c <__d2b>
 8008154:	901c      	str	r0, [sp, #112]	; 0x70
 8008156:	2800      	cmp	r0, #0
 8008158:	f43f aee0 	beq.w	8007f1c <_strtod_l+0x43c>
 800815c:	2101      	movs	r1, #1
 800815e:	4648      	mov	r0, r9
 8008160:	f001 fe35 	bl	8009dce <__i2b>
 8008164:	4680      	mov	r8, r0
 8008166:	2800      	cmp	r0, #0
 8008168:	f43f aed8 	beq.w	8007f1c <_strtod_l+0x43c>
 800816c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800816e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008170:	2e00      	cmp	r6, #0
 8008172:	bfab      	itete	ge
 8008174:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008176:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008178:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800817a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800817c:	bfac      	ite	ge
 800817e:	18f7      	addge	r7, r6, r3
 8008180:	1b9d      	sublt	r5, r3, r6
 8008182:	9b04      	ldr	r3, [sp, #16]
 8008184:	1af6      	subs	r6, r6, r3
 8008186:	4416      	add	r6, r2
 8008188:	4b63      	ldr	r3, [pc, #396]	; (8008318 <_strtod_l+0x838>)
 800818a:	3e01      	subs	r6, #1
 800818c:	429e      	cmp	r6, r3
 800818e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008192:	f280 80af 	bge.w	80082f4 <_strtod_l+0x814>
 8008196:	1b9b      	subs	r3, r3, r6
 8008198:	2b1f      	cmp	r3, #31
 800819a:	eba2 0203 	sub.w	r2, r2, r3
 800819e:	f04f 0101 	mov.w	r1, #1
 80081a2:	f300 809b 	bgt.w	80082dc <_strtod_l+0x7fc>
 80081a6:	fa01 f303 	lsl.w	r3, r1, r3
 80081aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80081ac:	2300      	movs	r3, #0
 80081ae:	930a      	str	r3, [sp, #40]	; 0x28
 80081b0:	18be      	adds	r6, r7, r2
 80081b2:	9b04      	ldr	r3, [sp, #16]
 80081b4:	42b7      	cmp	r7, r6
 80081b6:	4415      	add	r5, r2
 80081b8:	441d      	add	r5, r3
 80081ba:	463b      	mov	r3, r7
 80081bc:	bfa8      	it	ge
 80081be:	4633      	movge	r3, r6
 80081c0:	42ab      	cmp	r3, r5
 80081c2:	bfa8      	it	ge
 80081c4:	462b      	movge	r3, r5
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfc2      	ittt	gt
 80081ca:	1af6      	subgt	r6, r6, r3
 80081cc:	1aed      	subgt	r5, r5, r3
 80081ce:	1aff      	subgt	r7, r7, r3
 80081d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081d2:	b1bb      	cbz	r3, 8008204 <_strtod_l+0x724>
 80081d4:	4641      	mov	r1, r8
 80081d6:	461a      	mov	r2, r3
 80081d8:	4648      	mov	r0, r9
 80081da:	f001 fe97 	bl	8009f0c <__pow5mult>
 80081de:	4680      	mov	r8, r0
 80081e0:	2800      	cmp	r0, #0
 80081e2:	f43f ae9b 	beq.w	8007f1c <_strtod_l+0x43c>
 80081e6:	4601      	mov	r1, r0
 80081e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80081ea:	4648      	mov	r0, r9
 80081ec:	f001 fdf8 	bl	8009de0 <__multiply>
 80081f0:	900c      	str	r0, [sp, #48]	; 0x30
 80081f2:	2800      	cmp	r0, #0
 80081f4:	f43f ae92 	beq.w	8007f1c <_strtod_l+0x43c>
 80081f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80081fa:	4648      	mov	r0, r9
 80081fc:	f001 fd09 	bl	8009c12 <_Bfree>
 8008200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008202:	931c      	str	r3, [sp, #112]	; 0x70
 8008204:	2e00      	cmp	r6, #0
 8008206:	dc7a      	bgt.n	80082fe <_strtod_l+0x81e>
 8008208:	9b06      	ldr	r3, [sp, #24]
 800820a:	2b00      	cmp	r3, #0
 800820c:	dd08      	ble.n	8008220 <_strtod_l+0x740>
 800820e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008210:	9905      	ldr	r1, [sp, #20]
 8008212:	4648      	mov	r0, r9
 8008214:	f001 fe7a 	bl	8009f0c <__pow5mult>
 8008218:	9005      	str	r0, [sp, #20]
 800821a:	2800      	cmp	r0, #0
 800821c:	f43f ae7e 	beq.w	8007f1c <_strtod_l+0x43c>
 8008220:	2d00      	cmp	r5, #0
 8008222:	dd08      	ble.n	8008236 <_strtod_l+0x756>
 8008224:	462a      	mov	r2, r5
 8008226:	9905      	ldr	r1, [sp, #20]
 8008228:	4648      	mov	r0, r9
 800822a:	f001 febd 	bl	8009fa8 <__lshift>
 800822e:	9005      	str	r0, [sp, #20]
 8008230:	2800      	cmp	r0, #0
 8008232:	f43f ae73 	beq.w	8007f1c <_strtod_l+0x43c>
 8008236:	2f00      	cmp	r7, #0
 8008238:	dd08      	ble.n	800824c <_strtod_l+0x76c>
 800823a:	4641      	mov	r1, r8
 800823c:	463a      	mov	r2, r7
 800823e:	4648      	mov	r0, r9
 8008240:	f001 feb2 	bl	8009fa8 <__lshift>
 8008244:	4680      	mov	r8, r0
 8008246:	2800      	cmp	r0, #0
 8008248:	f43f ae68 	beq.w	8007f1c <_strtod_l+0x43c>
 800824c:	9a05      	ldr	r2, [sp, #20]
 800824e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008250:	4648      	mov	r0, r9
 8008252:	f001 ff17 	bl	800a084 <__mdiff>
 8008256:	4604      	mov	r4, r0
 8008258:	2800      	cmp	r0, #0
 800825a:	f43f ae5f 	beq.w	8007f1c <_strtod_l+0x43c>
 800825e:	68c3      	ldr	r3, [r0, #12]
 8008260:	930c      	str	r3, [sp, #48]	; 0x30
 8008262:	2300      	movs	r3, #0
 8008264:	60c3      	str	r3, [r0, #12]
 8008266:	4641      	mov	r1, r8
 8008268:	f001 fef2 	bl	800a050 <__mcmp>
 800826c:	2800      	cmp	r0, #0
 800826e:	da55      	bge.n	800831c <_strtod_l+0x83c>
 8008270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008272:	b9e3      	cbnz	r3, 80082ae <_strtod_l+0x7ce>
 8008274:	f1ba 0f00 	cmp.w	sl, #0
 8008278:	d119      	bne.n	80082ae <_strtod_l+0x7ce>
 800827a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800827e:	b9b3      	cbnz	r3, 80082ae <_strtod_l+0x7ce>
 8008280:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008284:	0d1b      	lsrs	r3, r3, #20
 8008286:	051b      	lsls	r3, r3, #20
 8008288:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800828c:	d90f      	bls.n	80082ae <_strtod_l+0x7ce>
 800828e:	6963      	ldr	r3, [r4, #20]
 8008290:	b913      	cbnz	r3, 8008298 <_strtod_l+0x7b8>
 8008292:	6923      	ldr	r3, [r4, #16]
 8008294:	2b01      	cmp	r3, #1
 8008296:	dd0a      	ble.n	80082ae <_strtod_l+0x7ce>
 8008298:	4621      	mov	r1, r4
 800829a:	2201      	movs	r2, #1
 800829c:	4648      	mov	r0, r9
 800829e:	f001 fe83 	bl	8009fa8 <__lshift>
 80082a2:	4641      	mov	r1, r8
 80082a4:	4604      	mov	r4, r0
 80082a6:	f001 fed3 	bl	800a050 <__mcmp>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	dc67      	bgt.n	800837e <_strtod_l+0x89e>
 80082ae:	9b04      	ldr	r3, [sp, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d171      	bne.n	8008398 <_strtod_l+0x8b8>
 80082b4:	e63d      	b.n	8007f32 <_strtod_l+0x452>
 80082b6:	f018 0f01 	tst.w	r8, #1
 80082ba:	d004      	beq.n	80082c6 <_strtod_l+0x7e6>
 80082bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082c0:	f7f8 f9ba 	bl	8000638 <__aeabi_dmul>
 80082c4:	2301      	movs	r3, #1
 80082c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80082ca:	3508      	adds	r5, #8
 80082cc:	e6e5      	b.n	800809a <_strtod_l+0x5ba>
 80082ce:	f04f 32ff 	mov.w	r2, #4294967295
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	ea03 0a0a 	and.w	sl, r3, sl
 80082da:	e6ff      	b.n	80080dc <_strtod_l+0x5fc>
 80082dc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80082e0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80082e4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80082e8:	36e2      	adds	r6, #226	; 0xe2
 80082ea:	fa01 f306 	lsl.w	r3, r1, r6
 80082ee:	930a      	str	r3, [sp, #40]	; 0x28
 80082f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80082f2:	e75d      	b.n	80081b0 <_strtod_l+0x6d0>
 80082f4:	2300      	movs	r3, #0
 80082f6:	930a      	str	r3, [sp, #40]	; 0x28
 80082f8:	2301      	movs	r3, #1
 80082fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80082fc:	e758      	b.n	80081b0 <_strtod_l+0x6d0>
 80082fe:	4632      	mov	r2, r6
 8008300:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008302:	4648      	mov	r0, r9
 8008304:	f001 fe50 	bl	8009fa8 <__lshift>
 8008308:	901c      	str	r0, [sp, #112]	; 0x70
 800830a:	2800      	cmp	r0, #0
 800830c:	f47f af7c 	bne.w	8008208 <_strtod_l+0x728>
 8008310:	e604      	b.n	8007f1c <_strtod_l+0x43c>
 8008312:	bf00      	nop
 8008314:	0800b198 	.word	0x0800b198
 8008318:	fffffc02 	.word	0xfffffc02
 800831c:	465d      	mov	r5, fp
 800831e:	f040 8086 	bne.w	800842e <_strtod_l+0x94e>
 8008322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008328:	b32a      	cbz	r2, 8008376 <_strtod_l+0x896>
 800832a:	4aaf      	ldr	r2, [pc, #700]	; (80085e8 <_strtod_l+0xb08>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d153      	bne.n	80083d8 <_strtod_l+0x8f8>
 8008330:	9b04      	ldr	r3, [sp, #16]
 8008332:	4650      	mov	r0, sl
 8008334:	b1d3      	cbz	r3, 800836c <_strtod_l+0x88c>
 8008336:	4aad      	ldr	r2, [pc, #692]	; (80085ec <_strtod_l+0xb0c>)
 8008338:	402a      	ands	r2, r5
 800833a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800833e:	f04f 31ff 	mov.w	r1, #4294967295
 8008342:	d816      	bhi.n	8008372 <_strtod_l+0x892>
 8008344:	0d12      	lsrs	r2, r2, #20
 8008346:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800834a:	fa01 f303 	lsl.w	r3, r1, r3
 800834e:	4298      	cmp	r0, r3
 8008350:	d142      	bne.n	80083d8 <_strtod_l+0x8f8>
 8008352:	4ba7      	ldr	r3, [pc, #668]	; (80085f0 <_strtod_l+0xb10>)
 8008354:	429d      	cmp	r5, r3
 8008356:	d102      	bne.n	800835e <_strtod_l+0x87e>
 8008358:	3001      	adds	r0, #1
 800835a:	f43f addf 	beq.w	8007f1c <_strtod_l+0x43c>
 800835e:	4ba3      	ldr	r3, [pc, #652]	; (80085ec <_strtod_l+0xb0c>)
 8008360:	402b      	ands	r3, r5
 8008362:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008366:	f04f 0a00 	mov.w	sl, #0
 800836a:	e7a0      	b.n	80082ae <_strtod_l+0x7ce>
 800836c:	f04f 33ff 	mov.w	r3, #4294967295
 8008370:	e7ed      	b.n	800834e <_strtod_l+0x86e>
 8008372:	460b      	mov	r3, r1
 8008374:	e7eb      	b.n	800834e <_strtod_l+0x86e>
 8008376:	bb7b      	cbnz	r3, 80083d8 <_strtod_l+0x8f8>
 8008378:	f1ba 0f00 	cmp.w	sl, #0
 800837c:	d12c      	bne.n	80083d8 <_strtod_l+0x8f8>
 800837e:	9904      	ldr	r1, [sp, #16]
 8008380:	4a9a      	ldr	r2, [pc, #616]	; (80085ec <_strtod_l+0xb0c>)
 8008382:	465b      	mov	r3, fp
 8008384:	b1f1      	cbz	r1, 80083c4 <_strtod_l+0x8e4>
 8008386:	ea02 010b 	and.w	r1, r2, fp
 800838a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800838e:	dc19      	bgt.n	80083c4 <_strtod_l+0x8e4>
 8008390:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008394:	f77f ae5b 	ble.w	800804e <_strtod_l+0x56e>
 8008398:	4a96      	ldr	r2, [pc, #600]	; (80085f4 <_strtod_l+0xb14>)
 800839a:	2300      	movs	r3, #0
 800839c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80083a0:	4650      	mov	r0, sl
 80083a2:	4659      	mov	r1, fp
 80083a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80083a8:	f7f8 f946 	bl	8000638 <__aeabi_dmul>
 80083ac:	4682      	mov	sl, r0
 80083ae:	468b      	mov	fp, r1
 80083b0:	2900      	cmp	r1, #0
 80083b2:	f47f adbe 	bne.w	8007f32 <_strtod_l+0x452>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f47f adbb 	bne.w	8007f32 <_strtod_l+0x452>
 80083bc:	2322      	movs	r3, #34	; 0x22
 80083be:	f8c9 3000 	str.w	r3, [r9]
 80083c2:	e5b6      	b.n	8007f32 <_strtod_l+0x452>
 80083c4:	4013      	ands	r3, r2
 80083c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80083ca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083d2:	f04f 3aff 	mov.w	sl, #4294967295
 80083d6:	e76a      	b.n	80082ae <_strtod_l+0x7ce>
 80083d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083da:	b193      	cbz	r3, 8008402 <_strtod_l+0x922>
 80083dc:	422b      	tst	r3, r5
 80083de:	f43f af66 	beq.w	80082ae <_strtod_l+0x7ce>
 80083e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083e4:	9a04      	ldr	r2, [sp, #16]
 80083e6:	4650      	mov	r0, sl
 80083e8:	4659      	mov	r1, fp
 80083ea:	b173      	cbz	r3, 800840a <_strtod_l+0x92a>
 80083ec:	f7ff fb5c 	bl	8007aa8 <sulp>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083f8:	f7f7 ff68 	bl	80002cc <__adddf3>
 80083fc:	4682      	mov	sl, r0
 80083fe:	468b      	mov	fp, r1
 8008400:	e755      	b.n	80082ae <_strtod_l+0x7ce>
 8008402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008404:	ea13 0f0a 	tst.w	r3, sl
 8008408:	e7e9      	b.n	80083de <_strtod_l+0x8fe>
 800840a:	f7ff fb4d 	bl	8007aa8 <sulp>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008416:	f7f7 ff57 	bl	80002c8 <__aeabi_dsub>
 800841a:	2200      	movs	r2, #0
 800841c:	2300      	movs	r3, #0
 800841e:	4682      	mov	sl, r0
 8008420:	468b      	mov	fp, r1
 8008422:	f7f8 fb71 	bl	8000b08 <__aeabi_dcmpeq>
 8008426:	2800      	cmp	r0, #0
 8008428:	f47f ae11 	bne.w	800804e <_strtod_l+0x56e>
 800842c:	e73f      	b.n	80082ae <_strtod_l+0x7ce>
 800842e:	4641      	mov	r1, r8
 8008430:	4620      	mov	r0, r4
 8008432:	f001 ff4a 	bl	800a2ca <__ratio>
 8008436:	ec57 6b10 	vmov	r6, r7, d0
 800843a:	2200      	movs	r2, #0
 800843c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008440:	ee10 0a10 	vmov	r0, s0
 8008444:	4639      	mov	r1, r7
 8008446:	f7f8 fb73 	bl	8000b30 <__aeabi_dcmple>
 800844a:	2800      	cmp	r0, #0
 800844c:	d077      	beq.n	800853e <_strtod_l+0xa5e>
 800844e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008450:	2b00      	cmp	r3, #0
 8008452:	d04a      	beq.n	80084ea <_strtod_l+0xa0a>
 8008454:	4b68      	ldr	r3, [pc, #416]	; (80085f8 <_strtod_l+0xb18>)
 8008456:	2200      	movs	r2, #0
 8008458:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800845c:	4f66      	ldr	r7, [pc, #408]	; (80085f8 <_strtod_l+0xb18>)
 800845e:	2600      	movs	r6, #0
 8008460:	4b62      	ldr	r3, [pc, #392]	; (80085ec <_strtod_l+0xb0c>)
 8008462:	402b      	ands	r3, r5
 8008464:	930f      	str	r3, [sp, #60]	; 0x3c
 8008466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008468:	4b64      	ldr	r3, [pc, #400]	; (80085fc <_strtod_l+0xb1c>)
 800846a:	429a      	cmp	r2, r3
 800846c:	f040 80ce 	bne.w	800860c <_strtod_l+0xb2c>
 8008470:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008474:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008478:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800847c:	ec4b ab10 	vmov	d0, sl, fp
 8008480:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008484:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008488:	f001 fe5a 	bl	800a140 <__ulp>
 800848c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008490:	ec53 2b10 	vmov	r2, r3, d0
 8008494:	f7f8 f8d0 	bl	8000638 <__aeabi_dmul>
 8008498:	4652      	mov	r2, sl
 800849a:	465b      	mov	r3, fp
 800849c:	f7f7 ff16 	bl	80002cc <__adddf3>
 80084a0:	460b      	mov	r3, r1
 80084a2:	4952      	ldr	r1, [pc, #328]	; (80085ec <_strtod_l+0xb0c>)
 80084a4:	4a56      	ldr	r2, [pc, #344]	; (8008600 <_strtod_l+0xb20>)
 80084a6:	4019      	ands	r1, r3
 80084a8:	4291      	cmp	r1, r2
 80084aa:	4682      	mov	sl, r0
 80084ac:	d95b      	bls.n	8008566 <_strtod_l+0xa86>
 80084ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d103      	bne.n	80084c0 <_strtod_l+0x9e0>
 80084b8:	9b08      	ldr	r3, [sp, #32]
 80084ba:	3301      	adds	r3, #1
 80084bc:	f43f ad2e 	beq.w	8007f1c <_strtod_l+0x43c>
 80084c0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80085f0 <_strtod_l+0xb10>
 80084c4:	f04f 3aff 	mov.w	sl, #4294967295
 80084c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80084ca:	4648      	mov	r0, r9
 80084cc:	f001 fba1 	bl	8009c12 <_Bfree>
 80084d0:	9905      	ldr	r1, [sp, #20]
 80084d2:	4648      	mov	r0, r9
 80084d4:	f001 fb9d 	bl	8009c12 <_Bfree>
 80084d8:	4641      	mov	r1, r8
 80084da:	4648      	mov	r0, r9
 80084dc:	f001 fb99 	bl	8009c12 <_Bfree>
 80084e0:	4621      	mov	r1, r4
 80084e2:	4648      	mov	r0, r9
 80084e4:	f001 fb95 	bl	8009c12 <_Bfree>
 80084e8:	e619      	b.n	800811e <_strtod_l+0x63e>
 80084ea:	f1ba 0f00 	cmp.w	sl, #0
 80084ee:	d11a      	bne.n	8008526 <_strtod_l+0xa46>
 80084f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084f4:	b9eb      	cbnz	r3, 8008532 <_strtod_l+0xa52>
 80084f6:	2200      	movs	r2, #0
 80084f8:	4b3f      	ldr	r3, [pc, #252]	; (80085f8 <_strtod_l+0xb18>)
 80084fa:	4630      	mov	r0, r6
 80084fc:	4639      	mov	r1, r7
 80084fe:	f7f8 fb0d 	bl	8000b1c <__aeabi_dcmplt>
 8008502:	b9c8      	cbnz	r0, 8008538 <_strtod_l+0xa58>
 8008504:	4630      	mov	r0, r6
 8008506:	4639      	mov	r1, r7
 8008508:	2200      	movs	r2, #0
 800850a:	4b3e      	ldr	r3, [pc, #248]	; (8008604 <_strtod_l+0xb24>)
 800850c:	f7f8 f894 	bl	8000638 <__aeabi_dmul>
 8008510:	4606      	mov	r6, r0
 8008512:	460f      	mov	r7, r1
 8008514:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008518:	9618      	str	r6, [sp, #96]	; 0x60
 800851a:	9319      	str	r3, [sp, #100]	; 0x64
 800851c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008520:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008524:	e79c      	b.n	8008460 <_strtod_l+0x980>
 8008526:	f1ba 0f01 	cmp.w	sl, #1
 800852a:	d102      	bne.n	8008532 <_strtod_l+0xa52>
 800852c:	2d00      	cmp	r5, #0
 800852e:	f43f ad8e 	beq.w	800804e <_strtod_l+0x56e>
 8008532:	2200      	movs	r2, #0
 8008534:	4b34      	ldr	r3, [pc, #208]	; (8008608 <_strtod_l+0xb28>)
 8008536:	e78f      	b.n	8008458 <_strtod_l+0x978>
 8008538:	2600      	movs	r6, #0
 800853a:	4f32      	ldr	r7, [pc, #200]	; (8008604 <_strtod_l+0xb24>)
 800853c:	e7ea      	b.n	8008514 <_strtod_l+0xa34>
 800853e:	4b31      	ldr	r3, [pc, #196]	; (8008604 <_strtod_l+0xb24>)
 8008540:	4630      	mov	r0, r6
 8008542:	4639      	mov	r1, r7
 8008544:	2200      	movs	r2, #0
 8008546:	f7f8 f877 	bl	8000638 <__aeabi_dmul>
 800854a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800854c:	4606      	mov	r6, r0
 800854e:	460f      	mov	r7, r1
 8008550:	b933      	cbnz	r3, 8008560 <_strtod_l+0xa80>
 8008552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008556:	9010      	str	r0, [sp, #64]	; 0x40
 8008558:	9311      	str	r3, [sp, #68]	; 0x44
 800855a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800855e:	e7df      	b.n	8008520 <_strtod_l+0xa40>
 8008560:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008564:	e7f9      	b.n	800855a <_strtod_l+0xa7a>
 8008566:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800856a:	9b04      	ldr	r3, [sp, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1ab      	bne.n	80084c8 <_strtod_l+0x9e8>
 8008570:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008574:	0d1b      	lsrs	r3, r3, #20
 8008576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008578:	051b      	lsls	r3, r3, #20
 800857a:	429a      	cmp	r2, r3
 800857c:	465d      	mov	r5, fp
 800857e:	d1a3      	bne.n	80084c8 <_strtod_l+0x9e8>
 8008580:	4639      	mov	r1, r7
 8008582:	4630      	mov	r0, r6
 8008584:	f7f8 fb08 	bl	8000b98 <__aeabi_d2iz>
 8008588:	f7f7 ffec 	bl	8000564 <__aeabi_i2d>
 800858c:	460b      	mov	r3, r1
 800858e:	4602      	mov	r2, r0
 8008590:	4639      	mov	r1, r7
 8008592:	4630      	mov	r0, r6
 8008594:	f7f7 fe98 	bl	80002c8 <__aeabi_dsub>
 8008598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800859a:	4606      	mov	r6, r0
 800859c:	460f      	mov	r7, r1
 800859e:	b933      	cbnz	r3, 80085ae <_strtod_l+0xace>
 80085a0:	f1ba 0f00 	cmp.w	sl, #0
 80085a4:	d103      	bne.n	80085ae <_strtod_l+0xace>
 80085a6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80085aa:	2d00      	cmp	r5, #0
 80085ac:	d06d      	beq.n	800868a <_strtod_l+0xbaa>
 80085ae:	a30a      	add	r3, pc, #40	; (adr r3, 80085d8 <_strtod_l+0xaf8>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	4630      	mov	r0, r6
 80085b6:	4639      	mov	r1, r7
 80085b8:	f7f8 fab0 	bl	8000b1c <__aeabi_dcmplt>
 80085bc:	2800      	cmp	r0, #0
 80085be:	f47f acb8 	bne.w	8007f32 <_strtod_l+0x452>
 80085c2:	a307      	add	r3, pc, #28	; (adr r3, 80085e0 <_strtod_l+0xb00>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	4630      	mov	r0, r6
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f8 fac4 	bl	8000b58 <__aeabi_dcmpgt>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	f43f af79 	beq.w	80084c8 <_strtod_l+0x9e8>
 80085d6:	e4ac      	b.n	8007f32 <_strtod_l+0x452>
 80085d8:	94a03595 	.word	0x94a03595
 80085dc:	3fdfffff 	.word	0x3fdfffff
 80085e0:	35afe535 	.word	0x35afe535
 80085e4:	3fe00000 	.word	0x3fe00000
 80085e8:	000fffff 	.word	0x000fffff
 80085ec:	7ff00000 	.word	0x7ff00000
 80085f0:	7fefffff 	.word	0x7fefffff
 80085f4:	39500000 	.word	0x39500000
 80085f8:	3ff00000 	.word	0x3ff00000
 80085fc:	7fe00000 	.word	0x7fe00000
 8008600:	7c9fffff 	.word	0x7c9fffff
 8008604:	3fe00000 	.word	0x3fe00000
 8008608:	bff00000 	.word	0xbff00000
 800860c:	9b04      	ldr	r3, [sp, #16]
 800860e:	b333      	cbz	r3, 800865e <_strtod_l+0xb7e>
 8008610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008612:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008616:	d822      	bhi.n	800865e <_strtod_l+0xb7e>
 8008618:	a327      	add	r3, pc, #156	; (adr r3, 80086b8 <_strtod_l+0xbd8>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	4630      	mov	r0, r6
 8008620:	4639      	mov	r1, r7
 8008622:	f7f8 fa85 	bl	8000b30 <__aeabi_dcmple>
 8008626:	b1a0      	cbz	r0, 8008652 <_strtod_l+0xb72>
 8008628:	4639      	mov	r1, r7
 800862a:	4630      	mov	r0, r6
 800862c:	f7f8 fadc 	bl	8000be8 <__aeabi_d2uiz>
 8008630:	2800      	cmp	r0, #0
 8008632:	bf08      	it	eq
 8008634:	2001      	moveq	r0, #1
 8008636:	f7f7 ff85 	bl	8000544 <__aeabi_ui2d>
 800863a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800863c:	4606      	mov	r6, r0
 800863e:	460f      	mov	r7, r1
 8008640:	bb03      	cbnz	r3, 8008684 <_strtod_l+0xba4>
 8008642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008646:	9012      	str	r0, [sp, #72]	; 0x48
 8008648:	9313      	str	r3, [sp, #76]	; 0x4c
 800864a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800864e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008656:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800865a:	1a9b      	subs	r3, r3, r2
 800865c:	930b      	str	r3, [sp, #44]	; 0x2c
 800865e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008662:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008666:	f001 fd6b 	bl	800a140 <__ulp>
 800866a:	4650      	mov	r0, sl
 800866c:	ec53 2b10 	vmov	r2, r3, d0
 8008670:	4659      	mov	r1, fp
 8008672:	f7f7 ffe1 	bl	8000638 <__aeabi_dmul>
 8008676:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800867a:	f7f7 fe27 	bl	80002cc <__adddf3>
 800867e:	4682      	mov	sl, r0
 8008680:	468b      	mov	fp, r1
 8008682:	e772      	b.n	800856a <_strtod_l+0xa8a>
 8008684:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008688:	e7df      	b.n	800864a <_strtod_l+0xb6a>
 800868a:	a30d      	add	r3, pc, #52	; (adr r3, 80086c0 <_strtod_l+0xbe0>)
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	f7f8 fa44 	bl	8000b1c <__aeabi_dcmplt>
 8008694:	e79c      	b.n	80085d0 <_strtod_l+0xaf0>
 8008696:	2300      	movs	r3, #0
 8008698:	930d      	str	r3, [sp, #52]	; 0x34
 800869a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800869c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	f7ff ba61 	b.w	8007b66 <_strtod_l+0x86>
 80086a4:	2b65      	cmp	r3, #101	; 0x65
 80086a6:	f04f 0200 	mov.w	r2, #0
 80086aa:	f43f ab4e 	beq.w	8007d4a <_strtod_l+0x26a>
 80086ae:	2101      	movs	r1, #1
 80086b0:	4614      	mov	r4, r2
 80086b2:	9104      	str	r1, [sp, #16]
 80086b4:	f7ff bacb 	b.w	8007c4e <_strtod_l+0x16e>
 80086b8:	ffc00000 	.word	0xffc00000
 80086bc:	41dfffff 	.word	0x41dfffff
 80086c0:	94a03595 	.word	0x94a03595
 80086c4:	3fcfffff 	.word	0x3fcfffff

080086c8 <_strtod_r>:
 80086c8:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <_strtod_r+0x18>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	b410      	push	{r4}
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	4c04      	ldr	r4, [pc, #16]	; (80086e4 <_strtod_r+0x1c>)
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	bf08      	it	eq
 80086d6:	4623      	moveq	r3, r4
 80086d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086dc:	f7ff ba00 	b.w	8007ae0 <_strtod_l>
 80086e0:	20000050 	.word	0x20000050
 80086e4:	200000b4 	.word	0x200000b4

080086e8 <_strtol_l.isra.0>:
 80086e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ec:	4680      	mov	r8, r0
 80086ee:	4689      	mov	r9, r1
 80086f0:	4692      	mov	sl, r2
 80086f2:	461e      	mov	r6, r3
 80086f4:	460f      	mov	r7, r1
 80086f6:	463d      	mov	r5, r7
 80086f8:	9808      	ldr	r0, [sp, #32]
 80086fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086fe:	f001 fa0d 	bl	8009b1c <__locale_ctype_ptr_l>
 8008702:	4420      	add	r0, r4
 8008704:	7843      	ldrb	r3, [r0, #1]
 8008706:	f013 0308 	ands.w	r3, r3, #8
 800870a:	d132      	bne.n	8008772 <_strtol_l.isra.0+0x8a>
 800870c:	2c2d      	cmp	r4, #45	; 0x2d
 800870e:	d132      	bne.n	8008776 <_strtol_l.isra.0+0x8e>
 8008710:	787c      	ldrb	r4, [r7, #1]
 8008712:	1cbd      	adds	r5, r7, #2
 8008714:	2201      	movs	r2, #1
 8008716:	2e00      	cmp	r6, #0
 8008718:	d05d      	beq.n	80087d6 <_strtol_l.isra.0+0xee>
 800871a:	2e10      	cmp	r6, #16
 800871c:	d109      	bne.n	8008732 <_strtol_l.isra.0+0x4a>
 800871e:	2c30      	cmp	r4, #48	; 0x30
 8008720:	d107      	bne.n	8008732 <_strtol_l.isra.0+0x4a>
 8008722:	782b      	ldrb	r3, [r5, #0]
 8008724:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008728:	2b58      	cmp	r3, #88	; 0x58
 800872a:	d14f      	bne.n	80087cc <_strtol_l.isra.0+0xe4>
 800872c:	786c      	ldrb	r4, [r5, #1]
 800872e:	2610      	movs	r6, #16
 8008730:	3502      	adds	r5, #2
 8008732:	2a00      	cmp	r2, #0
 8008734:	bf14      	ite	ne
 8008736:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800873a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800873e:	2700      	movs	r7, #0
 8008740:	fbb1 fcf6 	udiv	ip, r1, r6
 8008744:	4638      	mov	r0, r7
 8008746:	fb06 1e1c 	mls	lr, r6, ip, r1
 800874a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800874e:	2b09      	cmp	r3, #9
 8008750:	d817      	bhi.n	8008782 <_strtol_l.isra.0+0x9a>
 8008752:	461c      	mov	r4, r3
 8008754:	42a6      	cmp	r6, r4
 8008756:	dd23      	ble.n	80087a0 <_strtol_l.isra.0+0xb8>
 8008758:	1c7b      	adds	r3, r7, #1
 800875a:	d007      	beq.n	800876c <_strtol_l.isra.0+0x84>
 800875c:	4584      	cmp	ip, r0
 800875e:	d31c      	bcc.n	800879a <_strtol_l.isra.0+0xb2>
 8008760:	d101      	bne.n	8008766 <_strtol_l.isra.0+0x7e>
 8008762:	45a6      	cmp	lr, r4
 8008764:	db19      	blt.n	800879a <_strtol_l.isra.0+0xb2>
 8008766:	fb00 4006 	mla	r0, r0, r6, r4
 800876a:	2701      	movs	r7, #1
 800876c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008770:	e7eb      	b.n	800874a <_strtol_l.isra.0+0x62>
 8008772:	462f      	mov	r7, r5
 8008774:	e7bf      	b.n	80086f6 <_strtol_l.isra.0+0xe>
 8008776:	2c2b      	cmp	r4, #43	; 0x2b
 8008778:	bf04      	itt	eq
 800877a:	1cbd      	addeq	r5, r7, #2
 800877c:	787c      	ldrbeq	r4, [r7, #1]
 800877e:	461a      	mov	r2, r3
 8008780:	e7c9      	b.n	8008716 <_strtol_l.isra.0+0x2e>
 8008782:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008786:	2b19      	cmp	r3, #25
 8008788:	d801      	bhi.n	800878e <_strtol_l.isra.0+0xa6>
 800878a:	3c37      	subs	r4, #55	; 0x37
 800878c:	e7e2      	b.n	8008754 <_strtol_l.isra.0+0x6c>
 800878e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008792:	2b19      	cmp	r3, #25
 8008794:	d804      	bhi.n	80087a0 <_strtol_l.isra.0+0xb8>
 8008796:	3c57      	subs	r4, #87	; 0x57
 8008798:	e7dc      	b.n	8008754 <_strtol_l.isra.0+0x6c>
 800879a:	f04f 37ff 	mov.w	r7, #4294967295
 800879e:	e7e5      	b.n	800876c <_strtol_l.isra.0+0x84>
 80087a0:	1c7b      	adds	r3, r7, #1
 80087a2:	d108      	bne.n	80087b6 <_strtol_l.isra.0+0xce>
 80087a4:	2322      	movs	r3, #34	; 0x22
 80087a6:	f8c8 3000 	str.w	r3, [r8]
 80087aa:	4608      	mov	r0, r1
 80087ac:	f1ba 0f00 	cmp.w	sl, #0
 80087b0:	d107      	bne.n	80087c2 <_strtol_l.isra.0+0xda>
 80087b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b6:	b102      	cbz	r2, 80087ba <_strtol_l.isra.0+0xd2>
 80087b8:	4240      	negs	r0, r0
 80087ba:	f1ba 0f00 	cmp.w	sl, #0
 80087be:	d0f8      	beq.n	80087b2 <_strtol_l.isra.0+0xca>
 80087c0:	b10f      	cbz	r7, 80087c6 <_strtol_l.isra.0+0xde>
 80087c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80087c6:	f8ca 9000 	str.w	r9, [sl]
 80087ca:	e7f2      	b.n	80087b2 <_strtol_l.isra.0+0xca>
 80087cc:	2430      	movs	r4, #48	; 0x30
 80087ce:	2e00      	cmp	r6, #0
 80087d0:	d1af      	bne.n	8008732 <_strtol_l.isra.0+0x4a>
 80087d2:	2608      	movs	r6, #8
 80087d4:	e7ad      	b.n	8008732 <_strtol_l.isra.0+0x4a>
 80087d6:	2c30      	cmp	r4, #48	; 0x30
 80087d8:	d0a3      	beq.n	8008722 <_strtol_l.isra.0+0x3a>
 80087da:	260a      	movs	r6, #10
 80087dc:	e7a9      	b.n	8008732 <_strtol_l.isra.0+0x4a>
	...

080087e0 <_strtol_r>:
 80087e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087e2:	4c06      	ldr	r4, [pc, #24]	; (80087fc <_strtol_r+0x1c>)
 80087e4:	4d06      	ldr	r5, [pc, #24]	; (8008800 <_strtol_r+0x20>)
 80087e6:	6824      	ldr	r4, [r4, #0]
 80087e8:	6a24      	ldr	r4, [r4, #32]
 80087ea:	2c00      	cmp	r4, #0
 80087ec:	bf08      	it	eq
 80087ee:	462c      	moveq	r4, r5
 80087f0:	9400      	str	r4, [sp, #0]
 80087f2:	f7ff ff79 	bl	80086e8 <_strtol_l.isra.0>
 80087f6:	b003      	add	sp, #12
 80087f8:	bd30      	pop	{r4, r5, pc}
 80087fa:	bf00      	nop
 80087fc:	20000050 	.word	0x20000050
 8008800:	200000b4 	.word	0x200000b4

08008804 <_vsiprintf_r>:
 8008804:	b500      	push	{lr}
 8008806:	b09b      	sub	sp, #108	; 0x6c
 8008808:	9100      	str	r1, [sp, #0]
 800880a:	9104      	str	r1, [sp, #16]
 800880c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008810:	9105      	str	r1, [sp, #20]
 8008812:	9102      	str	r1, [sp, #8]
 8008814:	4905      	ldr	r1, [pc, #20]	; (800882c <_vsiprintf_r+0x28>)
 8008816:	9103      	str	r1, [sp, #12]
 8008818:	4669      	mov	r1, sp
 800881a:	f001 fed5 	bl	800a5c8 <_svfiprintf_r>
 800881e:	9b00      	ldr	r3, [sp, #0]
 8008820:	2200      	movs	r2, #0
 8008822:	701a      	strb	r2, [r3, #0]
 8008824:	b01b      	add	sp, #108	; 0x6c
 8008826:	f85d fb04 	ldr.w	pc, [sp], #4
 800882a:	bf00      	nop
 800882c:	ffff0208 	.word	0xffff0208

08008830 <vsiprintf>:
 8008830:	4613      	mov	r3, r2
 8008832:	460a      	mov	r2, r1
 8008834:	4601      	mov	r1, r0
 8008836:	4802      	ldr	r0, [pc, #8]	; (8008840 <vsiprintf+0x10>)
 8008838:	6800      	ldr	r0, [r0, #0]
 800883a:	f7ff bfe3 	b.w	8008804 <_vsiprintf_r>
 800883e:	bf00      	nop
 8008840:	20000050 	.word	0x20000050

08008844 <quorem>:
 8008844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	6903      	ldr	r3, [r0, #16]
 800884a:	690c      	ldr	r4, [r1, #16]
 800884c:	42a3      	cmp	r3, r4
 800884e:	4680      	mov	r8, r0
 8008850:	f2c0 8082 	blt.w	8008958 <quorem+0x114>
 8008854:	3c01      	subs	r4, #1
 8008856:	f101 0714 	add.w	r7, r1, #20
 800885a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800885e:	f100 0614 	add.w	r6, r0, #20
 8008862:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008866:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800886a:	eb06 030c 	add.w	r3, r6, ip
 800886e:	3501      	adds	r5, #1
 8008870:	eb07 090c 	add.w	r9, r7, ip
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	fbb0 f5f5 	udiv	r5, r0, r5
 800887a:	b395      	cbz	r5, 80088e2 <quorem+0x9e>
 800887c:	f04f 0a00 	mov.w	sl, #0
 8008880:	4638      	mov	r0, r7
 8008882:	46b6      	mov	lr, r6
 8008884:	46d3      	mov	fp, sl
 8008886:	f850 2b04 	ldr.w	r2, [r0], #4
 800888a:	b293      	uxth	r3, r2
 800888c:	fb05 a303 	mla	r3, r5, r3, sl
 8008890:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008894:	b29b      	uxth	r3, r3
 8008896:	ebab 0303 	sub.w	r3, fp, r3
 800889a:	0c12      	lsrs	r2, r2, #16
 800889c:	f8de b000 	ldr.w	fp, [lr]
 80088a0:	fb05 a202 	mla	r2, r5, r2, sl
 80088a4:	fa13 f38b 	uxtah	r3, r3, fp
 80088a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80088ac:	fa1f fb82 	uxth.w	fp, r2
 80088b0:	f8de 2000 	ldr.w	r2, [lr]
 80088b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80088b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088bc:	b29b      	uxth	r3, r3
 80088be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088c2:	4581      	cmp	r9, r0
 80088c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80088c8:	f84e 3b04 	str.w	r3, [lr], #4
 80088cc:	d2db      	bcs.n	8008886 <quorem+0x42>
 80088ce:	f856 300c 	ldr.w	r3, [r6, ip]
 80088d2:	b933      	cbnz	r3, 80088e2 <quorem+0x9e>
 80088d4:	9b01      	ldr	r3, [sp, #4]
 80088d6:	3b04      	subs	r3, #4
 80088d8:	429e      	cmp	r6, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	d330      	bcc.n	8008940 <quorem+0xfc>
 80088de:	f8c8 4010 	str.w	r4, [r8, #16]
 80088e2:	4640      	mov	r0, r8
 80088e4:	f001 fbb4 	bl	800a050 <__mcmp>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	db25      	blt.n	8008938 <quorem+0xf4>
 80088ec:	3501      	adds	r5, #1
 80088ee:	4630      	mov	r0, r6
 80088f0:	f04f 0c00 	mov.w	ip, #0
 80088f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80088f8:	f8d0 e000 	ldr.w	lr, [r0]
 80088fc:	b293      	uxth	r3, r2
 80088fe:	ebac 0303 	sub.w	r3, ip, r3
 8008902:	0c12      	lsrs	r2, r2, #16
 8008904:	fa13 f38e 	uxtah	r3, r3, lr
 8008908:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800890c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008910:	b29b      	uxth	r3, r3
 8008912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008916:	45b9      	cmp	r9, r7
 8008918:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800891c:	f840 3b04 	str.w	r3, [r0], #4
 8008920:	d2e8      	bcs.n	80088f4 <quorem+0xb0>
 8008922:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008926:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800892a:	b92a      	cbnz	r2, 8008938 <quorem+0xf4>
 800892c:	3b04      	subs	r3, #4
 800892e:	429e      	cmp	r6, r3
 8008930:	461a      	mov	r2, r3
 8008932:	d30b      	bcc.n	800894c <quorem+0x108>
 8008934:	f8c8 4010 	str.w	r4, [r8, #16]
 8008938:	4628      	mov	r0, r5
 800893a:	b003      	add	sp, #12
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	6812      	ldr	r2, [r2, #0]
 8008942:	3b04      	subs	r3, #4
 8008944:	2a00      	cmp	r2, #0
 8008946:	d1ca      	bne.n	80088de <quorem+0x9a>
 8008948:	3c01      	subs	r4, #1
 800894a:	e7c5      	b.n	80088d8 <quorem+0x94>
 800894c:	6812      	ldr	r2, [r2, #0]
 800894e:	3b04      	subs	r3, #4
 8008950:	2a00      	cmp	r2, #0
 8008952:	d1ef      	bne.n	8008934 <quorem+0xf0>
 8008954:	3c01      	subs	r4, #1
 8008956:	e7ea      	b.n	800892e <quorem+0xea>
 8008958:	2000      	movs	r0, #0
 800895a:	e7ee      	b.n	800893a <quorem+0xf6>
 800895c:	0000      	movs	r0, r0
	...

08008960 <_dtoa_r>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	ec57 6b10 	vmov	r6, r7, d0
 8008968:	b097      	sub	sp, #92	; 0x5c
 800896a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800896c:	9106      	str	r1, [sp, #24]
 800896e:	4604      	mov	r4, r0
 8008970:	920b      	str	r2, [sp, #44]	; 0x2c
 8008972:	9312      	str	r3, [sp, #72]	; 0x48
 8008974:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008978:	e9cd 6700 	strd	r6, r7, [sp]
 800897c:	b93d      	cbnz	r5, 800898e <_dtoa_r+0x2e>
 800897e:	2010      	movs	r0, #16
 8008980:	f001 f8ee 	bl	8009b60 <malloc>
 8008984:	6260      	str	r0, [r4, #36]	; 0x24
 8008986:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800898a:	6005      	str	r5, [r0, #0]
 800898c:	60c5      	str	r5, [r0, #12]
 800898e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008990:	6819      	ldr	r1, [r3, #0]
 8008992:	b151      	cbz	r1, 80089aa <_dtoa_r+0x4a>
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	604a      	str	r2, [r1, #4]
 8008998:	2301      	movs	r3, #1
 800899a:	4093      	lsls	r3, r2
 800899c:	608b      	str	r3, [r1, #8]
 800899e:	4620      	mov	r0, r4
 80089a0:	f001 f937 	bl	8009c12 <_Bfree>
 80089a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	1e3b      	subs	r3, r7, #0
 80089ac:	bfbb      	ittet	lt
 80089ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089b2:	9301      	strlt	r3, [sp, #4]
 80089b4:	2300      	movge	r3, #0
 80089b6:	2201      	movlt	r2, #1
 80089b8:	bfac      	ite	ge
 80089ba:	f8c8 3000 	strge.w	r3, [r8]
 80089be:	f8c8 2000 	strlt.w	r2, [r8]
 80089c2:	4baf      	ldr	r3, [pc, #700]	; (8008c80 <_dtoa_r+0x320>)
 80089c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80089c8:	ea33 0308 	bics.w	r3, r3, r8
 80089cc:	d114      	bne.n	80089f8 <_dtoa_r+0x98>
 80089ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	9b00      	ldr	r3, [sp, #0]
 80089d8:	b923      	cbnz	r3, 80089e4 <_dtoa_r+0x84>
 80089da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80089de:	2800      	cmp	r0, #0
 80089e0:	f000 8542 	beq.w	8009468 <_dtoa_r+0xb08>
 80089e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008c94 <_dtoa_r+0x334>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 8544 	beq.w	8009478 <_dtoa_r+0xb18>
 80089f0:	f10b 0303 	add.w	r3, fp, #3
 80089f4:	f000 bd3e 	b.w	8009474 <_dtoa_r+0xb14>
 80089f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80089fc:	2200      	movs	r2, #0
 80089fe:	2300      	movs	r3, #0
 8008a00:	4630      	mov	r0, r6
 8008a02:	4639      	mov	r1, r7
 8008a04:	f7f8 f880 	bl	8000b08 <__aeabi_dcmpeq>
 8008a08:	4681      	mov	r9, r0
 8008a0a:	b168      	cbz	r0, 8008a28 <_dtoa_r+0xc8>
 8008a0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a0e:	2301      	movs	r3, #1
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 8524 	beq.w	8009462 <_dtoa_r+0xb02>
 8008a1a:	4b9a      	ldr	r3, [pc, #616]	; (8008c84 <_dtoa_r+0x324>)
 8008a1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a1e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	f000 bd28 	b.w	8009478 <_dtoa_r+0xb18>
 8008a28:	aa14      	add	r2, sp, #80	; 0x50
 8008a2a:	a915      	add	r1, sp, #84	; 0x54
 8008a2c:	ec47 6b10 	vmov	d0, r6, r7
 8008a30:	4620      	mov	r0, r4
 8008a32:	f001 fbfb 	bl	800a22c <__d2b>
 8008a36:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008a3a:	9004      	str	r0, [sp, #16]
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	d07c      	beq.n	8008b3a <_dtoa_r+0x1da>
 8008a40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a44:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008a48:	46b2      	mov	sl, r6
 8008a4a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008a4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a52:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008a56:	2200      	movs	r2, #0
 8008a58:	4b8b      	ldr	r3, [pc, #556]	; (8008c88 <_dtoa_r+0x328>)
 8008a5a:	4650      	mov	r0, sl
 8008a5c:	4659      	mov	r1, fp
 8008a5e:	f7f7 fc33 	bl	80002c8 <__aeabi_dsub>
 8008a62:	a381      	add	r3, pc, #516	; (adr r3, 8008c68 <_dtoa_r+0x308>)
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f7f7 fde6 	bl	8000638 <__aeabi_dmul>
 8008a6c:	a380      	add	r3, pc, #512	; (adr r3, 8008c70 <_dtoa_r+0x310>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fc2b 	bl	80002cc <__adddf3>
 8008a76:	4606      	mov	r6, r0
 8008a78:	4628      	mov	r0, r5
 8008a7a:	460f      	mov	r7, r1
 8008a7c:	f7f7 fd72 	bl	8000564 <__aeabi_i2d>
 8008a80:	a37d      	add	r3, pc, #500	; (adr r3, 8008c78 <_dtoa_r+0x318>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 fdd7 	bl	8000638 <__aeabi_dmul>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4630      	mov	r0, r6
 8008a90:	4639      	mov	r1, r7
 8008a92:	f7f7 fc1b 	bl	80002cc <__adddf3>
 8008a96:	4606      	mov	r6, r0
 8008a98:	460f      	mov	r7, r1
 8008a9a:	f7f8 f87d 	bl	8000b98 <__aeabi_d2iz>
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4682      	mov	sl, r0
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	f7f8 f838 	bl	8000b1c <__aeabi_dcmplt>
 8008aac:	b148      	cbz	r0, 8008ac2 <_dtoa_r+0x162>
 8008aae:	4650      	mov	r0, sl
 8008ab0:	f7f7 fd58 	bl	8000564 <__aeabi_i2d>
 8008ab4:	4632      	mov	r2, r6
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	f7f8 f826 	bl	8000b08 <__aeabi_dcmpeq>
 8008abc:	b908      	cbnz	r0, 8008ac2 <_dtoa_r+0x162>
 8008abe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ac2:	f1ba 0f16 	cmp.w	sl, #22
 8008ac6:	d859      	bhi.n	8008b7c <_dtoa_r+0x21c>
 8008ac8:	4970      	ldr	r1, [pc, #448]	; (8008c8c <_dtoa_r+0x32c>)
 8008aca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ad6:	f7f8 f83f 	bl	8000b58 <__aeabi_dcmpgt>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d050      	beq.n	8008b80 <_dtoa_r+0x220>
 8008ade:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ae6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ae8:	1b5d      	subs	r5, r3, r5
 8008aea:	f1b5 0801 	subs.w	r8, r5, #1
 8008aee:	bf49      	itett	mi
 8008af0:	f1c5 0301 	rsbmi	r3, r5, #1
 8008af4:	2300      	movpl	r3, #0
 8008af6:	9305      	strmi	r3, [sp, #20]
 8008af8:	f04f 0800 	movmi.w	r8, #0
 8008afc:	bf58      	it	pl
 8008afe:	9305      	strpl	r3, [sp, #20]
 8008b00:	f1ba 0f00 	cmp.w	sl, #0
 8008b04:	db3e      	blt.n	8008b84 <_dtoa_r+0x224>
 8008b06:	2300      	movs	r3, #0
 8008b08:	44d0      	add	r8, sl
 8008b0a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008b0e:	9307      	str	r3, [sp, #28]
 8008b10:	9b06      	ldr	r3, [sp, #24]
 8008b12:	2b09      	cmp	r3, #9
 8008b14:	f200 8090 	bhi.w	8008c38 <_dtoa_r+0x2d8>
 8008b18:	2b05      	cmp	r3, #5
 8008b1a:	bfc4      	itt	gt
 8008b1c:	3b04      	subgt	r3, #4
 8008b1e:	9306      	strgt	r3, [sp, #24]
 8008b20:	9b06      	ldr	r3, [sp, #24]
 8008b22:	f1a3 0302 	sub.w	r3, r3, #2
 8008b26:	bfcc      	ite	gt
 8008b28:	2500      	movgt	r5, #0
 8008b2a:	2501      	movle	r5, #1
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	f200 808f 	bhi.w	8008c50 <_dtoa_r+0x2f0>
 8008b32:	e8df f003 	tbb	[pc, r3]
 8008b36:	7f7d      	.short	0x7f7d
 8008b38:	7131      	.short	0x7131
 8008b3a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008b3e:	441d      	add	r5, r3
 8008b40:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008b44:	2820      	cmp	r0, #32
 8008b46:	dd13      	ble.n	8008b70 <_dtoa_r+0x210>
 8008b48:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008b4c:	9b00      	ldr	r3, [sp, #0]
 8008b4e:	fa08 f800 	lsl.w	r8, r8, r0
 8008b52:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008b56:	fa23 f000 	lsr.w	r0, r3, r0
 8008b5a:	ea48 0000 	orr.w	r0, r8, r0
 8008b5e:	f7f7 fcf1 	bl	8000544 <__aeabi_ui2d>
 8008b62:	2301      	movs	r3, #1
 8008b64:	4682      	mov	sl, r0
 8008b66:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008b6a:	3d01      	subs	r5, #1
 8008b6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b6e:	e772      	b.n	8008a56 <_dtoa_r+0xf6>
 8008b70:	9b00      	ldr	r3, [sp, #0]
 8008b72:	f1c0 0020 	rsb	r0, r0, #32
 8008b76:	fa03 f000 	lsl.w	r0, r3, r0
 8008b7a:	e7f0      	b.n	8008b5e <_dtoa_r+0x1fe>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e7b1      	b.n	8008ae4 <_dtoa_r+0x184>
 8008b80:	900f      	str	r0, [sp, #60]	; 0x3c
 8008b82:	e7b0      	b.n	8008ae6 <_dtoa_r+0x186>
 8008b84:	9b05      	ldr	r3, [sp, #20]
 8008b86:	eba3 030a 	sub.w	r3, r3, sl
 8008b8a:	9305      	str	r3, [sp, #20]
 8008b8c:	f1ca 0300 	rsb	r3, sl, #0
 8008b90:	9307      	str	r3, [sp, #28]
 8008b92:	2300      	movs	r3, #0
 8008b94:	930e      	str	r3, [sp, #56]	; 0x38
 8008b96:	e7bb      	b.n	8008b10 <_dtoa_r+0x1b0>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dd59      	ble.n	8008c56 <_dtoa_r+0x2f6>
 8008ba2:	9302      	str	r3, [sp, #8]
 8008ba4:	4699      	mov	r9, r3
 8008ba6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ba8:	2200      	movs	r2, #0
 8008baa:	6072      	str	r2, [r6, #4]
 8008bac:	2204      	movs	r2, #4
 8008bae:	f102 0014 	add.w	r0, r2, #20
 8008bb2:	4298      	cmp	r0, r3
 8008bb4:	6871      	ldr	r1, [r6, #4]
 8008bb6:	d953      	bls.n	8008c60 <_dtoa_r+0x300>
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 fff6 	bl	8009baa <_Balloc>
 8008bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bc0:	6030      	str	r0, [r6, #0]
 8008bc2:	f1b9 0f0e 	cmp.w	r9, #14
 8008bc6:	f8d3 b000 	ldr.w	fp, [r3]
 8008bca:	f200 80e6 	bhi.w	8008d9a <_dtoa_r+0x43a>
 8008bce:	2d00      	cmp	r5, #0
 8008bd0:	f000 80e3 	beq.w	8008d9a <_dtoa_r+0x43a>
 8008bd4:	ed9d 7b00 	vldr	d7, [sp]
 8008bd8:	f1ba 0f00 	cmp.w	sl, #0
 8008bdc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008be0:	dd74      	ble.n	8008ccc <_dtoa_r+0x36c>
 8008be2:	4a2a      	ldr	r2, [pc, #168]	; (8008c8c <_dtoa_r+0x32c>)
 8008be4:	f00a 030f 	and.w	r3, sl, #15
 8008be8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008bec:	ed93 7b00 	vldr	d7, [r3]
 8008bf0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008bf4:	06f0      	lsls	r0, r6, #27
 8008bf6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008bfa:	d565      	bpl.n	8008cc8 <_dtoa_r+0x368>
 8008bfc:	4b24      	ldr	r3, [pc, #144]	; (8008c90 <_dtoa_r+0x330>)
 8008bfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c06:	f7f7 fe41 	bl	800088c <__aeabi_ddiv>
 8008c0a:	e9cd 0100 	strd	r0, r1, [sp]
 8008c0e:	f006 060f 	and.w	r6, r6, #15
 8008c12:	2503      	movs	r5, #3
 8008c14:	4f1e      	ldr	r7, [pc, #120]	; (8008c90 <_dtoa_r+0x330>)
 8008c16:	e04c      	b.n	8008cb2 <_dtoa_r+0x352>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c1e:	4453      	add	r3, sl
 8008c20:	f103 0901 	add.w	r9, r3, #1
 8008c24:	9302      	str	r3, [sp, #8]
 8008c26:	464b      	mov	r3, r9
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	bfb8      	it	lt
 8008c2c:	2301      	movlt	r3, #1
 8008c2e:	e7ba      	b.n	8008ba6 <_dtoa_r+0x246>
 8008c30:	2300      	movs	r3, #0
 8008c32:	e7b2      	b.n	8008b9a <_dtoa_r+0x23a>
 8008c34:	2300      	movs	r3, #0
 8008c36:	e7f0      	b.n	8008c1a <_dtoa_r+0x2ba>
 8008c38:	2501      	movs	r5, #1
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9306      	str	r3, [sp, #24]
 8008c3e:	950a      	str	r5, [sp, #40]	; 0x28
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295
 8008c44:	9302      	str	r3, [sp, #8]
 8008c46:	4699      	mov	r9, r3
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2312      	movs	r3, #18
 8008c4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c4e:	e7aa      	b.n	8008ba6 <_dtoa_r+0x246>
 8008c50:	2301      	movs	r3, #1
 8008c52:	930a      	str	r3, [sp, #40]	; 0x28
 8008c54:	e7f4      	b.n	8008c40 <_dtoa_r+0x2e0>
 8008c56:	2301      	movs	r3, #1
 8008c58:	9302      	str	r3, [sp, #8]
 8008c5a:	4699      	mov	r9, r3
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	e7f5      	b.n	8008c4c <_dtoa_r+0x2ec>
 8008c60:	3101      	adds	r1, #1
 8008c62:	6071      	str	r1, [r6, #4]
 8008c64:	0052      	lsls	r2, r2, #1
 8008c66:	e7a2      	b.n	8008bae <_dtoa_r+0x24e>
 8008c68:	636f4361 	.word	0x636f4361
 8008c6c:	3fd287a7 	.word	0x3fd287a7
 8008c70:	8b60c8b3 	.word	0x8b60c8b3
 8008c74:	3fc68a28 	.word	0x3fc68a28
 8008c78:	509f79fb 	.word	0x509f79fb
 8008c7c:	3fd34413 	.word	0x3fd34413
 8008c80:	7ff00000 	.word	0x7ff00000
 8008c84:	0800b2fc 	.word	0x0800b2fc
 8008c88:	3ff80000 	.word	0x3ff80000
 8008c8c:	0800b200 	.word	0x0800b200
 8008c90:	0800b1d8 	.word	0x0800b1d8
 8008c94:	0800b1c9 	.word	0x0800b1c9
 8008c98:	07f1      	lsls	r1, r6, #31
 8008c9a:	d508      	bpl.n	8008cae <_dtoa_r+0x34e>
 8008c9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca4:	f7f7 fcc8 	bl	8000638 <__aeabi_dmul>
 8008ca8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008cac:	3501      	adds	r5, #1
 8008cae:	1076      	asrs	r6, r6, #1
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	2e00      	cmp	r6, #0
 8008cb4:	d1f0      	bne.n	8008c98 <_dtoa_r+0x338>
 8008cb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008cba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cbe:	f7f7 fde5 	bl	800088c <__aeabi_ddiv>
 8008cc2:	e9cd 0100 	strd	r0, r1, [sp]
 8008cc6:	e01a      	b.n	8008cfe <_dtoa_r+0x39e>
 8008cc8:	2502      	movs	r5, #2
 8008cca:	e7a3      	b.n	8008c14 <_dtoa_r+0x2b4>
 8008ccc:	f000 80a0 	beq.w	8008e10 <_dtoa_r+0x4b0>
 8008cd0:	f1ca 0600 	rsb	r6, sl, #0
 8008cd4:	4b9f      	ldr	r3, [pc, #636]	; (8008f54 <_dtoa_r+0x5f4>)
 8008cd6:	4fa0      	ldr	r7, [pc, #640]	; (8008f58 <_dtoa_r+0x5f8>)
 8008cd8:	f006 020f 	and.w	r2, r6, #15
 8008cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ce8:	f7f7 fca6 	bl	8000638 <__aeabi_dmul>
 8008cec:	e9cd 0100 	strd	r0, r1, [sp]
 8008cf0:	1136      	asrs	r6, r6, #4
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	2502      	movs	r5, #2
 8008cf6:	2e00      	cmp	r6, #0
 8008cf8:	d17f      	bne.n	8008dfa <_dtoa_r+0x49a>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e1      	bne.n	8008cc2 <_dtoa_r+0x362>
 8008cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 8087 	beq.w	8008e14 <_dtoa_r+0x4b4>
 8008d06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4b93      	ldr	r3, [pc, #588]	; (8008f5c <_dtoa_r+0x5fc>)
 8008d0e:	4630      	mov	r0, r6
 8008d10:	4639      	mov	r1, r7
 8008d12:	f7f7 ff03 	bl	8000b1c <__aeabi_dcmplt>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d07c      	beq.n	8008e14 <_dtoa_r+0x4b4>
 8008d1a:	f1b9 0f00 	cmp.w	r9, #0
 8008d1e:	d079      	beq.n	8008e14 <_dtoa_r+0x4b4>
 8008d20:	9b02      	ldr	r3, [sp, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	dd35      	ble.n	8008d92 <_dtoa_r+0x432>
 8008d26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d2a:	9308      	str	r3, [sp, #32]
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	2200      	movs	r2, #0
 8008d30:	4b8b      	ldr	r3, [pc, #556]	; (8008f60 <_dtoa_r+0x600>)
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7f7 fc80 	bl	8000638 <__aeabi_dmul>
 8008d38:	e9cd 0100 	strd	r0, r1, [sp]
 8008d3c:	9f02      	ldr	r7, [sp, #8]
 8008d3e:	3501      	adds	r5, #1
 8008d40:	4628      	mov	r0, r5
 8008d42:	f7f7 fc0f 	bl	8000564 <__aeabi_i2d>
 8008d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d4a:	f7f7 fc75 	bl	8000638 <__aeabi_dmul>
 8008d4e:	2200      	movs	r2, #0
 8008d50:	4b84      	ldr	r3, [pc, #528]	; (8008f64 <_dtoa_r+0x604>)
 8008d52:	f7f7 fabb 	bl	80002cc <__adddf3>
 8008d56:	4605      	mov	r5, r0
 8008d58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008d5c:	2f00      	cmp	r7, #0
 8008d5e:	d15d      	bne.n	8008e1c <_dtoa_r+0x4bc>
 8008d60:	2200      	movs	r2, #0
 8008d62:	4b81      	ldr	r3, [pc, #516]	; (8008f68 <_dtoa_r+0x608>)
 8008d64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d68:	f7f7 faae 	bl	80002c8 <__aeabi_dsub>
 8008d6c:	462a      	mov	r2, r5
 8008d6e:	4633      	mov	r3, r6
 8008d70:	e9cd 0100 	strd	r0, r1, [sp]
 8008d74:	f7f7 fef0 	bl	8000b58 <__aeabi_dcmpgt>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	f040 8288 	bne.w	800928e <_dtoa_r+0x92e>
 8008d7e:	462a      	mov	r2, r5
 8008d80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d88:	f7f7 fec8 	bl	8000b1c <__aeabi_dcmplt>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	f040 827c 	bne.w	800928a <_dtoa_r+0x92a>
 8008d92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d96:	e9cd 2300 	strd	r2, r3, [sp]
 8008d9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f2c0 8150 	blt.w	8009042 <_dtoa_r+0x6e2>
 8008da2:	f1ba 0f0e 	cmp.w	sl, #14
 8008da6:	f300 814c 	bgt.w	8009042 <_dtoa_r+0x6e2>
 8008daa:	4b6a      	ldr	r3, [pc, #424]	; (8008f54 <_dtoa_r+0x5f4>)
 8008dac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008db0:	ed93 7b00 	vldr	d7, [r3]
 8008db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008dbc:	f280 80d8 	bge.w	8008f70 <_dtoa_r+0x610>
 8008dc0:	f1b9 0f00 	cmp.w	r9, #0
 8008dc4:	f300 80d4 	bgt.w	8008f70 <_dtoa_r+0x610>
 8008dc8:	f040 825e 	bne.w	8009288 <_dtoa_r+0x928>
 8008dcc:	2200      	movs	r2, #0
 8008dce:	4b66      	ldr	r3, [pc, #408]	; (8008f68 <_dtoa_r+0x608>)
 8008dd0:	ec51 0b17 	vmov	r0, r1, d7
 8008dd4:	f7f7 fc30 	bl	8000638 <__aeabi_dmul>
 8008dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ddc:	f7f7 feb2 	bl	8000b44 <__aeabi_dcmpge>
 8008de0:	464f      	mov	r7, r9
 8008de2:	464e      	mov	r6, r9
 8008de4:	2800      	cmp	r0, #0
 8008de6:	f040 8234 	bne.w	8009252 <_dtoa_r+0x8f2>
 8008dea:	2331      	movs	r3, #49	; 0x31
 8008dec:	f10b 0501 	add.w	r5, fp, #1
 8008df0:	f88b 3000 	strb.w	r3, [fp]
 8008df4:	f10a 0a01 	add.w	sl, sl, #1
 8008df8:	e22f      	b.n	800925a <_dtoa_r+0x8fa>
 8008dfa:	07f2      	lsls	r2, r6, #31
 8008dfc:	d505      	bpl.n	8008e0a <_dtoa_r+0x4aa>
 8008dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e02:	f7f7 fc19 	bl	8000638 <__aeabi_dmul>
 8008e06:	3501      	adds	r5, #1
 8008e08:	2301      	movs	r3, #1
 8008e0a:	1076      	asrs	r6, r6, #1
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	e772      	b.n	8008cf6 <_dtoa_r+0x396>
 8008e10:	2502      	movs	r5, #2
 8008e12:	e774      	b.n	8008cfe <_dtoa_r+0x39e>
 8008e14:	f8cd a020 	str.w	sl, [sp, #32]
 8008e18:	464f      	mov	r7, r9
 8008e1a:	e791      	b.n	8008d40 <_dtoa_r+0x3e0>
 8008e1c:	4b4d      	ldr	r3, [pc, #308]	; (8008f54 <_dtoa_r+0x5f4>)
 8008e1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d047      	beq.n	8008ebc <_dtoa_r+0x55c>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	2000      	movs	r0, #0
 8008e32:	494e      	ldr	r1, [pc, #312]	; (8008f6c <_dtoa_r+0x60c>)
 8008e34:	f7f7 fd2a 	bl	800088c <__aeabi_ddiv>
 8008e38:	462a      	mov	r2, r5
 8008e3a:	4633      	mov	r3, r6
 8008e3c:	f7f7 fa44 	bl	80002c8 <__aeabi_dsub>
 8008e40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008e44:	465d      	mov	r5, fp
 8008e46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e4a:	f7f7 fea5 	bl	8000b98 <__aeabi_d2iz>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	f7f7 fb88 	bl	8000564 <__aeabi_i2d>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e5c:	f7f7 fa34 	bl	80002c8 <__aeabi_dsub>
 8008e60:	3630      	adds	r6, #48	; 0x30
 8008e62:	f805 6b01 	strb.w	r6, [r5], #1
 8008e66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e6a:	e9cd 0100 	strd	r0, r1, [sp]
 8008e6e:	f7f7 fe55 	bl	8000b1c <__aeabi_dcmplt>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d163      	bne.n	8008f3e <_dtoa_r+0x5de>
 8008e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	4937      	ldr	r1, [pc, #220]	; (8008f5c <_dtoa_r+0x5fc>)
 8008e7e:	f7f7 fa23 	bl	80002c8 <__aeabi_dsub>
 8008e82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e86:	f7f7 fe49 	bl	8000b1c <__aeabi_dcmplt>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	f040 80b7 	bne.w	8008ffe <_dtoa_r+0x69e>
 8008e90:	eba5 030b 	sub.w	r3, r5, fp
 8008e94:	429f      	cmp	r7, r3
 8008e96:	f77f af7c 	ble.w	8008d92 <_dtoa_r+0x432>
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	4b30      	ldr	r3, [pc, #192]	; (8008f60 <_dtoa_r+0x600>)
 8008e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ea2:	f7f7 fbc9 	bl	8000638 <__aeabi_dmul>
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008eac:	4b2c      	ldr	r3, [pc, #176]	; (8008f60 <_dtoa_r+0x600>)
 8008eae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eb2:	f7f7 fbc1 	bl	8000638 <__aeabi_dmul>
 8008eb6:	e9cd 0100 	strd	r0, r1, [sp]
 8008eba:	e7c4      	b.n	8008e46 <_dtoa_r+0x4e6>
 8008ebc:	462a      	mov	r2, r5
 8008ebe:	4633      	mov	r3, r6
 8008ec0:	f7f7 fbba 	bl	8000638 <__aeabi_dmul>
 8008ec4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ec8:	eb0b 0507 	add.w	r5, fp, r7
 8008ecc:	465e      	mov	r6, fp
 8008ece:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ed2:	f7f7 fe61 	bl	8000b98 <__aeabi_d2iz>
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	f7f7 fb44 	bl	8000564 <__aeabi_i2d>
 8008edc:	3730      	adds	r7, #48	; 0x30
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ee6:	f7f7 f9ef 	bl	80002c8 <__aeabi_dsub>
 8008eea:	f806 7b01 	strb.w	r7, [r6], #1
 8008eee:	42ae      	cmp	r6, r5
 8008ef0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	d126      	bne.n	8008f48 <_dtoa_r+0x5e8>
 8008efa:	4b1c      	ldr	r3, [pc, #112]	; (8008f6c <_dtoa_r+0x60c>)
 8008efc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f00:	f7f7 f9e4 	bl	80002cc <__adddf3>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f0c:	f7f7 fe24 	bl	8000b58 <__aeabi_dcmpgt>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d174      	bne.n	8008ffe <_dtoa_r+0x69e>
 8008f14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f18:	2000      	movs	r0, #0
 8008f1a:	4914      	ldr	r1, [pc, #80]	; (8008f6c <_dtoa_r+0x60c>)
 8008f1c:	f7f7 f9d4 	bl	80002c8 <__aeabi_dsub>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f28:	f7f7 fdf8 	bl	8000b1c <__aeabi_dcmplt>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f43f af30 	beq.w	8008d92 <_dtoa_r+0x432>
 8008f32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f36:	2b30      	cmp	r3, #48	; 0x30
 8008f38:	f105 32ff 	add.w	r2, r5, #4294967295
 8008f3c:	d002      	beq.n	8008f44 <_dtoa_r+0x5e4>
 8008f3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008f42:	e04a      	b.n	8008fda <_dtoa_r+0x67a>
 8008f44:	4615      	mov	r5, r2
 8008f46:	e7f4      	b.n	8008f32 <_dtoa_r+0x5d2>
 8008f48:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <_dtoa_r+0x600>)
 8008f4a:	f7f7 fb75 	bl	8000638 <__aeabi_dmul>
 8008f4e:	e9cd 0100 	strd	r0, r1, [sp]
 8008f52:	e7bc      	b.n	8008ece <_dtoa_r+0x56e>
 8008f54:	0800b200 	.word	0x0800b200
 8008f58:	0800b1d8 	.word	0x0800b1d8
 8008f5c:	3ff00000 	.word	0x3ff00000
 8008f60:	40240000 	.word	0x40240000
 8008f64:	401c0000 	.word	0x401c0000
 8008f68:	40140000 	.word	0x40140000
 8008f6c:	3fe00000 	.word	0x3fe00000
 8008f70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f74:	465d      	mov	r5, fp
 8008f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	4639      	mov	r1, r7
 8008f7e:	f7f7 fc85 	bl	800088c <__aeabi_ddiv>
 8008f82:	f7f7 fe09 	bl	8000b98 <__aeabi_d2iz>
 8008f86:	4680      	mov	r8, r0
 8008f88:	f7f7 faec 	bl	8000564 <__aeabi_i2d>
 8008f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f90:	f7f7 fb52 	bl	8000638 <__aeabi_dmul>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008fa0:	f7f7 f992 	bl	80002c8 <__aeabi_dsub>
 8008fa4:	f805 6b01 	strb.w	r6, [r5], #1
 8008fa8:	eba5 060b 	sub.w	r6, r5, fp
 8008fac:	45b1      	cmp	r9, r6
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	d139      	bne.n	8009028 <_dtoa_r+0x6c8>
 8008fb4:	f7f7 f98a 	bl	80002cc <__adddf3>
 8008fb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	460f      	mov	r7, r1
 8008fc0:	f7f7 fdca 	bl	8000b58 <__aeabi_dcmpgt>
 8008fc4:	b9c8      	cbnz	r0, 8008ffa <_dtoa_r+0x69a>
 8008fc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fca:	4630      	mov	r0, r6
 8008fcc:	4639      	mov	r1, r7
 8008fce:	f7f7 fd9b 	bl	8000b08 <__aeabi_dcmpeq>
 8008fd2:	b110      	cbz	r0, 8008fda <_dtoa_r+0x67a>
 8008fd4:	f018 0f01 	tst.w	r8, #1
 8008fd8:	d10f      	bne.n	8008ffa <_dtoa_r+0x69a>
 8008fda:	9904      	ldr	r1, [sp, #16]
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fe18 	bl	8009c12 <_Bfree>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fe6:	702b      	strb	r3, [r5, #0]
 8008fe8:	f10a 0301 	add.w	r3, sl, #1
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 8241 	beq.w	8009478 <_dtoa_r+0xb18>
 8008ff6:	601d      	str	r5, [r3, #0]
 8008ff8:	e23e      	b.n	8009478 <_dtoa_r+0xb18>
 8008ffa:	f8cd a020 	str.w	sl, [sp, #32]
 8008ffe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009002:	2a39      	cmp	r2, #57	; 0x39
 8009004:	f105 33ff 	add.w	r3, r5, #4294967295
 8009008:	d108      	bne.n	800901c <_dtoa_r+0x6bc>
 800900a:	459b      	cmp	fp, r3
 800900c:	d10a      	bne.n	8009024 <_dtoa_r+0x6c4>
 800900e:	9b08      	ldr	r3, [sp, #32]
 8009010:	3301      	adds	r3, #1
 8009012:	9308      	str	r3, [sp, #32]
 8009014:	2330      	movs	r3, #48	; 0x30
 8009016:	f88b 3000 	strb.w	r3, [fp]
 800901a:	465b      	mov	r3, fp
 800901c:	781a      	ldrb	r2, [r3, #0]
 800901e:	3201      	adds	r2, #1
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	e78c      	b.n	8008f3e <_dtoa_r+0x5de>
 8009024:	461d      	mov	r5, r3
 8009026:	e7ea      	b.n	8008ffe <_dtoa_r+0x69e>
 8009028:	2200      	movs	r2, #0
 800902a:	4b9b      	ldr	r3, [pc, #620]	; (8009298 <_dtoa_r+0x938>)
 800902c:	f7f7 fb04 	bl	8000638 <__aeabi_dmul>
 8009030:	2200      	movs	r2, #0
 8009032:	2300      	movs	r3, #0
 8009034:	4606      	mov	r6, r0
 8009036:	460f      	mov	r7, r1
 8009038:	f7f7 fd66 	bl	8000b08 <__aeabi_dcmpeq>
 800903c:	2800      	cmp	r0, #0
 800903e:	d09a      	beq.n	8008f76 <_dtoa_r+0x616>
 8009040:	e7cb      	b.n	8008fda <_dtoa_r+0x67a>
 8009042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009044:	2a00      	cmp	r2, #0
 8009046:	f000 808b 	beq.w	8009160 <_dtoa_r+0x800>
 800904a:	9a06      	ldr	r2, [sp, #24]
 800904c:	2a01      	cmp	r2, #1
 800904e:	dc6e      	bgt.n	800912e <_dtoa_r+0x7ce>
 8009050:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009052:	2a00      	cmp	r2, #0
 8009054:	d067      	beq.n	8009126 <_dtoa_r+0x7c6>
 8009056:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800905a:	9f07      	ldr	r7, [sp, #28]
 800905c:	9d05      	ldr	r5, [sp, #20]
 800905e:	9a05      	ldr	r2, [sp, #20]
 8009060:	2101      	movs	r1, #1
 8009062:	441a      	add	r2, r3
 8009064:	4620      	mov	r0, r4
 8009066:	9205      	str	r2, [sp, #20]
 8009068:	4498      	add	r8, r3
 800906a:	f000 feb0 	bl	8009dce <__i2b>
 800906e:	4606      	mov	r6, r0
 8009070:	2d00      	cmp	r5, #0
 8009072:	dd0c      	ble.n	800908e <_dtoa_r+0x72e>
 8009074:	f1b8 0f00 	cmp.w	r8, #0
 8009078:	dd09      	ble.n	800908e <_dtoa_r+0x72e>
 800907a:	4545      	cmp	r5, r8
 800907c:	9a05      	ldr	r2, [sp, #20]
 800907e:	462b      	mov	r3, r5
 8009080:	bfa8      	it	ge
 8009082:	4643      	movge	r3, r8
 8009084:	1ad2      	subs	r2, r2, r3
 8009086:	9205      	str	r2, [sp, #20]
 8009088:	1aed      	subs	r5, r5, r3
 800908a:	eba8 0803 	sub.w	r8, r8, r3
 800908e:	9b07      	ldr	r3, [sp, #28]
 8009090:	b1eb      	cbz	r3, 80090ce <_dtoa_r+0x76e>
 8009092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009094:	2b00      	cmp	r3, #0
 8009096:	d067      	beq.n	8009168 <_dtoa_r+0x808>
 8009098:	b18f      	cbz	r7, 80090be <_dtoa_r+0x75e>
 800909a:	4631      	mov	r1, r6
 800909c:	463a      	mov	r2, r7
 800909e:	4620      	mov	r0, r4
 80090a0:	f000 ff34 	bl	8009f0c <__pow5mult>
 80090a4:	9a04      	ldr	r2, [sp, #16]
 80090a6:	4601      	mov	r1, r0
 80090a8:	4606      	mov	r6, r0
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 fe98 	bl	8009de0 <__multiply>
 80090b0:	9904      	ldr	r1, [sp, #16]
 80090b2:	9008      	str	r0, [sp, #32]
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 fdac 	bl	8009c12 <_Bfree>
 80090ba:	9b08      	ldr	r3, [sp, #32]
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	9b07      	ldr	r3, [sp, #28]
 80090c0:	1bda      	subs	r2, r3, r7
 80090c2:	d004      	beq.n	80090ce <_dtoa_r+0x76e>
 80090c4:	9904      	ldr	r1, [sp, #16]
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 ff20 	bl	8009f0c <__pow5mult>
 80090cc:	9004      	str	r0, [sp, #16]
 80090ce:	2101      	movs	r1, #1
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 fe7c 	bl	8009dce <__i2b>
 80090d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090d8:	4607      	mov	r7, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 81d0 	beq.w	8009480 <_dtoa_r+0xb20>
 80090e0:	461a      	mov	r2, r3
 80090e2:	4601      	mov	r1, r0
 80090e4:	4620      	mov	r0, r4
 80090e6:	f000 ff11 	bl	8009f0c <__pow5mult>
 80090ea:	9b06      	ldr	r3, [sp, #24]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	4607      	mov	r7, r0
 80090f0:	dc40      	bgt.n	8009174 <_dtoa_r+0x814>
 80090f2:	9b00      	ldr	r3, [sp, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d139      	bne.n	800916c <_dtoa_r+0x80c>
 80090f8:	9b01      	ldr	r3, [sp, #4]
 80090fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d136      	bne.n	8009170 <_dtoa_r+0x810>
 8009102:	9b01      	ldr	r3, [sp, #4]
 8009104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009108:	0d1b      	lsrs	r3, r3, #20
 800910a:	051b      	lsls	r3, r3, #20
 800910c:	b12b      	cbz	r3, 800911a <_dtoa_r+0x7ba>
 800910e:	9b05      	ldr	r3, [sp, #20]
 8009110:	3301      	adds	r3, #1
 8009112:	9305      	str	r3, [sp, #20]
 8009114:	f108 0801 	add.w	r8, r8, #1
 8009118:	2301      	movs	r3, #1
 800911a:	9307      	str	r3, [sp, #28]
 800911c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800911e:	2b00      	cmp	r3, #0
 8009120:	d12a      	bne.n	8009178 <_dtoa_r+0x818>
 8009122:	2001      	movs	r0, #1
 8009124:	e030      	b.n	8009188 <_dtoa_r+0x828>
 8009126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009128:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800912c:	e795      	b.n	800905a <_dtoa_r+0x6fa>
 800912e:	9b07      	ldr	r3, [sp, #28]
 8009130:	f109 37ff 	add.w	r7, r9, #4294967295
 8009134:	42bb      	cmp	r3, r7
 8009136:	bfbf      	itttt	lt
 8009138:	9b07      	ldrlt	r3, [sp, #28]
 800913a:	9707      	strlt	r7, [sp, #28]
 800913c:	1afa      	sublt	r2, r7, r3
 800913e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009140:	bfbb      	ittet	lt
 8009142:	189b      	addlt	r3, r3, r2
 8009144:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009146:	1bdf      	subge	r7, r3, r7
 8009148:	2700      	movlt	r7, #0
 800914a:	f1b9 0f00 	cmp.w	r9, #0
 800914e:	bfb5      	itete	lt
 8009150:	9b05      	ldrlt	r3, [sp, #20]
 8009152:	9d05      	ldrge	r5, [sp, #20]
 8009154:	eba3 0509 	sublt.w	r5, r3, r9
 8009158:	464b      	movge	r3, r9
 800915a:	bfb8      	it	lt
 800915c:	2300      	movlt	r3, #0
 800915e:	e77e      	b.n	800905e <_dtoa_r+0x6fe>
 8009160:	9f07      	ldr	r7, [sp, #28]
 8009162:	9d05      	ldr	r5, [sp, #20]
 8009164:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009166:	e783      	b.n	8009070 <_dtoa_r+0x710>
 8009168:	9a07      	ldr	r2, [sp, #28]
 800916a:	e7ab      	b.n	80090c4 <_dtoa_r+0x764>
 800916c:	2300      	movs	r3, #0
 800916e:	e7d4      	b.n	800911a <_dtoa_r+0x7ba>
 8009170:	9b00      	ldr	r3, [sp, #0]
 8009172:	e7d2      	b.n	800911a <_dtoa_r+0x7ba>
 8009174:	2300      	movs	r3, #0
 8009176:	9307      	str	r3, [sp, #28]
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800917e:	6918      	ldr	r0, [r3, #16]
 8009180:	f000 fdd7 	bl	8009d32 <__hi0bits>
 8009184:	f1c0 0020 	rsb	r0, r0, #32
 8009188:	4440      	add	r0, r8
 800918a:	f010 001f 	ands.w	r0, r0, #31
 800918e:	d047      	beq.n	8009220 <_dtoa_r+0x8c0>
 8009190:	f1c0 0320 	rsb	r3, r0, #32
 8009194:	2b04      	cmp	r3, #4
 8009196:	dd3b      	ble.n	8009210 <_dtoa_r+0x8b0>
 8009198:	9b05      	ldr	r3, [sp, #20]
 800919a:	f1c0 001c 	rsb	r0, r0, #28
 800919e:	4403      	add	r3, r0
 80091a0:	9305      	str	r3, [sp, #20]
 80091a2:	4405      	add	r5, r0
 80091a4:	4480      	add	r8, r0
 80091a6:	9b05      	ldr	r3, [sp, #20]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	dd05      	ble.n	80091b8 <_dtoa_r+0x858>
 80091ac:	461a      	mov	r2, r3
 80091ae:	9904      	ldr	r1, [sp, #16]
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fef9 	bl	8009fa8 <__lshift>
 80091b6:	9004      	str	r0, [sp, #16]
 80091b8:	f1b8 0f00 	cmp.w	r8, #0
 80091bc:	dd05      	ble.n	80091ca <_dtoa_r+0x86a>
 80091be:	4639      	mov	r1, r7
 80091c0:	4642      	mov	r2, r8
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 fef0 	bl	8009fa8 <__lshift>
 80091c8:	4607      	mov	r7, r0
 80091ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091cc:	b353      	cbz	r3, 8009224 <_dtoa_r+0x8c4>
 80091ce:	4639      	mov	r1, r7
 80091d0:	9804      	ldr	r0, [sp, #16]
 80091d2:	f000 ff3d 	bl	800a050 <__mcmp>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	da24      	bge.n	8009224 <_dtoa_r+0x8c4>
 80091da:	2300      	movs	r3, #0
 80091dc:	220a      	movs	r2, #10
 80091de:	9904      	ldr	r1, [sp, #16]
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fd2d 	bl	8009c40 <__multadd>
 80091e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e8:	9004      	str	r0, [sp, #16]
 80091ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 814d 	beq.w	800948e <_dtoa_r+0xb2e>
 80091f4:	2300      	movs	r3, #0
 80091f6:	4631      	mov	r1, r6
 80091f8:	220a      	movs	r2, #10
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 fd20 	bl	8009c40 <__multadd>
 8009200:	9b02      	ldr	r3, [sp, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	4606      	mov	r6, r0
 8009206:	dc4f      	bgt.n	80092a8 <_dtoa_r+0x948>
 8009208:	9b06      	ldr	r3, [sp, #24]
 800920a:	2b02      	cmp	r3, #2
 800920c:	dd4c      	ble.n	80092a8 <_dtoa_r+0x948>
 800920e:	e011      	b.n	8009234 <_dtoa_r+0x8d4>
 8009210:	d0c9      	beq.n	80091a6 <_dtoa_r+0x846>
 8009212:	9a05      	ldr	r2, [sp, #20]
 8009214:	331c      	adds	r3, #28
 8009216:	441a      	add	r2, r3
 8009218:	9205      	str	r2, [sp, #20]
 800921a:	441d      	add	r5, r3
 800921c:	4498      	add	r8, r3
 800921e:	e7c2      	b.n	80091a6 <_dtoa_r+0x846>
 8009220:	4603      	mov	r3, r0
 8009222:	e7f6      	b.n	8009212 <_dtoa_r+0x8b2>
 8009224:	f1b9 0f00 	cmp.w	r9, #0
 8009228:	dc38      	bgt.n	800929c <_dtoa_r+0x93c>
 800922a:	9b06      	ldr	r3, [sp, #24]
 800922c:	2b02      	cmp	r3, #2
 800922e:	dd35      	ble.n	800929c <_dtoa_r+0x93c>
 8009230:	f8cd 9008 	str.w	r9, [sp, #8]
 8009234:	9b02      	ldr	r3, [sp, #8]
 8009236:	b963      	cbnz	r3, 8009252 <_dtoa_r+0x8f2>
 8009238:	4639      	mov	r1, r7
 800923a:	2205      	movs	r2, #5
 800923c:	4620      	mov	r0, r4
 800923e:	f000 fcff 	bl	8009c40 <__multadd>
 8009242:	4601      	mov	r1, r0
 8009244:	4607      	mov	r7, r0
 8009246:	9804      	ldr	r0, [sp, #16]
 8009248:	f000 ff02 	bl	800a050 <__mcmp>
 800924c:	2800      	cmp	r0, #0
 800924e:	f73f adcc 	bgt.w	8008dea <_dtoa_r+0x48a>
 8009252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009254:	465d      	mov	r5, fp
 8009256:	ea6f 0a03 	mvn.w	sl, r3
 800925a:	f04f 0900 	mov.w	r9, #0
 800925e:	4639      	mov	r1, r7
 8009260:	4620      	mov	r0, r4
 8009262:	f000 fcd6 	bl	8009c12 <_Bfree>
 8009266:	2e00      	cmp	r6, #0
 8009268:	f43f aeb7 	beq.w	8008fda <_dtoa_r+0x67a>
 800926c:	f1b9 0f00 	cmp.w	r9, #0
 8009270:	d005      	beq.n	800927e <_dtoa_r+0x91e>
 8009272:	45b1      	cmp	r9, r6
 8009274:	d003      	beq.n	800927e <_dtoa_r+0x91e>
 8009276:	4649      	mov	r1, r9
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fcca 	bl	8009c12 <_Bfree>
 800927e:	4631      	mov	r1, r6
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fcc6 	bl	8009c12 <_Bfree>
 8009286:	e6a8      	b.n	8008fda <_dtoa_r+0x67a>
 8009288:	2700      	movs	r7, #0
 800928a:	463e      	mov	r6, r7
 800928c:	e7e1      	b.n	8009252 <_dtoa_r+0x8f2>
 800928e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009292:	463e      	mov	r6, r7
 8009294:	e5a9      	b.n	8008dea <_dtoa_r+0x48a>
 8009296:	bf00      	nop
 8009298:	40240000 	.word	0x40240000
 800929c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800929e:	f8cd 9008 	str.w	r9, [sp, #8]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 80fa 	beq.w	800949c <_dtoa_r+0xb3c>
 80092a8:	2d00      	cmp	r5, #0
 80092aa:	dd05      	ble.n	80092b8 <_dtoa_r+0x958>
 80092ac:	4631      	mov	r1, r6
 80092ae:	462a      	mov	r2, r5
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 fe79 	bl	8009fa8 <__lshift>
 80092b6:	4606      	mov	r6, r0
 80092b8:	9b07      	ldr	r3, [sp, #28]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d04c      	beq.n	8009358 <_dtoa_r+0x9f8>
 80092be:	6871      	ldr	r1, [r6, #4]
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 fc72 	bl	8009baa <_Balloc>
 80092c6:	6932      	ldr	r2, [r6, #16]
 80092c8:	3202      	adds	r2, #2
 80092ca:	4605      	mov	r5, r0
 80092cc:	0092      	lsls	r2, r2, #2
 80092ce:	f106 010c 	add.w	r1, r6, #12
 80092d2:	300c      	adds	r0, #12
 80092d4:	f000 fc5e 	bl	8009b94 <memcpy>
 80092d8:	2201      	movs	r2, #1
 80092da:	4629      	mov	r1, r5
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 fe63 	bl	8009fa8 <__lshift>
 80092e2:	9b00      	ldr	r3, [sp, #0]
 80092e4:	f8cd b014 	str.w	fp, [sp, #20]
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	46b1      	mov	r9, r6
 80092ee:	9307      	str	r3, [sp, #28]
 80092f0:	4606      	mov	r6, r0
 80092f2:	4639      	mov	r1, r7
 80092f4:	9804      	ldr	r0, [sp, #16]
 80092f6:	f7ff faa5 	bl	8008844 <quorem>
 80092fa:	4649      	mov	r1, r9
 80092fc:	4605      	mov	r5, r0
 80092fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009302:	9804      	ldr	r0, [sp, #16]
 8009304:	f000 fea4 	bl	800a050 <__mcmp>
 8009308:	4632      	mov	r2, r6
 800930a:	9000      	str	r0, [sp, #0]
 800930c:	4639      	mov	r1, r7
 800930e:	4620      	mov	r0, r4
 8009310:	f000 feb8 	bl	800a084 <__mdiff>
 8009314:	68c3      	ldr	r3, [r0, #12]
 8009316:	4602      	mov	r2, r0
 8009318:	bb03      	cbnz	r3, 800935c <_dtoa_r+0x9fc>
 800931a:	4601      	mov	r1, r0
 800931c:	9008      	str	r0, [sp, #32]
 800931e:	9804      	ldr	r0, [sp, #16]
 8009320:	f000 fe96 	bl	800a050 <__mcmp>
 8009324:	9a08      	ldr	r2, [sp, #32]
 8009326:	4603      	mov	r3, r0
 8009328:	4611      	mov	r1, r2
 800932a:	4620      	mov	r0, r4
 800932c:	9308      	str	r3, [sp, #32]
 800932e:	f000 fc70 	bl	8009c12 <_Bfree>
 8009332:	9b08      	ldr	r3, [sp, #32]
 8009334:	b9a3      	cbnz	r3, 8009360 <_dtoa_r+0xa00>
 8009336:	9a06      	ldr	r2, [sp, #24]
 8009338:	b992      	cbnz	r2, 8009360 <_dtoa_r+0xa00>
 800933a:	9a07      	ldr	r2, [sp, #28]
 800933c:	b982      	cbnz	r2, 8009360 <_dtoa_r+0xa00>
 800933e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009342:	d029      	beq.n	8009398 <_dtoa_r+0xa38>
 8009344:	9b00      	ldr	r3, [sp, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	dd01      	ble.n	800934e <_dtoa_r+0x9ee>
 800934a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800934e:	9b05      	ldr	r3, [sp, #20]
 8009350:	1c5d      	adds	r5, r3, #1
 8009352:	f883 8000 	strb.w	r8, [r3]
 8009356:	e782      	b.n	800925e <_dtoa_r+0x8fe>
 8009358:	4630      	mov	r0, r6
 800935a:	e7c2      	b.n	80092e2 <_dtoa_r+0x982>
 800935c:	2301      	movs	r3, #1
 800935e:	e7e3      	b.n	8009328 <_dtoa_r+0x9c8>
 8009360:	9a00      	ldr	r2, [sp, #0]
 8009362:	2a00      	cmp	r2, #0
 8009364:	db04      	blt.n	8009370 <_dtoa_r+0xa10>
 8009366:	d125      	bne.n	80093b4 <_dtoa_r+0xa54>
 8009368:	9a06      	ldr	r2, [sp, #24]
 800936a:	bb1a      	cbnz	r2, 80093b4 <_dtoa_r+0xa54>
 800936c:	9a07      	ldr	r2, [sp, #28]
 800936e:	bb0a      	cbnz	r2, 80093b4 <_dtoa_r+0xa54>
 8009370:	2b00      	cmp	r3, #0
 8009372:	ddec      	ble.n	800934e <_dtoa_r+0x9ee>
 8009374:	2201      	movs	r2, #1
 8009376:	9904      	ldr	r1, [sp, #16]
 8009378:	4620      	mov	r0, r4
 800937a:	f000 fe15 	bl	8009fa8 <__lshift>
 800937e:	4639      	mov	r1, r7
 8009380:	9004      	str	r0, [sp, #16]
 8009382:	f000 fe65 	bl	800a050 <__mcmp>
 8009386:	2800      	cmp	r0, #0
 8009388:	dc03      	bgt.n	8009392 <_dtoa_r+0xa32>
 800938a:	d1e0      	bne.n	800934e <_dtoa_r+0x9ee>
 800938c:	f018 0f01 	tst.w	r8, #1
 8009390:	d0dd      	beq.n	800934e <_dtoa_r+0x9ee>
 8009392:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009396:	d1d8      	bne.n	800934a <_dtoa_r+0x9ea>
 8009398:	9b05      	ldr	r3, [sp, #20]
 800939a:	9a05      	ldr	r2, [sp, #20]
 800939c:	1c5d      	adds	r5, r3, #1
 800939e:	2339      	movs	r3, #57	; 0x39
 80093a0:	7013      	strb	r3, [r2, #0]
 80093a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093a6:	2b39      	cmp	r3, #57	; 0x39
 80093a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80093ac:	d04f      	beq.n	800944e <_dtoa_r+0xaee>
 80093ae:	3301      	adds	r3, #1
 80093b0:	7013      	strb	r3, [r2, #0]
 80093b2:	e754      	b.n	800925e <_dtoa_r+0x8fe>
 80093b4:	9a05      	ldr	r2, [sp, #20]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f102 0501 	add.w	r5, r2, #1
 80093bc:	dd06      	ble.n	80093cc <_dtoa_r+0xa6c>
 80093be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80093c2:	d0e9      	beq.n	8009398 <_dtoa_r+0xa38>
 80093c4:	f108 0801 	add.w	r8, r8, #1
 80093c8:	9b05      	ldr	r3, [sp, #20]
 80093ca:	e7c2      	b.n	8009352 <_dtoa_r+0x9f2>
 80093cc:	9a02      	ldr	r2, [sp, #8]
 80093ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80093d2:	eba5 030b 	sub.w	r3, r5, fp
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d021      	beq.n	800941e <_dtoa_r+0xabe>
 80093da:	2300      	movs	r3, #0
 80093dc:	220a      	movs	r2, #10
 80093de:	9904      	ldr	r1, [sp, #16]
 80093e0:	4620      	mov	r0, r4
 80093e2:	f000 fc2d 	bl	8009c40 <__multadd>
 80093e6:	45b1      	cmp	r9, r6
 80093e8:	9004      	str	r0, [sp, #16]
 80093ea:	f04f 0300 	mov.w	r3, #0
 80093ee:	f04f 020a 	mov.w	r2, #10
 80093f2:	4649      	mov	r1, r9
 80093f4:	4620      	mov	r0, r4
 80093f6:	d105      	bne.n	8009404 <_dtoa_r+0xaa4>
 80093f8:	f000 fc22 	bl	8009c40 <__multadd>
 80093fc:	4681      	mov	r9, r0
 80093fe:	4606      	mov	r6, r0
 8009400:	9505      	str	r5, [sp, #20]
 8009402:	e776      	b.n	80092f2 <_dtoa_r+0x992>
 8009404:	f000 fc1c 	bl	8009c40 <__multadd>
 8009408:	4631      	mov	r1, r6
 800940a:	4681      	mov	r9, r0
 800940c:	2300      	movs	r3, #0
 800940e:	220a      	movs	r2, #10
 8009410:	4620      	mov	r0, r4
 8009412:	f000 fc15 	bl	8009c40 <__multadd>
 8009416:	4606      	mov	r6, r0
 8009418:	e7f2      	b.n	8009400 <_dtoa_r+0xaa0>
 800941a:	f04f 0900 	mov.w	r9, #0
 800941e:	2201      	movs	r2, #1
 8009420:	9904      	ldr	r1, [sp, #16]
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fdc0 	bl	8009fa8 <__lshift>
 8009428:	4639      	mov	r1, r7
 800942a:	9004      	str	r0, [sp, #16]
 800942c:	f000 fe10 	bl	800a050 <__mcmp>
 8009430:	2800      	cmp	r0, #0
 8009432:	dcb6      	bgt.n	80093a2 <_dtoa_r+0xa42>
 8009434:	d102      	bne.n	800943c <_dtoa_r+0xadc>
 8009436:	f018 0f01 	tst.w	r8, #1
 800943a:	d1b2      	bne.n	80093a2 <_dtoa_r+0xa42>
 800943c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009440:	2b30      	cmp	r3, #48	; 0x30
 8009442:	f105 32ff 	add.w	r2, r5, #4294967295
 8009446:	f47f af0a 	bne.w	800925e <_dtoa_r+0x8fe>
 800944a:	4615      	mov	r5, r2
 800944c:	e7f6      	b.n	800943c <_dtoa_r+0xadc>
 800944e:	4593      	cmp	fp, r2
 8009450:	d105      	bne.n	800945e <_dtoa_r+0xafe>
 8009452:	2331      	movs	r3, #49	; 0x31
 8009454:	f10a 0a01 	add.w	sl, sl, #1
 8009458:	f88b 3000 	strb.w	r3, [fp]
 800945c:	e6ff      	b.n	800925e <_dtoa_r+0x8fe>
 800945e:	4615      	mov	r5, r2
 8009460:	e79f      	b.n	80093a2 <_dtoa_r+0xa42>
 8009462:	f8df b064 	ldr.w	fp, [pc, #100]	; 80094c8 <_dtoa_r+0xb68>
 8009466:	e007      	b.n	8009478 <_dtoa_r+0xb18>
 8009468:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800946a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80094cc <_dtoa_r+0xb6c>
 800946e:	b11b      	cbz	r3, 8009478 <_dtoa_r+0xb18>
 8009470:	f10b 0308 	add.w	r3, fp, #8
 8009474:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	4658      	mov	r0, fp
 800947a:	b017      	add	sp, #92	; 0x5c
 800947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009480:	9b06      	ldr	r3, [sp, #24]
 8009482:	2b01      	cmp	r3, #1
 8009484:	f77f ae35 	ble.w	80090f2 <_dtoa_r+0x792>
 8009488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800948a:	9307      	str	r3, [sp, #28]
 800948c:	e649      	b.n	8009122 <_dtoa_r+0x7c2>
 800948e:	9b02      	ldr	r3, [sp, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	dc03      	bgt.n	800949c <_dtoa_r+0xb3c>
 8009494:	9b06      	ldr	r3, [sp, #24]
 8009496:	2b02      	cmp	r3, #2
 8009498:	f73f aecc 	bgt.w	8009234 <_dtoa_r+0x8d4>
 800949c:	465d      	mov	r5, fp
 800949e:	4639      	mov	r1, r7
 80094a0:	9804      	ldr	r0, [sp, #16]
 80094a2:	f7ff f9cf 	bl	8008844 <quorem>
 80094a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80094aa:	f805 8b01 	strb.w	r8, [r5], #1
 80094ae:	9a02      	ldr	r2, [sp, #8]
 80094b0:	eba5 030b 	sub.w	r3, r5, fp
 80094b4:	429a      	cmp	r2, r3
 80094b6:	ddb0      	ble.n	800941a <_dtoa_r+0xaba>
 80094b8:	2300      	movs	r3, #0
 80094ba:	220a      	movs	r2, #10
 80094bc:	9904      	ldr	r1, [sp, #16]
 80094be:	4620      	mov	r0, r4
 80094c0:	f000 fbbe 	bl	8009c40 <__multadd>
 80094c4:	9004      	str	r0, [sp, #16]
 80094c6:	e7ea      	b.n	800949e <_dtoa_r+0xb3e>
 80094c8:	0800b2fb 	.word	0x0800b2fb
 80094cc:	0800b1c0 	.word	0x0800b1c0

080094d0 <rshift>:
 80094d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094d2:	6906      	ldr	r6, [r0, #16]
 80094d4:	114b      	asrs	r3, r1, #5
 80094d6:	429e      	cmp	r6, r3
 80094d8:	f100 0414 	add.w	r4, r0, #20
 80094dc:	dd30      	ble.n	8009540 <rshift+0x70>
 80094de:	f011 011f 	ands.w	r1, r1, #31
 80094e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80094e6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80094ea:	d108      	bne.n	80094fe <rshift+0x2e>
 80094ec:	4621      	mov	r1, r4
 80094ee:	42b2      	cmp	r2, r6
 80094f0:	460b      	mov	r3, r1
 80094f2:	d211      	bcs.n	8009518 <rshift+0x48>
 80094f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80094f8:	f841 3b04 	str.w	r3, [r1], #4
 80094fc:	e7f7      	b.n	80094ee <rshift+0x1e>
 80094fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009502:	f1c1 0c20 	rsb	ip, r1, #32
 8009506:	40cd      	lsrs	r5, r1
 8009508:	3204      	adds	r2, #4
 800950a:	4623      	mov	r3, r4
 800950c:	42b2      	cmp	r2, r6
 800950e:	4617      	mov	r7, r2
 8009510:	d30c      	bcc.n	800952c <rshift+0x5c>
 8009512:	601d      	str	r5, [r3, #0]
 8009514:	b105      	cbz	r5, 8009518 <rshift+0x48>
 8009516:	3304      	adds	r3, #4
 8009518:	1b1a      	subs	r2, r3, r4
 800951a:	42a3      	cmp	r3, r4
 800951c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009520:	bf08      	it	eq
 8009522:	2300      	moveq	r3, #0
 8009524:	6102      	str	r2, [r0, #16]
 8009526:	bf08      	it	eq
 8009528:	6143      	streq	r3, [r0, #20]
 800952a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800952c:	683f      	ldr	r7, [r7, #0]
 800952e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009532:	433d      	orrs	r5, r7
 8009534:	f843 5b04 	str.w	r5, [r3], #4
 8009538:	f852 5b04 	ldr.w	r5, [r2], #4
 800953c:	40cd      	lsrs	r5, r1
 800953e:	e7e5      	b.n	800950c <rshift+0x3c>
 8009540:	4623      	mov	r3, r4
 8009542:	e7e9      	b.n	8009518 <rshift+0x48>

08009544 <__hexdig_fun>:
 8009544:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009548:	2b09      	cmp	r3, #9
 800954a:	d802      	bhi.n	8009552 <__hexdig_fun+0xe>
 800954c:	3820      	subs	r0, #32
 800954e:	b2c0      	uxtb	r0, r0
 8009550:	4770      	bx	lr
 8009552:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009556:	2b05      	cmp	r3, #5
 8009558:	d801      	bhi.n	800955e <__hexdig_fun+0x1a>
 800955a:	3847      	subs	r0, #71	; 0x47
 800955c:	e7f7      	b.n	800954e <__hexdig_fun+0xa>
 800955e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009562:	2b05      	cmp	r3, #5
 8009564:	d801      	bhi.n	800956a <__hexdig_fun+0x26>
 8009566:	3827      	subs	r0, #39	; 0x27
 8009568:	e7f1      	b.n	800954e <__hexdig_fun+0xa>
 800956a:	2000      	movs	r0, #0
 800956c:	4770      	bx	lr

0800956e <__gethex>:
 800956e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009572:	b08b      	sub	sp, #44	; 0x2c
 8009574:	468a      	mov	sl, r1
 8009576:	9002      	str	r0, [sp, #8]
 8009578:	9816      	ldr	r0, [sp, #88]	; 0x58
 800957a:	9306      	str	r3, [sp, #24]
 800957c:	4690      	mov	r8, r2
 800957e:	f000 fadf 	bl	8009b40 <__localeconv_l>
 8009582:	6803      	ldr	r3, [r0, #0]
 8009584:	9303      	str	r3, [sp, #12]
 8009586:	4618      	mov	r0, r3
 8009588:	f7f6 fe42 	bl	8000210 <strlen>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	9001      	str	r0, [sp, #4]
 8009590:	4403      	add	r3, r0
 8009592:	f04f 0b00 	mov.w	fp, #0
 8009596:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800959a:	9307      	str	r3, [sp, #28]
 800959c:	f8da 3000 	ldr.w	r3, [sl]
 80095a0:	3302      	adds	r3, #2
 80095a2:	461f      	mov	r7, r3
 80095a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80095a8:	2830      	cmp	r0, #48	; 0x30
 80095aa:	d06c      	beq.n	8009686 <__gethex+0x118>
 80095ac:	f7ff ffca 	bl	8009544 <__hexdig_fun>
 80095b0:	4604      	mov	r4, r0
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d16a      	bne.n	800968c <__gethex+0x11e>
 80095b6:	9a01      	ldr	r2, [sp, #4]
 80095b8:	9903      	ldr	r1, [sp, #12]
 80095ba:	4638      	mov	r0, r7
 80095bc:	f001 fc40 	bl	800ae40 <strncmp>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d166      	bne.n	8009692 <__gethex+0x124>
 80095c4:	9b01      	ldr	r3, [sp, #4]
 80095c6:	5cf8      	ldrb	r0, [r7, r3]
 80095c8:	18fe      	adds	r6, r7, r3
 80095ca:	f7ff ffbb 	bl	8009544 <__hexdig_fun>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d062      	beq.n	8009698 <__gethex+0x12a>
 80095d2:	4633      	mov	r3, r6
 80095d4:	7818      	ldrb	r0, [r3, #0]
 80095d6:	2830      	cmp	r0, #48	; 0x30
 80095d8:	461f      	mov	r7, r3
 80095da:	f103 0301 	add.w	r3, r3, #1
 80095de:	d0f9      	beq.n	80095d4 <__gethex+0x66>
 80095e0:	f7ff ffb0 	bl	8009544 <__hexdig_fun>
 80095e4:	fab0 f580 	clz	r5, r0
 80095e8:	096d      	lsrs	r5, r5, #5
 80095ea:	4634      	mov	r4, r6
 80095ec:	f04f 0b01 	mov.w	fp, #1
 80095f0:	463a      	mov	r2, r7
 80095f2:	4616      	mov	r6, r2
 80095f4:	3201      	adds	r2, #1
 80095f6:	7830      	ldrb	r0, [r6, #0]
 80095f8:	f7ff ffa4 	bl	8009544 <__hexdig_fun>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d1f8      	bne.n	80095f2 <__gethex+0x84>
 8009600:	9a01      	ldr	r2, [sp, #4]
 8009602:	9903      	ldr	r1, [sp, #12]
 8009604:	4630      	mov	r0, r6
 8009606:	f001 fc1b 	bl	800ae40 <strncmp>
 800960a:	b950      	cbnz	r0, 8009622 <__gethex+0xb4>
 800960c:	b954      	cbnz	r4, 8009624 <__gethex+0xb6>
 800960e:	9b01      	ldr	r3, [sp, #4]
 8009610:	18f4      	adds	r4, r6, r3
 8009612:	4622      	mov	r2, r4
 8009614:	4616      	mov	r6, r2
 8009616:	3201      	adds	r2, #1
 8009618:	7830      	ldrb	r0, [r6, #0]
 800961a:	f7ff ff93 	bl	8009544 <__hexdig_fun>
 800961e:	2800      	cmp	r0, #0
 8009620:	d1f8      	bne.n	8009614 <__gethex+0xa6>
 8009622:	b10c      	cbz	r4, 8009628 <__gethex+0xba>
 8009624:	1ba4      	subs	r4, r4, r6
 8009626:	00a4      	lsls	r4, r4, #2
 8009628:	7833      	ldrb	r3, [r6, #0]
 800962a:	2b50      	cmp	r3, #80	; 0x50
 800962c:	d001      	beq.n	8009632 <__gethex+0xc4>
 800962e:	2b70      	cmp	r3, #112	; 0x70
 8009630:	d140      	bne.n	80096b4 <__gethex+0x146>
 8009632:	7873      	ldrb	r3, [r6, #1]
 8009634:	2b2b      	cmp	r3, #43	; 0x2b
 8009636:	d031      	beq.n	800969c <__gethex+0x12e>
 8009638:	2b2d      	cmp	r3, #45	; 0x2d
 800963a:	d033      	beq.n	80096a4 <__gethex+0x136>
 800963c:	1c71      	adds	r1, r6, #1
 800963e:	f04f 0900 	mov.w	r9, #0
 8009642:	7808      	ldrb	r0, [r1, #0]
 8009644:	f7ff ff7e 	bl	8009544 <__hexdig_fun>
 8009648:	1e43      	subs	r3, r0, #1
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b18      	cmp	r3, #24
 800964e:	d831      	bhi.n	80096b4 <__gethex+0x146>
 8009650:	f1a0 0210 	sub.w	r2, r0, #16
 8009654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009658:	f7ff ff74 	bl	8009544 <__hexdig_fun>
 800965c:	1e43      	subs	r3, r0, #1
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b18      	cmp	r3, #24
 8009662:	d922      	bls.n	80096aa <__gethex+0x13c>
 8009664:	f1b9 0f00 	cmp.w	r9, #0
 8009668:	d000      	beq.n	800966c <__gethex+0xfe>
 800966a:	4252      	negs	r2, r2
 800966c:	4414      	add	r4, r2
 800966e:	f8ca 1000 	str.w	r1, [sl]
 8009672:	b30d      	cbz	r5, 80096b8 <__gethex+0x14a>
 8009674:	f1bb 0f00 	cmp.w	fp, #0
 8009678:	bf0c      	ite	eq
 800967a:	2706      	moveq	r7, #6
 800967c:	2700      	movne	r7, #0
 800967e:	4638      	mov	r0, r7
 8009680:	b00b      	add	sp, #44	; 0x2c
 8009682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009686:	f10b 0b01 	add.w	fp, fp, #1
 800968a:	e78a      	b.n	80095a2 <__gethex+0x34>
 800968c:	2500      	movs	r5, #0
 800968e:	462c      	mov	r4, r5
 8009690:	e7ae      	b.n	80095f0 <__gethex+0x82>
 8009692:	463e      	mov	r6, r7
 8009694:	2501      	movs	r5, #1
 8009696:	e7c7      	b.n	8009628 <__gethex+0xba>
 8009698:	4604      	mov	r4, r0
 800969a:	e7fb      	b.n	8009694 <__gethex+0x126>
 800969c:	f04f 0900 	mov.w	r9, #0
 80096a0:	1cb1      	adds	r1, r6, #2
 80096a2:	e7ce      	b.n	8009642 <__gethex+0xd4>
 80096a4:	f04f 0901 	mov.w	r9, #1
 80096a8:	e7fa      	b.n	80096a0 <__gethex+0x132>
 80096aa:	230a      	movs	r3, #10
 80096ac:	fb03 0202 	mla	r2, r3, r2, r0
 80096b0:	3a10      	subs	r2, #16
 80096b2:	e7cf      	b.n	8009654 <__gethex+0xe6>
 80096b4:	4631      	mov	r1, r6
 80096b6:	e7da      	b.n	800966e <__gethex+0x100>
 80096b8:	1bf3      	subs	r3, r6, r7
 80096ba:	3b01      	subs	r3, #1
 80096bc:	4629      	mov	r1, r5
 80096be:	2b07      	cmp	r3, #7
 80096c0:	dc49      	bgt.n	8009756 <__gethex+0x1e8>
 80096c2:	9802      	ldr	r0, [sp, #8]
 80096c4:	f000 fa71 	bl	8009baa <_Balloc>
 80096c8:	9b01      	ldr	r3, [sp, #4]
 80096ca:	f100 0914 	add.w	r9, r0, #20
 80096ce:	f04f 0b00 	mov.w	fp, #0
 80096d2:	f1c3 0301 	rsb	r3, r3, #1
 80096d6:	4605      	mov	r5, r0
 80096d8:	f8cd 9010 	str.w	r9, [sp, #16]
 80096dc:	46da      	mov	sl, fp
 80096de:	9308      	str	r3, [sp, #32]
 80096e0:	42b7      	cmp	r7, r6
 80096e2:	d33b      	bcc.n	800975c <__gethex+0x1ee>
 80096e4:	9804      	ldr	r0, [sp, #16]
 80096e6:	f840 ab04 	str.w	sl, [r0], #4
 80096ea:	eba0 0009 	sub.w	r0, r0, r9
 80096ee:	1080      	asrs	r0, r0, #2
 80096f0:	6128      	str	r0, [r5, #16]
 80096f2:	0147      	lsls	r7, r0, #5
 80096f4:	4650      	mov	r0, sl
 80096f6:	f000 fb1c 	bl	8009d32 <__hi0bits>
 80096fa:	f8d8 6000 	ldr.w	r6, [r8]
 80096fe:	1a3f      	subs	r7, r7, r0
 8009700:	42b7      	cmp	r7, r6
 8009702:	dd64      	ble.n	80097ce <__gethex+0x260>
 8009704:	1bbf      	subs	r7, r7, r6
 8009706:	4639      	mov	r1, r7
 8009708:	4628      	mov	r0, r5
 800970a:	f000 fe2b 	bl	800a364 <__any_on>
 800970e:	4682      	mov	sl, r0
 8009710:	b178      	cbz	r0, 8009732 <__gethex+0x1c4>
 8009712:	1e7b      	subs	r3, r7, #1
 8009714:	1159      	asrs	r1, r3, #5
 8009716:	f003 021f 	and.w	r2, r3, #31
 800971a:	f04f 0a01 	mov.w	sl, #1
 800971e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009722:	fa0a f202 	lsl.w	r2, sl, r2
 8009726:	420a      	tst	r2, r1
 8009728:	d003      	beq.n	8009732 <__gethex+0x1c4>
 800972a:	4553      	cmp	r3, sl
 800972c:	dc46      	bgt.n	80097bc <__gethex+0x24e>
 800972e:	f04f 0a02 	mov.w	sl, #2
 8009732:	4639      	mov	r1, r7
 8009734:	4628      	mov	r0, r5
 8009736:	f7ff fecb 	bl	80094d0 <rshift>
 800973a:	443c      	add	r4, r7
 800973c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009740:	42a3      	cmp	r3, r4
 8009742:	da52      	bge.n	80097ea <__gethex+0x27c>
 8009744:	4629      	mov	r1, r5
 8009746:	9802      	ldr	r0, [sp, #8]
 8009748:	f000 fa63 	bl	8009c12 <_Bfree>
 800974c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800974e:	2300      	movs	r3, #0
 8009750:	6013      	str	r3, [r2, #0]
 8009752:	27a3      	movs	r7, #163	; 0xa3
 8009754:	e793      	b.n	800967e <__gethex+0x110>
 8009756:	3101      	adds	r1, #1
 8009758:	105b      	asrs	r3, r3, #1
 800975a:	e7b0      	b.n	80096be <__gethex+0x150>
 800975c:	1e73      	subs	r3, r6, #1
 800975e:	9305      	str	r3, [sp, #20]
 8009760:	9a07      	ldr	r2, [sp, #28]
 8009762:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009766:	4293      	cmp	r3, r2
 8009768:	d018      	beq.n	800979c <__gethex+0x22e>
 800976a:	f1bb 0f20 	cmp.w	fp, #32
 800976e:	d107      	bne.n	8009780 <__gethex+0x212>
 8009770:	9b04      	ldr	r3, [sp, #16]
 8009772:	f8c3 a000 	str.w	sl, [r3]
 8009776:	3304      	adds	r3, #4
 8009778:	f04f 0a00 	mov.w	sl, #0
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	46d3      	mov	fp, sl
 8009780:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009784:	f7ff fede 	bl	8009544 <__hexdig_fun>
 8009788:	f000 000f 	and.w	r0, r0, #15
 800978c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009790:	ea4a 0a00 	orr.w	sl, sl, r0
 8009794:	f10b 0b04 	add.w	fp, fp, #4
 8009798:	9b05      	ldr	r3, [sp, #20]
 800979a:	e00d      	b.n	80097b8 <__gethex+0x24a>
 800979c:	9b05      	ldr	r3, [sp, #20]
 800979e:	9a08      	ldr	r2, [sp, #32]
 80097a0:	4413      	add	r3, r2
 80097a2:	42bb      	cmp	r3, r7
 80097a4:	d3e1      	bcc.n	800976a <__gethex+0x1fc>
 80097a6:	4618      	mov	r0, r3
 80097a8:	9a01      	ldr	r2, [sp, #4]
 80097aa:	9903      	ldr	r1, [sp, #12]
 80097ac:	9309      	str	r3, [sp, #36]	; 0x24
 80097ae:	f001 fb47 	bl	800ae40 <strncmp>
 80097b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d1d8      	bne.n	800976a <__gethex+0x1fc>
 80097b8:	461e      	mov	r6, r3
 80097ba:	e791      	b.n	80096e0 <__gethex+0x172>
 80097bc:	1eb9      	subs	r1, r7, #2
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 fdd0 	bl	800a364 <__any_on>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d0b2      	beq.n	800972e <__gethex+0x1c0>
 80097c8:	f04f 0a03 	mov.w	sl, #3
 80097cc:	e7b1      	b.n	8009732 <__gethex+0x1c4>
 80097ce:	da09      	bge.n	80097e4 <__gethex+0x276>
 80097d0:	1bf7      	subs	r7, r6, r7
 80097d2:	4629      	mov	r1, r5
 80097d4:	463a      	mov	r2, r7
 80097d6:	9802      	ldr	r0, [sp, #8]
 80097d8:	f000 fbe6 	bl	8009fa8 <__lshift>
 80097dc:	1be4      	subs	r4, r4, r7
 80097de:	4605      	mov	r5, r0
 80097e0:	f100 0914 	add.w	r9, r0, #20
 80097e4:	f04f 0a00 	mov.w	sl, #0
 80097e8:	e7a8      	b.n	800973c <__gethex+0x1ce>
 80097ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80097ee:	42a0      	cmp	r0, r4
 80097f0:	dd6a      	ble.n	80098c8 <__gethex+0x35a>
 80097f2:	1b04      	subs	r4, r0, r4
 80097f4:	42a6      	cmp	r6, r4
 80097f6:	dc2e      	bgt.n	8009856 <__gethex+0x2e8>
 80097f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d022      	beq.n	8009846 <__gethex+0x2d8>
 8009800:	2b03      	cmp	r3, #3
 8009802:	d024      	beq.n	800984e <__gethex+0x2e0>
 8009804:	2b01      	cmp	r3, #1
 8009806:	d115      	bne.n	8009834 <__gethex+0x2c6>
 8009808:	42a6      	cmp	r6, r4
 800980a:	d113      	bne.n	8009834 <__gethex+0x2c6>
 800980c:	2e01      	cmp	r6, #1
 800980e:	dc0b      	bgt.n	8009828 <__gethex+0x2ba>
 8009810:	9a06      	ldr	r2, [sp, #24]
 8009812:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	2301      	movs	r3, #1
 800981a:	612b      	str	r3, [r5, #16]
 800981c:	f8c9 3000 	str.w	r3, [r9]
 8009820:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009822:	2762      	movs	r7, #98	; 0x62
 8009824:	601d      	str	r5, [r3, #0]
 8009826:	e72a      	b.n	800967e <__gethex+0x110>
 8009828:	1e71      	subs	r1, r6, #1
 800982a:	4628      	mov	r0, r5
 800982c:	f000 fd9a 	bl	800a364 <__any_on>
 8009830:	2800      	cmp	r0, #0
 8009832:	d1ed      	bne.n	8009810 <__gethex+0x2a2>
 8009834:	4629      	mov	r1, r5
 8009836:	9802      	ldr	r0, [sp, #8]
 8009838:	f000 f9eb 	bl	8009c12 <_Bfree>
 800983c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800983e:	2300      	movs	r3, #0
 8009840:	6013      	str	r3, [r2, #0]
 8009842:	2750      	movs	r7, #80	; 0x50
 8009844:	e71b      	b.n	800967e <__gethex+0x110>
 8009846:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009848:	2b00      	cmp	r3, #0
 800984a:	d0e1      	beq.n	8009810 <__gethex+0x2a2>
 800984c:	e7f2      	b.n	8009834 <__gethex+0x2c6>
 800984e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1dd      	bne.n	8009810 <__gethex+0x2a2>
 8009854:	e7ee      	b.n	8009834 <__gethex+0x2c6>
 8009856:	1e67      	subs	r7, r4, #1
 8009858:	f1ba 0f00 	cmp.w	sl, #0
 800985c:	d131      	bne.n	80098c2 <__gethex+0x354>
 800985e:	b127      	cbz	r7, 800986a <__gethex+0x2fc>
 8009860:	4639      	mov	r1, r7
 8009862:	4628      	mov	r0, r5
 8009864:	f000 fd7e 	bl	800a364 <__any_on>
 8009868:	4682      	mov	sl, r0
 800986a:	117a      	asrs	r2, r7, #5
 800986c:	2301      	movs	r3, #1
 800986e:	f007 071f 	and.w	r7, r7, #31
 8009872:	fa03 f707 	lsl.w	r7, r3, r7
 8009876:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800987a:	4621      	mov	r1, r4
 800987c:	421f      	tst	r7, r3
 800987e:	4628      	mov	r0, r5
 8009880:	bf18      	it	ne
 8009882:	f04a 0a02 	orrne.w	sl, sl, #2
 8009886:	1b36      	subs	r6, r6, r4
 8009888:	f7ff fe22 	bl	80094d0 <rshift>
 800988c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009890:	2702      	movs	r7, #2
 8009892:	f1ba 0f00 	cmp.w	sl, #0
 8009896:	d048      	beq.n	800992a <__gethex+0x3bc>
 8009898:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800989c:	2b02      	cmp	r3, #2
 800989e:	d015      	beq.n	80098cc <__gethex+0x35e>
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d017      	beq.n	80098d4 <__gethex+0x366>
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d109      	bne.n	80098bc <__gethex+0x34e>
 80098a8:	f01a 0f02 	tst.w	sl, #2
 80098ac:	d006      	beq.n	80098bc <__gethex+0x34e>
 80098ae:	f8d9 3000 	ldr.w	r3, [r9]
 80098b2:	ea4a 0a03 	orr.w	sl, sl, r3
 80098b6:	f01a 0f01 	tst.w	sl, #1
 80098ba:	d10e      	bne.n	80098da <__gethex+0x36c>
 80098bc:	f047 0710 	orr.w	r7, r7, #16
 80098c0:	e033      	b.n	800992a <__gethex+0x3bc>
 80098c2:	f04f 0a01 	mov.w	sl, #1
 80098c6:	e7d0      	b.n	800986a <__gethex+0x2fc>
 80098c8:	2701      	movs	r7, #1
 80098ca:	e7e2      	b.n	8009892 <__gethex+0x324>
 80098cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098ce:	f1c3 0301 	rsb	r3, r3, #1
 80098d2:	9315      	str	r3, [sp, #84]	; 0x54
 80098d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0f0      	beq.n	80098bc <__gethex+0x34e>
 80098da:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80098de:	f105 0314 	add.w	r3, r5, #20
 80098e2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80098e6:	eb03 010a 	add.w	r1, r3, sl
 80098ea:	f04f 0c00 	mov.w	ip, #0
 80098ee:	4618      	mov	r0, r3
 80098f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80098f8:	d01c      	beq.n	8009934 <__gethex+0x3c6>
 80098fa:	3201      	adds	r2, #1
 80098fc:	6002      	str	r2, [r0, #0]
 80098fe:	2f02      	cmp	r7, #2
 8009900:	f105 0314 	add.w	r3, r5, #20
 8009904:	d138      	bne.n	8009978 <__gethex+0x40a>
 8009906:	f8d8 2000 	ldr.w	r2, [r8]
 800990a:	3a01      	subs	r2, #1
 800990c:	42b2      	cmp	r2, r6
 800990e:	d10a      	bne.n	8009926 <__gethex+0x3b8>
 8009910:	1171      	asrs	r1, r6, #5
 8009912:	2201      	movs	r2, #1
 8009914:	f006 061f 	and.w	r6, r6, #31
 8009918:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800991c:	fa02 f606 	lsl.w	r6, r2, r6
 8009920:	421e      	tst	r6, r3
 8009922:	bf18      	it	ne
 8009924:	4617      	movne	r7, r2
 8009926:	f047 0720 	orr.w	r7, r7, #32
 800992a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800992c:	601d      	str	r5, [r3, #0]
 800992e:	9b06      	ldr	r3, [sp, #24]
 8009930:	601c      	str	r4, [r3, #0]
 8009932:	e6a4      	b.n	800967e <__gethex+0x110>
 8009934:	4299      	cmp	r1, r3
 8009936:	f843 cc04 	str.w	ip, [r3, #-4]
 800993a:	d8d8      	bhi.n	80098ee <__gethex+0x380>
 800993c:	68ab      	ldr	r3, [r5, #8]
 800993e:	4599      	cmp	r9, r3
 8009940:	db12      	blt.n	8009968 <__gethex+0x3fa>
 8009942:	6869      	ldr	r1, [r5, #4]
 8009944:	9802      	ldr	r0, [sp, #8]
 8009946:	3101      	adds	r1, #1
 8009948:	f000 f92f 	bl	8009baa <_Balloc>
 800994c:	692a      	ldr	r2, [r5, #16]
 800994e:	3202      	adds	r2, #2
 8009950:	f105 010c 	add.w	r1, r5, #12
 8009954:	4683      	mov	fp, r0
 8009956:	0092      	lsls	r2, r2, #2
 8009958:	300c      	adds	r0, #12
 800995a:	f000 f91b 	bl	8009b94 <memcpy>
 800995e:	4629      	mov	r1, r5
 8009960:	9802      	ldr	r0, [sp, #8]
 8009962:	f000 f956 	bl	8009c12 <_Bfree>
 8009966:	465d      	mov	r5, fp
 8009968:	692b      	ldr	r3, [r5, #16]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009970:	612a      	str	r2, [r5, #16]
 8009972:	2201      	movs	r2, #1
 8009974:	615a      	str	r2, [r3, #20]
 8009976:	e7c2      	b.n	80098fe <__gethex+0x390>
 8009978:	692a      	ldr	r2, [r5, #16]
 800997a:	454a      	cmp	r2, r9
 800997c:	dd0b      	ble.n	8009996 <__gethex+0x428>
 800997e:	2101      	movs	r1, #1
 8009980:	4628      	mov	r0, r5
 8009982:	f7ff fda5 	bl	80094d0 <rshift>
 8009986:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800998a:	3401      	adds	r4, #1
 800998c:	42a3      	cmp	r3, r4
 800998e:	f6ff aed9 	blt.w	8009744 <__gethex+0x1d6>
 8009992:	2701      	movs	r7, #1
 8009994:	e7c7      	b.n	8009926 <__gethex+0x3b8>
 8009996:	f016 061f 	ands.w	r6, r6, #31
 800999a:	d0fa      	beq.n	8009992 <__gethex+0x424>
 800999c:	449a      	add	sl, r3
 800999e:	f1c6 0620 	rsb	r6, r6, #32
 80099a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80099a6:	f000 f9c4 	bl	8009d32 <__hi0bits>
 80099aa:	42b0      	cmp	r0, r6
 80099ac:	dbe7      	blt.n	800997e <__gethex+0x410>
 80099ae:	e7f0      	b.n	8009992 <__gethex+0x424>

080099b0 <L_shift>:
 80099b0:	f1c2 0208 	rsb	r2, r2, #8
 80099b4:	0092      	lsls	r2, r2, #2
 80099b6:	b570      	push	{r4, r5, r6, lr}
 80099b8:	f1c2 0620 	rsb	r6, r2, #32
 80099bc:	6843      	ldr	r3, [r0, #4]
 80099be:	6804      	ldr	r4, [r0, #0]
 80099c0:	fa03 f506 	lsl.w	r5, r3, r6
 80099c4:	432c      	orrs	r4, r5
 80099c6:	40d3      	lsrs	r3, r2
 80099c8:	6004      	str	r4, [r0, #0]
 80099ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80099ce:	4288      	cmp	r0, r1
 80099d0:	d3f4      	bcc.n	80099bc <L_shift+0xc>
 80099d2:	bd70      	pop	{r4, r5, r6, pc}

080099d4 <__match>:
 80099d4:	b530      	push	{r4, r5, lr}
 80099d6:	6803      	ldr	r3, [r0, #0]
 80099d8:	3301      	adds	r3, #1
 80099da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099de:	b914      	cbnz	r4, 80099e6 <__match+0x12>
 80099e0:	6003      	str	r3, [r0, #0]
 80099e2:	2001      	movs	r0, #1
 80099e4:	bd30      	pop	{r4, r5, pc}
 80099e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80099ee:	2d19      	cmp	r5, #25
 80099f0:	bf98      	it	ls
 80099f2:	3220      	addls	r2, #32
 80099f4:	42a2      	cmp	r2, r4
 80099f6:	d0f0      	beq.n	80099da <__match+0x6>
 80099f8:	2000      	movs	r0, #0
 80099fa:	e7f3      	b.n	80099e4 <__match+0x10>

080099fc <__hexnan>:
 80099fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a00:	680b      	ldr	r3, [r1, #0]
 8009a02:	6801      	ldr	r1, [r0, #0]
 8009a04:	115f      	asrs	r7, r3, #5
 8009a06:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009a0a:	f013 031f 	ands.w	r3, r3, #31
 8009a0e:	b087      	sub	sp, #28
 8009a10:	bf18      	it	ne
 8009a12:	3704      	addne	r7, #4
 8009a14:	2500      	movs	r5, #0
 8009a16:	1f3e      	subs	r6, r7, #4
 8009a18:	4682      	mov	sl, r0
 8009a1a:	4690      	mov	r8, r2
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	f847 5c04 	str.w	r5, [r7, #-4]
 8009a22:	46b1      	mov	r9, r6
 8009a24:	4634      	mov	r4, r6
 8009a26:	9502      	str	r5, [sp, #8]
 8009a28:	46ab      	mov	fp, r5
 8009a2a:	784a      	ldrb	r2, [r1, #1]
 8009a2c:	1c4b      	adds	r3, r1, #1
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	b342      	cbz	r2, 8009a84 <__hexnan+0x88>
 8009a32:	4610      	mov	r0, r2
 8009a34:	9105      	str	r1, [sp, #20]
 8009a36:	9204      	str	r2, [sp, #16]
 8009a38:	f7ff fd84 	bl	8009544 <__hexdig_fun>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d143      	bne.n	8009ac8 <__hexnan+0xcc>
 8009a40:	9a04      	ldr	r2, [sp, #16]
 8009a42:	9905      	ldr	r1, [sp, #20]
 8009a44:	2a20      	cmp	r2, #32
 8009a46:	d818      	bhi.n	8009a7a <__hexnan+0x7e>
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	459b      	cmp	fp, r3
 8009a4c:	dd13      	ble.n	8009a76 <__hexnan+0x7a>
 8009a4e:	454c      	cmp	r4, r9
 8009a50:	d206      	bcs.n	8009a60 <__hexnan+0x64>
 8009a52:	2d07      	cmp	r5, #7
 8009a54:	dc04      	bgt.n	8009a60 <__hexnan+0x64>
 8009a56:	462a      	mov	r2, r5
 8009a58:	4649      	mov	r1, r9
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff ffa8 	bl	80099b0 <L_shift>
 8009a60:	4544      	cmp	r4, r8
 8009a62:	d944      	bls.n	8009aee <__hexnan+0xf2>
 8009a64:	2300      	movs	r3, #0
 8009a66:	f1a4 0904 	sub.w	r9, r4, #4
 8009a6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a6e:	f8cd b008 	str.w	fp, [sp, #8]
 8009a72:	464c      	mov	r4, r9
 8009a74:	461d      	mov	r5, r3
 8009a76:	9903      	ldr	r1, [sp, #12]
 8009a78:	e7d7      	b.n	8009a2a <__hexnan+0x2e>
 8009a7a:	2a29      	cmp	r2, #41	; 0x29
 8009a7c:	d14a      	bne.n	8009b14 <__hexnan+0x118>
 8009a7e:	3102      	adds	r1, #2
 8009a80:	f8ca 1000 	str.w	r1, [sl]
 8009a84:	f1bb 0f00 	cmp.w	fp, #0
 8009a88:	d044      	beq.n	8009b14 <__hexnan+0x118>
 8009a8a:	454c      	cmp	r4, r9
 8009a8c:	d206      	bcs.n	8009a9c <__hexnan+0xa0>
 8009a8e:	2d07      	cmp	r5, #7
 8009a90:	dc04      	bgt.n	8009a9c <__hexnan+0xa0>
 8009a92:	462a      	mov	r2, r5
 8009a94:	4649      	mov	r1, r9
 8009a96:	4620      	mov	r0, r4
 8009a98:	f7ff ff8a 	bl	80099b0 <L_shift>
 8009a9c:	4544      	cmp	r4, r8
 8009a9e:	d928      	bls.n	8009af2 <__hexnan+0xf6>
 8009aa0:	4643      	mov	r3, r8
 8009aa2:	f854 2b04 	ldr.w	r2, [r4], #4
 8009aa6:	f843 2b04 	str.w	r2, [r3], #4
 8009aaa:	42a6      	cmp	r6, r4
 8009aac:	d2f9      	bcs.n	8009aa2 <__hexnan+0xa6>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f843 2b04 	str.w	r2, [r3], #4
 8009ab4:	429e      	cmp	r6, r3
 8009ab6:	d2fb      	bcs.n	8009ab0 <__hexnan+0xb4>
 8009ab8:	6833      	ldr	r3, [r6, #0]
 8009aba:	b91b      	cbnz	r3, 8009ac4 <__hexnan+0xc8>
 8009abc:	4546      	cmp	r6, r8
 8009abe:	d127      	bne.n	8009b10 <__hexnan+0x114>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	6033      	str	r3, [r6, #0]
 8009ac4:	2005      	movs	r0, #5
 8009ac6:	e026      	b.n	8009b16 <__hexnan+0x11a>
 8009ac8:	3501      	adds	r5, #1
 8009aca:	2d08      	cmp	r5, #8
 8009acc:	f10b 0b01 	add.w	fp, fp, #1
 8009ad0:	dd06      	ble.n	8009ae0 <__hexnan+0xe4>
 8009ad2:	4544      	cmp	r4, r8
 8009ad4:	d9cf      	bls.n	8009a76 <__hexnan+0x7a>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009adc:	2501      	movs	r5, #1
 8009ade:	3c04      	subs	r4, #4
 8009ae0:	6822      	ldr	r2, [r4, #0]
 8009ae2:	f000 000f 	and.w	r0, r0, #15
 8009ae6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009aea:	6020      	str	r0, [r4, #0]
 8009aec:	e7c3      	b.n	8009a76 <__hexnan+0x7a>
 8009aee:	2508      	movs	r5, #8
 8009af0:	e7c1      	b.n	8009a76 <__hexnan+0x7a>
 8009af2:	9b01      	ldr	r3, [sp, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d0df      	beq.n	8009ab8 <__hexnan+0xbc>
 8009af8:	f04f 32ff 	mov.w	r2, #4294967295
 8009afc:	f1c3 0320 	rsb	r3, r3, #32
 8009b00:	fa22 f303 	lsr.w	r3, r2, r3
 8009b04:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009b08:	401a      	ands	r2, r3
 8009b0a:	f847 2c04 	str.w	r2, [r7, #-4]
 8009b0e:	e7d3      	b.n	8009ab8 <__hexnan+0xbc>
 8009b10:	3e04      	subs	r6, #4
 8009b12:	e7d1      	b.n	8009ab8 <__hexnan+0xbc>
 8009b14:	2004      	movs	r0, #4
 8009b16:	b007      	add	sp, #28
 8009b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b1c <__locale_ctype_ptr_l>:
 8009b1c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009b20:	4770      	bx	lr
	...

08009b24 <__locale_ctype_ptr>:
 8009b24:	4b04      	ldr	r3, [pc, #16]	; (8009b38 <__locale_ctype_ptr+0x14>)
 8009b26:	4a05      	ldr	r2, [pc, #20]	; (8009b3c <__locale_ctype_ptr+0x18>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6a1b      	ldr	r3, [r3, #32]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	bf08      	it	eq
 8009b30:	4613      	moveq	r3, r2
 8009b32:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009b36:	4770      	bx	lr
 8009b38:	20000050 	.word	0x20000050
 8009b3c:	200000b4 	.word	0x200000b4

08009b40 <__localeconv_l>:
 8009b40:	30f0      	adds	r0, #240	; 0xf0
 8009b42:	4770      	bx	lr

08009b44 <_localeconv_r>:
 8009b44:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <_localeconv_r+0x14>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6a18      	ldr	r0, [r3, #32]
 8009b4a:	4b04      	ldr	r3, [pc, #16]	; (8009b5c <_localeconv_r+0x18>)
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	bf08      	it	eq
 8009b50:	4618      	moveq	r0, r3
 8009b52:	30f0      	adds	r0, #240	; 0xf0
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	20000050 	.word	0x20000050
 8009b5c:	200000b4 	.word	0x200000b4

08009b60 <malloc>:
 8009b60:	4b02      	ldr	r3, [pc, #8]	; (8009b6c <malloc+0xc>)
 8009b62:	4601      	mov	r1, r0
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	f000 bc7b 	b.w	800a460 <_malloc_r>
 8009b6a:	bf00      	nop
 8009b6c:	20000050 	.word	0x20000050

08009b70 <__ascii_mbtowc>:
 8009b70:	b082      	sub	sp, #8
 8009b72:	b901      	cbnz	r1, 8009b76 <__ascii_mbtowc+0x6>
 8009b74:	a901      	add	r1, sp, #4
 8009b76:	b142      	cbz	r2, 8009b8a <__ascii_mbtowc+0x1a>
 8009b78:	b14b      	cbz	r3, 8009b8e <__ascii_mbtowc+0x1e>
 8009b7a:	7813      	ldrb	r3, [r2, #0]
 8009b7c:	600b      	str	r3, [r1, #0]
 8009b7e:	7812      	ldrb	r2, [r2, #0]
 8009b80:	1c10      	adds	r0, r2, #0
 8009b82:	bf18      	it	ne
 8009b84:	2001      	movne	r0, #1
 8009b86:	b002      	add	sp, #8
 8009b88:	4770      	bx	lr
 8009b8a:	4610      	mov	r0, r2
 8009b8c:	e7fb      	b.n	8009b86 <__ascii_mbtowc+0x16>
 8009b8e:	f06f 0001 	mvn.w	r0, #1
 8009b92:	e7f8      	b.n	8009b86 <__ascii_mbtowc+0x16>

08009b94 <memcpy>:
 8009b94:	b510      	push	{r4, lr}
 8009b96:	1e43      	subs	r3, r0, #1
 8009b98:	440a      	add	r2, r1
 8009b9a:	4291      	cmp	r1, r2
 8009b9c:	d100      	bne.n	8009ba0 <memcpy+0xc>
 8009b9e:	bd10      	pop	{r4, pc}
 8009ba0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ba8:	e7f7      	b.n	8009b9a <memcpy+0x6>

08009baa <_Balloc>:
 8009baa:	b570      	push	{r4, r5, r6, lr}
 8009bac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009bae:	4604      	mov	r4, r0
 8009bb0:	460e      	mov	r6, r1
 8009bb2:	b93d      	cbnz	r5, 8009bc4 <_Balloc+0x1a>
 8009bb4:	2010      	movs	r0, #16
 8009bb6:	f7ff ffd3 	bl	8009b60 <malloc>
 8009bba:	6260      	str	r0, [r4, #36]	; 0x24
 8009bbc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009bc0:	6005      	str	r5, [r0, #0]
 8009bc2:	60c5      	str	r5, [r0, #12]
 8009bc4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009bc6:	68eb      	ldr	r3, [r5, #12]
 8009bc8:	b183      	cbz	r3, 8009bec <_Balloc+0x42>
 8009bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009bd2:	b9b8      	cbnz	r0, 8009c04 <_Balloc+0x5a>
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	fa01 f506 	lsl.w	r5, r1, r6
 8009bda:	1d6a      	adds	r2, r5, #5
 8009bdc:	0092      	lsls	r2, r2, #2
 8009bde:	4620      	mov	r0, r4
 8009be0:	f000 fbe1 	bl	800a3a6 <_calloc_r>
 8009be4:	b160      	cbz	r0, 8009c00 <_Balloc+0x56>
 8009be6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009bea:	e00e      	b.n	8009c0a <_Balloc+0x60>
 8009bec:	2221      	movs	r2, #33	; 0x21
 8009bee:	2104      	movs	r1, #4
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f000 fbd8 	bl	800a3a6 <_calloc_r>
 8009bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bf8:	60e8      	str	r0, [r5, #12]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e4      	bne.n	8009bca <_Balloc+0x20>
 8009c00:	2000      	movs	r0, #0
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	6802      	ldr	r2, [r0, #0]
 8009c06:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c10:	e7f7      	b.n	8009c02 <_Balloc+0x58>

08009c12 <_Bfree>:
 8009c12:	b570      	push	{r4, r5, r6, lr}
 8009c14:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009c16:	4606      	mov	r6, r0
 8009c18:	460d      	mov	r5, r1
 8009c1a:	b93c      	cbnz	r4, 8009c2c <_Bfree+0x1a>
 8009c1c:	2010      	movs	r0, #16
 8009c1e:	f7ff ff9f 	bl	8009b60 <malloc>
 8009c22:	6270      	str	r0, [r6, #36]	; 0x24
 8009c24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c28:	6004      	str	r4, [r0, #0]
 8009c2a:	60c4      	str	r4, [r0, #12]
 8009c2c:	b13d      	cbz	r5, 8009c3e <_Bfree+0x2c>
 8009c2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c30:	686a      	ldr	r2, [r5, #4]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c38:	6029      	str	r1, [r5, #0]
 8009c3a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}

08009c40 <__multadd>:
 8009c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c44:	690d      	ldr	r5, [r1, #16]
 8009c46:	461f      	mov	r7, r3
 8009c48:	4606      	mov	r6, r0
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	f101 0c14 	add.w	ip, r1, #20
 8009c50:	2300      	movs	r3, #0
 8009c52:	f8dc 0000 	ldr.w	r0, [ip]
 8009c56:	b281      	uxth	r1, r0
 8009c58:	fb02 7101 	mla	r1, r2, r1, r7
 8009c5c:	0c0f      	lsrs	r7, r1, #16
 8009c5e:	0c00      	lsrs	r0, r0, #16
 8009c60:	fb02 7000 	mla	r0, r2, r0, r7
 8009c64:	b289      	uxth	r1, r1
 8009c66:	3301      	adds	r3, #1
 8009c68:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009c6c:	429d      	cmp	r5, r3
 8009c6e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009c72:	f84c 1b04 	str.w	r1, [ip], #4
 8009c76:	dcec      	bgt.n	8009c52 <__multadd+0x12>
 8009c78:	b1d7      	cbz	r7, 8009cb0 <__multadd+0x70>
 8009c7a:	68a3      	ldr	r3, [r4, #8]
 8009c7c:	42ab      	cmp	r3, r5
 8009c7e:	dc12      	bgt.n	8009ca6 <__multadd+0x66>
 8009c80:	6861      	ldr	r1, [r4, #4]
 8009c82:	4630      	mov	r0, r6
 8009c84:	3101      	adds	r1, #1
 8009c86:	f7ff ff90 	bl	8009baa <_Balloc>
 8009c8a:	6922      	ldr	r2, [r4, #16]
 8009c8c:	3202      	adds	r2, #2
 8009c8e:	f104 010c 	add.w	r1, r4, #12
 8009c92:	4680      	mov	r8, r0
 8009c94:	0092      	lsls	r2, r2, #2
 8009c96:	300c      	adds	r0, #12
 8009c98:	f7ff ff7c 	bl	8009b94 <memcpy>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7ff ffb7 	bl	8009c12 <_Bfree>
 8009ca4:	4644      	mov	r4, r8
 8009ca6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009caa:	3501      	adds	r5, #1
 8009cac:	615f      	str	r7, [r3, #20]
 8009cae:	6125      	str	r5, [r4, #16]
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009cb6 <__s2b>:
 8009cb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cba:	460c      	mov	r4, r1
 8009cbc:	4615      	mov	r5, r2
 8009cbe:	461f      	mov	r7, r3
 8009cc0:	2209      	movs	r2, #9
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cca:	2100      	movs	r1, #0
 8009ccc:	2201      	movs	r2, #1
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	db20      	blt.n	8009d14 <__s2b+0x5e>
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f7ff ff69 	bl	8009baa <_Balloc>
 8009cd8:	9b08      	ldr	r3, [sp, #32]
 8009cda:	6143      	str	r3, [r0, #20]
 8009cdc:	2d09      	cmp	r5, #9
 8009cde:	f04f 0301 	mov.w	r3, #1
 8009ce2:	6103      	str	r3, [r0, #16]
 8009ce4:	dd19      	ble.n	8009d1a <__s2b+0x64>
 8009ce6:	f104 0809 	add.w	r8, r4, #9
 8009cea:	46c1      	mov	r9, r8
 8009cec:	442c      	add	r4, r5
 8009cee:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009cf2:	4601      	mov	r1, r0
 8009cf4:	3b30      	subs	r3, #48	; 0x30
 8009cf6:	220a      	movs	r2, #10
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7ff ffa1 	bl	8009c40 <__multadd>
 8009cfe:	45a1      	cmp	r9, r4
 8009d00:	d1f5      	bne.n	8009cee <__s2b+0x38>
 8009d02:	eb08 0405 	add.w	r4, r8, r5
 8009d06:	3c08      	subs	r4, #8
 8009d08:	1b2d      	subs	r5, r5, r4
 8009d0a:	1963      	adds	r3, r4, r5
 8009d0c:	42bb      	cmp	r3, r7
 8009d0e:	db07      	blt.n	8009d20 <__s2b+0x6a>
 8009d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d14:	0052      	lsls	r2, r2, #1
 8009d16:	3101      	adds	r1, #1
 8009d18:	e7d9      	b.n	8009cce <__s2b+0x18>
 8009d1a:	340a      	adds	r4, #10
 8009d1c:	2509      	movs	r5, #9
 8009d1e:	e7f3      	b.n	8009d08 <__s2b+0x52>
 8009d20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d24:	4601      	mov	r1, r0
 8009d26:	3b30      	subs	r3, #48	; 0x30
 8009d28:	220a      	movs	r2, #10
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f7ff ff88 	bl	8009c40 <__multadd>
 8009d30:	e7eb      	b.n	8009d0a <__s2b+0x54>

08009d32 <__hi0bits>:
 8009d32:	0c02      	lsrs	r2, r0, #16
 8009d34:	0412      	lsls	r2, r2, #16
 8009d36:	4603      	mov	r3, r0
 8009d38:	b9b2      	cbnz	r2, 8009d68 <__hi0bits+0x36>
 8009d3a:	0403      	lsls	r3, r0, #16
 8009d3c:	2010      	movs	r0, #16
 8009d3e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009d42:	bf04      	itt	eq
 8009d44:	021b      	lsleq	r3, r3, #8
 8009d46:	3008      	addeq	r0, #8
 8009d48:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d4c:	bf04      	itt	eq
 8009d4e:	011b      	lsleq	r3, r3, #4
 8009d50:	3004      	addeq	r0, #4
 8009d52:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d56:	bf04      	itt	eq
 8009d58:	009b      	lsleq	r3, r3, #2
 8009d5a:	3002      	addeq	r0, #2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	db06      	blt.n	8009d6e <__hi0bits+0x3c>
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	d503      	bpl.n	8009d6c <__hi0bits+0x3a>
 8009d64:	3001      	adds	r0, #1
 8009d66:	4770      	bx	lr
 8009d68:	2000      	movs	r0, #0
 8009d6a:	e7e8      	b.n	8009d3e <__hi0bits+0xc>
 8009d6c:	2020      	movs	r0, #32
 8009d6e:	4770      	bx	lr

08009d70 <__lo0bits>:
 8009d70:	6803      	ldr	r3, [r0, #0]
 8009d72:	f013 0207 	ands.w	r2, r3, #7
 8009d76:	4601      	mov	r1, r0
 8009d78:	d00b      	beq.n	8009d92 <__lo0bits+0x22>
 8009d7a:	07da      	lsls	r2, r3, #31
 8009d7c:	d423      	bmi.n	8009dc6 <__lo0bits+0x56>
 8009d7e:	0798      	lsls	r0, r3, #30
 8009d80:	bf49      	itett	mi
 8009d82:	085b      	lsrmi	r3, r3, #1
 8009d84:	089b      	lsrpl	r3, r3, #2
 8009d86:	2001      	movmi	r0, #1
 8009d88:	600b      	strmi	r3, [r1, #0]
 8009d8a:	bf5c      	itt	pl
 8009d8c:	600b      	strpl	r3, [r1, #0]
 8009d8e:	2002      	movpl	r0, #2
 8009d90:	4770      	bx	lr
 8009d92:	b298      	uxth	r0, r3
 8009d94:	b9a8      	cbnz	r0, 8009dc2 <__lo0bits+0x52>
 8009d96:	0c1b      	lsrs	r3, r3, #16
 8009d98:	2010      	movs	r0, #16
 8009d9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d9e:	bf04      	itt	eq
 8009da0:	0a1b      	lsreq	r3, r3, #8
 8009da2:	3008      	addeq	r0, #8
 8009da4:	071a      	lsls	r2, r3, #28
 8009da6:	bf04      	itt	eq
 8009da8:	091b      	lsreq	r3, r3, #4
 8009daa:	3004      	addeq	r0, #4
 8009dac:	079a      	lsls	r2, r3, #30
 8009dae:	bf04      	itt	eq
 8009db0:	089b      	lsreq	r3, r3, #2
 8009db2:	3002      	addeq	r0, #2
 8009db4:	07da      	lsls	r2, r3, #31
 8009db6:	d402      	bmi.n	8009dbe <__lo0bits+0x4e>
 8009db8:	085b      	lsrs	r3, r3, #1
 8009dba:	d006      	beq.n	8009dca <__lo0bits+0x5a>
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	600b      	str	r3, [r1, #0]
 8009dc0:	4770      	bx	lr
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	e7e9      	b.n	8009d9a <__lo0bits+0x2a>
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	4770      	bx	lr
 8009dca:	2020      	movs	r0, #32
 8009dcc:	4770      	bx	lr

08009dce <__i2b>:
 8009dce:	b510      	push	{r4, lr}
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	f7ff fee9 	bl	8009baa <_Balloc>
 8009dd8:	2201      	movs	r2, #1
 8009dda:	6144      	str	r4, [r0, #20]
 8009ddc:	6102      	str	r2, [r0, #16]
 8009dde:	bd10      	pop	{r4, pc}

08009de0 <__multiply>:
 8009de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	4614      	mov	r4, r2
 8009de6:	690a      	ldr	r2, [r1, #16]
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	bfb8      	it	lt
 8009dee:	460b      	movlt	r3, r1
 8009df0:	4688      	mov	r8, r1
 8009df2:	bfbc      	itt	lt
 8009df4:	46a0      	movlt	r8, r4
 8009df6:	461c      	movlt	r4, r3
 8009df8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009dfc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009e00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e08:	eb07 0609 	add.w	r6, r7, r9
 8009e0c:	42b3      	cmp	r3, r6
 8009e0e:	bfb8      	it	lt
 8009e10:	3101      	addlt	r1, #1
 8009e12:	f7ff feca 	bl	8009baa <_Balloc>
 8009e16:	f100 0514 	add.w	r5, r0, #20
 8009e1a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009e1e:	462b      	mov	r3, r5
 8009e20:	2200      	movs	r2, #0
 8009e22:	4573      	cmp	r3, lr
 8009e24:	d316      	bcc.n	8009e54 <__multiply+0x74>
 8009e26:	f104 0214 	add.w	r2, r4, #20
 8009e2a:	f108 0114 	add.w	r1, r8, #20
 8009e2e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009e32:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	9b00      	ldr	r3, [sp, #0]
 8009e3a:	9201      	str	r2, [sp, #4]
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d80c      	bhi.n	8009e5a <__multiply+0x7a>
 8009e40:	2e00      	cmp	r6, #0
 8009e42:	dd03      	ble.n	8009e4c <__multiply+0x6c>
 8009e44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d05d      	beq.n	8009f08 <__multiply+0x128>
 8009e4c:	6106      	str	r6, [r0, #16]
 8009e4e:	b003      	add	sp, #12
 8009e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e54:	f843 2b04 	str.w	r2, [r3], #4
 8009e58:	e7e3      	b.n	8009e22 <__multiply+0x42>
 8009e5a:	f8b2 b000 	ldrh.w	fp, [r2]
 8009e5e:	f1bb 0f00 	cmp.w	fp, #0
 8009e62:	d023      	beq.n	8009eac <__multiply+0xcc>
 8009e64:	4689      	mov	r9, r1
 8009e66:	46ac      	mov	ip, r5
 8009e68:	f04f 0800 	mov.w	r8, #0
 8009e6c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009e70:	f8dc a000 	ldr.w	sl, [ip]
 8009e74:	b2a3      	uxth	r3, r4
 8009e76:	fa1f fa8a 	uxth.w	sl, sl
 8009e7a:	fb0b a303 	mla	r3, fp, r3, sl
 8009e7e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009e82:	f8dc 4000 	ldr.w	r4, [ip]
 8009e86:	4443      	add	r3, r8
 8009e88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009e8c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009e90:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009e94:	46e2      	mov	sl, ip
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e9c:	454f      	cmp	r7, r9
 8009e9e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009ea2:	f84a 3b04 	str.w	r3, [sl], #4
 8009ea6:	d82b      	bhi.n	8009f00 <__multiply+0x120>
 8009ea8:	f8cc 8004 	str.w	r8, [ip, #4]
 8009eac:	9b01      	ldr	r3, [sp, #4]
 8009eae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009eb2:	3204      	adds	r2, #4
 8009eb4:	f1ba 0f00 	cmp.w	sl, #0
 8009eb8:	d020      	beq.n	8009efc <__multiply+0x11c>
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	4689      	mov	r9, r1
 8009ebe:	46a8      	mov	r8, r5
 8009ec0:	f04f 0b00 	mov.w	fp, #0
 8009ec4:	f8b9 c000 	ldrh.w	ip, [r9]
 8009ec8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009ecc:	fb0a 440c 	mla	r4, sl, ip, r4
 8009ed0:	445c      	add	r4, fp
 8009ed2:	46c4      	mov	ip, r8
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009eda:	f84c 3b04 	str.w	r3, [ip], #4
 8009ede:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ee2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009ee6:	0c1b      	lsrs	r3, r3, #16
 8009ee8:	fb0a b303 	mla	r3, sl, r3, fp
 8009eec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009ef0:	454f      	cmp	r7, r9
 8009ef2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009ef6:	d805      	bhi.n	8009f04 <__multiply+0x124>
 8009ef8:	f8c8 3004 	str.w	r3, [r8, #4]
 8009efc:	3504      	adds	r5, #4
 8009efe:	e79b      	b.n	8009e38 <__multiply+0x58>
 8009f00:	46d4      	mov	ip, sl
 8009f02:	e7b3      	b.n	8009e6c <__multiply+0x8c>
 8009f04:	46e0      	mov	r8, ip
 8009f06:	e7dd      	b.n	8009ec4 <__multiply+0xe4>
 8009f08:	3e01      	subs	r6, #1
 8009f0a:	e799      	b.n	8009e40 <__multiply+0x60>

08009f0c <__pow5mult>:
 8009f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f10:	4615      	mov	r5, r2
 8009f12:	f012 0203 	ands.w	r2, r2, #3
 8009f16:	4606      	mov	r6, r0
 8009f18:	460f      	mov	r7, r1
 8009f1a:	d007      	beq.n	8009f2c <__pow5mult+0x20>
 8009f1c:	3a01      	subs	r2, #1
 8009f1e:	4c21      	ldr	r4, [pc, #132]	; (8009fa4 <__pow5mult+0x98>)
 8009f20:	2300      	movs	r3, #0
 8009f22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f26:	f7ff fe8b 	bl	8009c40 <__multadd>
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	10ad      	asrs	r5, r5, #2
 8009f2e:	d035      	beq.n	8009f9c <__pow5mult+0x90>
 8009f30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f32:	b93c      	cbnz	r4, 8009f44 <__pow5mult+0x38>
 8009f34:	2010      	movs	r0, #16
 8009f36:	f7ff fe13 	bl	8009b60 <malloc>
 8009f3a:	6270      	str	r0, [r6, #36]	; 0x24
 8009f3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f40:	6004      	str	r4, [r0, #0]
 8009f42:	60c4      	str	r4, [r0, #12]
 8009f44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f4c:	b94c      	cbnz	r4, 8009f62 <__pow5mult+0x56>
 8009f4e:	f240 2171 	movw	r1, #625	; 0x271
 8009f52:	4630      	mov	r0, r6
 8009f54:	f7ff ff3b 	bl	8009dce <__i2b>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f5e:	4604      	mov	r4, r0
 8009f60:	6003      	str	r3, [r0, #0]
 8009f62:	f04f 0800 	mov.w	r8, #0
 8009f66:	07eb      	lsls	r3, r5, #31
 8009f68:	d50a      	bpl.n	8009f80 <__pow5mult+0x74>
 8009f6a:	4639      	mov	r1, r7
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f7ff ff36 	bl	8009de0 <__multiply>
 8009f74:	4639      	mov	r1, r7
 8009f76:	4681      	mov	r9, r0
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f7ff fe4a 	bl	8009c12 <_Bfree>
 8009f7e:	464f      	mov	r7, r9
 8009f80:	106d      	asrs	r5, r5, #1
 8009f82:	d00b      	beq.n	8009f9c <__pow5mult+0x90>
 8009f84:	6820      	ldr	r0, [r4, #0]
 8009f86:	b938      	cbnz	r0, 8009f98 <__pow5mult+0x8c>
 8009f88:	4622      	mov	r2, r4
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f7ff ff27 	bl	8009de0 <__multiply>
 8009f92:	6020      	str	r0, [r4, #0]
 8009f94:	f8c0 8000 	str.w	r8, [r0]
 8009f98:	4604      	mov	r4, r0
 8009f9a:	e7e4      	b.n	8009f66 <__pow5mult+0x5a>
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fa2:	bf00      	nop
 8009fa4:	0800b2c8 	.word	0x0800b2c8

08009fa8 <__lshift>:
 8009fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fac:	460c      	mov	r4, r1
 8009fae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fb2:	6923      	ldr	r3, [r4, #16]
 8009fb4:	6849      	ldr	r1, [r1, #4]
 8009fb6:	eb0a 0903 	add.w	r9, sl, r3
 8009fba:	68a3      	ldr	r3, [r4, #8]
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	4616      	mov	r6, r2
 8009fc0:	f109 0501 	add.w	r5, r9, #1
 8009fc4:	42ab      	cmp	r3, r5
 8009fc6:	db32      	blt.n	800a02e <__lshift+0x86>
 8009fc8:	4638      	mov	r0, r7
 8009fca:	f7ff fdee 	bl	8009baa <_Balloc>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	f100 0114 	add.w	r1, r0, #20
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	4553      	cmp	r3, sl
 8009fda:	db2b      	blt.n	800a034 <__lshift+0x8c>
 8009fdc:	6920      	ldr	r0, [r4, #16]
 8009fde:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fe2:	f104 0314 	add.w	r3, r4, #20
 8009fe6:	f016 021f 	ands.w	r2, r6, #31
 8009fea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ff2:	d025      	beq.n	800a040 <__lshift+0x98>
 8009ff4:	f1c2 0e20 	rsb	lr, r2, #32
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	681e      	ldr	r6, [r3, #0]
 8009ffc:	468a      	mov	sl, r1
 8009ffe:	4096      	lsls	r6, r2
 800a000:	4330      	orrs	r0, r6
 800a002:	f84a 0b04 	str.w	r0, [sl], #4
 800a006:	f853 0b04 	ldr.w	r0, [r3], #4
 800a00a:	459c      	cmp	ip, r3
 800a00c:	fa20 f00e 	lsr.w	r0, r0, lr
 800a010:	d814      	bhi.n	800a03c <__lshift+0x94>
 800a012:	6048      	str	r0, [r1, #4]
 800a014:	b108      	cbz	r0, 800a01a <__lshift+0x72>
 800a016:	f109 0502 	add.w	r5, r9, #2
 800a01a:	3d01      	subs	r5, #1
 800a01c:	4638      	mov	r0, r7
 800a01e:	f8c8 5010 	str.w	r5, [r8, #16]
 800a022:	4621      	mov	r1, r4
 800a024:	f7ff fdf5 	bl	8009c12 <_Bfree>
 800a028:	4640      	mov	r0, r8
 800a02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02e:	3101      	adds	r1, #1
 800a030:	005b      	lsls	r3, r3, #1
 800a032:	e7c7      	b.n	8009fc4 <__lshift+0x1c>
 800a034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a038:	3301      	adds	r3, #1
 800a03a:	e7cd      	b.n	8009fd8 <__lshift+0x30>
 800a03c:	4651      	mov	r1, sl
 800a03e:	e7dc      	b.n	8009ffa <__lshift+0x52>
 800a040:	3904      	subs	r1, #4
 800a042:	f853 2b04 	ldr.w	r2, [r3], #4
 800a046:	f841 2f04 	str.w	r2, [r1, #4]!
 800a04a:	459c      	cmp	ip, r3
 800a04c:	d8f9      	bhi.n	800a042 <__lshift+0x9a>
 800a04e:	e7e4      	b.n	800a01a <__lshift+0x72>

0800a050 <__mcmp>:
 800a050:	6903      	ldr	r3, [r0, #16]
 800a052:	690a      	ldr	r2, [r1, #16]
 800a054:	1a9b      	subs	r3, r3, r2
 800a056:	b530      	push	{r4, r5, lr}
 800a058:	d10c      	bne.n	800a074 <__mcmp+0x24>
 800a05a:	0092      	lsls	r2, r2, #2
 800a05c:	3014      	adds	r0, #20
 800a05e:	3114      	adds	r1, #20
 800a060:	1884      	adds	r4, r0, r2
 800a062:	4411      	add	r1, r2
 800a064:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a068:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a06c:	4295      	cmp	r5, r2
 800a06e:	d003      	beq.n	800a078 <__mcmp+0x28>
 800a070:	d305      	bcc.n	800a07e <__mcmp+0x2e>
 800a072:	2301      	movs	r3, #1
 800a074:	4618      	mov	r0, r3
 800a076:	bd30      	pop	{r4, r5, pc}
 800a078:	42a0      	cmp	r0, r4
 800a07a:	d3f3      	bcc.n	800a064 <__mcmp+0x14>
 800a07c:	e7fa      	b.n	800a074 <__mcmp+0x24>
 800a07e:	f04f 33ff 	mov.w	r3, #4294967295
 800a082:	e7f7      	b.n	800a074 <__mcmp+0x24>

0800a084 <__mdiff>:
 800a084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a088:	460d      	mov	r5, r1
 800a08a:	4607      	mov	r7, r0
 800a08c:	4611      	mov	r1, r2
 800a08e:	4628      	mov	r0, r5
 800a090:	4614      	mov	r4, r2
 800a092:	f7ff ffdd 	bl	800a050 <__mcmp>
 800a096:	1e06      	subs	r6, r0, #0
 800a098:	d108      	bne.n	800a0ac <__mdiff+0x28>
 800a09a:	4631      	mov	r1, r6
 800a09c:	4638      	mov	r0, r7
 800a09e:	f7ff fd84 	bl	8009baa <_Balloc>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ac:	bfa4      	itt	ge
 800a0ae:	4623      	movge	r3, r4
 800a0b0:	462c      	movge	r4, r5
 800a0b2:	4638      	mov	r0, r7
 800a0b4:	6861      	ldr	r1, [r4, #4]
 800a0b6:	bfa6      	itte	ge
 800a0b8:	461d      	movge	r5, r3
 800a0ba:	2600      	movge	r6, #0
 800a0bc:	2601      	movlt	r6, #1
 800a0be:	f7ff fd74 	bl	8009baa <_Balloc>
 800a0c2:	692b      	ldr	r3, [r5, #16]
 800a0c4:	60c6      	str	r6, [r0, #12]
 800a0c6:	6926      	ldr	r6, [r4, #16]
 800a0c8:	f105 0914 	add.w	r9, r5, #20
 800a0cc:	f104 0214 	add.w	r2, r4, #20
 800a0d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a0d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a0d8:	f100 0514 	add.w	r5, r0, #20
 800a0dc:	f04f 0e00 	mov.w	lr, #0
 800a0e0:	f852 ab04 	ldr.w	sl, [r2], #4
 800a0e4:	f859 4b04 	ldr.w	r4, [r9], #4
 800a0e8:	fa1e f18a 	uxtah	r1, lr, sl
 800a0ec:	b2a3      	uxth	r3, r4
 800a0ee:	1ac9      	subs	r1, r1, r3
 800a0f0:	0c23      	lsrs	r3, r4, #16
 800a0f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a0f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a0fa:	b289      	uxth	r1, r1
 800a0fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a100:	45c8      	cmp	r8, r9
 800a102:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a106:	4694      	mov	ip, r2
 800a108:	f845 3b04 	str.w	r3, [r5], #4
 800a10c:	d8e8      	bhi.n	800a0e0 <__mdiff+0x5c>
 800a10e:	45bc      	cmp	ip, r7
 800a110:	d304      	bcc.n	800a11c <__mdiff+0x98>
 800a112:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a116:	b183      	cbz	r3, 800a13a <__mdiff+0xb6>
 800a118:	6106      	str	r6, [r0, #16]
 800a11a:	e7c5      	b.n	800a0a8 <__mdiff+0x24>
 800a11c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a120:	fa1e f381 	uxtah	r3, lr, r1
 800a124:	141a      	asrs	r2, r3, #16
 800a126:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a130:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a134:	f845 3b04 	str.w	r3, [r5], #4
 800a138:	e7e9      	b.n	800a10e <__mdiff+0x8a>
 800a13a:	3e01      	subs	r6, #1
 800a13c:	e7e9      	b.n	800a112 <__mdiff+0x8e>
	...

0800a140 <__ulp>:
 800a140:	4b12      	ldr	r3, [pc, #72]	; (800a18c <__ulp+0x4c>)
 800a142:	ee10 2a90 	vmov	r2, s1
 800a146:	401a      	ands	r2, r3
 800a148:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dd04      	ble.n	800a15a <__ulp+0x1a>
 800a150:	2000      	movs	r0, #0
 800a152:	4619      	mov	r1, r3
 800a154:	ec41 0b10 	vmov	d0, r0, r1
 800a158:	4770      	bx	lr
 800a15a:	425b      	negs	r3, r3
 800a15c:	151b      	asrs	r3, r3, #20
 800a15e:	2b13      	cmp	r3, #19
 800a160:	f04f 0000 	mov.w	r0, #0
 800a164:	f04f 0100 	mov.w	r1, #0
 800a168:	dc04      	bgt.n	800a174 <__ulp+0x34>
 800a16a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a16e:	fa42 f103 	asr.w	r1, r2, r3
 800a172:	e7ef      	b.n	800a154 <__ulp+0x14>
 800a174:	3b14      	subs	r3, #20
 800a176:	2b1e      	cmp	r3, #30
 800a178:	f04f 0201 	mov.w	r2, #1
 800a17c:	bfda      	itte	le
 800a17e:	f1c3 031f 	rsble	r3, r3, #31
 800a182:	fa02 f303 	lslle.w	r3, r2, r3
 800a186:	4613      	movgt	r3, r2
 800a188:	4618      	mov	r0, r3
 800a18a:	e7e3      	b.n	800a154 <__ulp+0x14>
 800a18c:	7ff00000 	.word	0x7ff00000

0800a190 <__b2d>:
 800a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a192:	6905      	ldr	r5, [r0, #16]
 800a194:	f100 0714 	add.w	r7, r0, #20
 800a198:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a19c:	1f2e      	subs	r6, r5, #4
 800a19e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f7ff fdc5 	bl	8009d32 <__hi0bits>
 800a1a8:	f1c0 0320 	rsb	r3, r0, #32
 800a1ac:	280a      	cmp	r0, #10
 800a1ae:	600b      	str	r3, [r1, #0]
 800a1b0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a228 <__b2d+0x98>
 800a1b4:	dc14      	bgt.n	800a1e0 <__b2d+0x50>
 800a1b6:	f1c0 0e0b 	rsb	lr, r0, #11
 800a1ba:	fa24 f10e 	lsr.w	r1, r4, lr
 800a1be:	42b7      	cmp	r7, r6
 800a1c0:	ea41 030c 	orr.w	r3, r1, ip
 800a1c4:	bf34      	ite	cc
 800a1c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a1ca:	2100      	movcs	r1, #0
 800a1cc:	3015      	adds	r0, #21
 800a1ce:	fa04 f000 	lsl.w	r0, r4, r0
 800a1d2:	fa21 f10e 	lsr.w	r1, r1, lr
 800a1d6:	ea40 0201 	orr.w	r2, r0, r1
 800a1da:	ec43 2b10 	vmov	d0, r2, r3
 800a1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e0:	42b7      	cmp	r7, r6
 800a1e2:	bf3a      	itte	cc
 800a1e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800a1e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a1ec:	2100      	movcs	r1, #0
 800a1ee:	380b      	subs	r0, #11
 800a1f0:	d015      	beq.n	800a21e <__b2d+0x8e>
 800a1f2:	4084      	lsls	r4, r0
 800a1f4:	f1c0 0520 	rsb	r5, r0, #32
 800a1f8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a1fc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a200:	42be      	cmp	r6, r7
 800a202:	fa21 fc05 	lsr.w	ip, r1, r5
 800a206:	ea44 030c 	orr.w	r3, r4, ip
 800a20a:	bf8c      	ite	hi
 800a20c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a210:	2400      	movls	r4, #0
 800a212:	fa01 f000 	lsl.w	r0, r1, r0
 800a216:	40ec      	lsrs	r4, r5
 800a218:	ea40 0204 	orr.w	r2, r0, r4
 800a21c:	e7dd      	b.n	800a1da <__b2d+0x4a>
 800a21e:	ea44 030c 	orr.w	r3, r4, ip
 800a222:	460a      	mov	r2, r1
 800a224:	e7d9      	b.n	800a1da <__b2d+0x4a>
 800a226:	bf00      	nop
 800a228:	3ff00000 	.word	0x3ff00000

0800a22c <__d2b>:
 800a22c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a230:	460e      	mov	r6, r1
 800a232:	2101      	movs	r1, #1
 800a234:	ec59 8b10 	vmov	r8, r9, d0
 800a238:	4615      	mov	r5, r2
 800a23a:	f7ff fcb6 	bl	8009baa <_Balloc>
 800a23e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a242:	4607      	mov	r7, r0
 800a244:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a248:	bb34      	cbnz	r4, 800a298 <__d2b+0x6c>
 800a24a:	9301      	str	r3, [sp, #4]
 800a24c:	f1b8 0300 	subs.w	r3, r8, #0
 800a250:	d027      	beq.n	800a2a2 <__d2b+0x76>
 800a252:	a802      	add	r0, sp, #8
 800a254:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a258:	f7ff fd8a 	bl	8009d70 <__lo0bits>
 800a25c:	9900      	ldr	r1, [sp, #0]
 800a25e:	b1f0      	cbz	r0, 800a29e <__d2b+0x72>
 800a260:	9a01      	ldr	r2, [sp, #4]
 800a262:	f1c0 0320 	rsb	r3, r0, #32
 800a266:	fa02 f303 	lsl.w	r3, r2, r3
 800a26a:	430b      	orrs	r3, r1
 800a26c:	40c2      	lsrs	r2, r0
 800a26e:	617b      	str	r3, [r7, #20]
 800a270:	9201      	str	r2, [sp, #4]
 800a272:	9b01      	ldr	r3, [sp, #4]
 800a274:	61bb      	str	r3, [r7, #24]
 800a276:	2b00      	cmp	r3, #0
 800a278:	bf14      	ite	ne
 800a27a:	2102      	movne	r1, #2
 800a27c:	2101      	moveq	r1, #1
 800a27e:	6139      	str	r1, [r7, #16]
 800a280:	b1c4      	cbz	r4, 800a2b4 <__d2b+0x88>
 800a282:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a286:	4404      	add	r4, r0
 800a288:	6034      	str	r4, [r6, #0]
 800a28a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a28e:	6028      	str	r0, [r5, #0]
 800a290:	4638      	mov	r0, r7
 800a292:	b003      	add	sp, #12
 800a294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a29c:	e7d5      	b.n	800a24a <__d2b+0x1e>
 800a29e:	6179      	str	r1, [r7, #20]
 800a2a0:	e7e7      	b.n	800a272 <__d2b+0x46>
 800a2a2:	a801      	add	r0, sp, #4
 800a2a4:	f7ff fd64 	bl	8009d70 <__lo0bits>
 800a2a8:	9b01      	ldr	r3, [sp, #4]
 800a2aa:	617b      	str	r3, [r7, #20]
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	6139      	str	r1, [r7, #16]
 800a2b0:	3020      	adds	r0, #32
 800a2b2:	e7e5      	b.n	800a280 <__d2b+0x54>
 800a2b4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a2b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2bc:	6030      	str	r0, [r6, #0]
 800a2be:	6918      	ldr	r0, [r3, #16]
 800a2c0:	f7ff fd37 	bl	8009d32 <__hi0bits>
 800a2c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a2c8:	e7e1      	b.n	800a28e <__d2b+0x62>

0800a2ca <__ratio>:
 800a2ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ce:	4688      	mov	r8, r1
 800a2d0:	4669      	mov	r1, sp
 800a2d2:	4681      	mov	r9, r0
 800a2d4:	f7ff ff5c 	bl	800a190 <__b2d>
 800a2d8:	a901      	add	r1, sp, #4
 800a2da:	4640      	mov	r0, r8
 800a2dc:	ec57 6b10 	vmov	r6, r7, d0
 800a2e0:	f7ff ff56 	bl	800a190 <__b2d>
 800a2e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a2ec:	eba3 0c02 	sub.w	ip, r3, r2
 800a2f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a2f4:	1a9b      	subs	r3, r3, r2
 800a2f6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a2fa:	ec5b ab10 	vmov	sl, fp, d0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	bfce      	itee	gt
 800a302:	463a      	movgt	r2, r7
 800a304:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a308:	465a      	movle	r2, fp
 800a30a:	4659      	mov	r1, fp
 800a30c:	463d      	mov	r5, r7
 800a30e:	bfd4      	ite	le
 800a310:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a314:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a318:	4630      	mov	r0, r6
 800a31a:	ee10 2a10 	vmov	r2, s0
 800a31e:	460b      	mov	r3, r1
 800a320:	4629      	mov	r1, r5
 800a322:	f7f6 fab3 	bl	800088c <__aeabi_ddiv>
 800a326:	ec41 0b10 	vmov	d0, r0, r1
 800a32a:	b003      	add	sp, #12
 800a32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a330 <__copybits>:
 800a330:	3901      	subs	r1, #1
 800a332:	b510      	push	{r4, lr}
 800a334:	1149      	asrs	r1, r1, #5
 800a336:	6914      	ldr	r4, [r2, #16]
 800a338:	3101      	adds	r1, #1
 800a33a:	f102 0314 	add.w	r3, r2, #20
 800a33e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a342:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a346:	42a3      	cmp	r3, r4
 800a348:	4602      	mov	r2, r0
 800a34a:	d303      	bcc.n	800a354 <__copybits+0x24>
 800a34c:	2300      	movs	r3, #0
 800a34e:	428a      	cmp	r2, r1
 800a350:	d305      	bcc.n	800a35e <__copybits+0x2e>
 800a352:	bd10      	pop	{r4, pc}
 800a354:	f853 2b04 	ldr.w	r2, [r3], #4
 800a358:	f840 2b04 	str.w	r2, [r0], #4
 800a35c:	e7f3      	b.n	800a346 <__copybits+0x16>
 800a35e:	f842 3b04 	str.w	r3, [r2], #4
 800a362:	e7f4      	b.n	800a34e <__copybits+0x1e>

0800a364 <__any_on>:
 800a364:	f100 0214 	add.w	r2, r0, #20
 800a368:	6900      	ldr	r0, [r0, #16]
 800a36a:	114b      	asrs	r3, r1, #5
 800a36c:	4298      	cmp	r0, r3
 800a36e:	b510      	push	{r4, lr}
 800a370:	db11      	blt.n	800a396 <__any_on+0x32>
 800a372:	dd0a      	ble.n	800a38a <__any_on+0x26>
 800a374:	f011 011f 	ands.w	r1, r1, #31
 800a378:	d007      	beq.n	800a38a <__any_on+0x26>
 800a37a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a37e:	fa24 f001 	lsr.w	r0, r4, r1
 800a382:	fa00 f101 	lsl.w	r1, r0, r1
 800a386:	428c      	cmp	r4, r1
 800a388:	d10b      	bne.n	800a3a2 <__any_on+0x3e>
 800a38a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a38e:	4293      	cmp	r3, r2
 800a390:	d803      	bhi.n	800a39a <__any_on+0x36>
 800a392:	2000      	movs	r0, #0
 800a394:	bd10      	pop	{r4, pc}
 800a396:	4603      	mov	r3, r0
 800a398:	e7f7      	b.n	800a38a <__any_on+0x26>
 800a39a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a39e:	2900      	cmp	r1, #0
 800a3a0:	d0f5      	beq.n	800a38e <__any_on+0x2a>
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	e7f6      	b.n	800a394 <__any_on+0x30>

0800a3a6 <_calloc_r>:
 800a3a6:	b538      	push	{r3, r4, r5, lr}
 800a3a8:	fb02 f401 	mul.w	r4, r2, r1
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	f000 f857 	bl	800a460 <_malloc_r>
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	b118      	cbz	r0, 800a3be <_calloc_r+0x18>
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	f7fc fcdd 	bl	8006d78 <memset>
 800a3be:	4628      	mov	r0, r5
 800a3c0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a3c4 <_free_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	2900      	cmp	r1, #0
 800a3ca:	d045      	beq.n	800a458 <_free_r+0x94>
 800a3cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3d0:	1f0c      	subs	r4, r1, #4
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	bfb8      	it	lt
 800a3d6:	18e4      	addlt	r4, r4, r3
 800a3d8:	f000 fe30 	bl	800b03c <__malloc_lock>
 800a3dc:	4a1f      	ldr	r2, [pc, #124]	; (800a45c <_free_r+0x98>)
 800a3de:	6813      	ldr	r3, [r2, #0]
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	b933      	cbnz	r3, 800a3f2 <_free_r+0x2e>
 800a3e4:	6063      	str	r3, [r4, #4]
 800a3e6:	6014      	str	r4, [r2, #0]
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3ee:	f000 be26 	b.w	800b03e <__malloc_unlock>
 800a3f2:	42a3      	cmp	r3, r4
 800a3f4:	d90c      	bls.n	800a410 <_free_r+0x4c>
 800a3f6:	6821      	ldr	r1, [r4, #0]
 800a3f8:	1862      	adds	r2, r4, r1
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	bf04      	itt	eq
 800a3fe:	681a      	ldreq	r2, [r3, #0]
 800a400:	685b      	ldreq	r3, [r3, #4]
 800a402:	6063      	str	r3, [r4, #4]
 800a404:	bf04      	itt	eq
 800a406:	1852      	addeq	r2, r2, r1
 800a408:	6022      	streq	r2, [r4, #0]
 800a40a:	6004      	str	r4, [r0, #0]
 800a40c:	e7ec      	b.n	800a3e8 <_free_r+0x24>
 800a40e:	4613      	mov	r3, r2
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	b10a      	cbz	r2, 800a418 <_free_r+0x54>
 800a414:	42a2      	cmp	r2, r4
 800a416:	d9fa      	bls.n	800a40e <_free_r+0x4a>
 800a418:	6819      	ldr	r1, [r3, #0]
 800a41a:	1858      	adds	r0, r3, r1
 800a41c:	42a0      	cmp	r0, r4
 800a41e:	d10b      	bne.n	800a438 <_free_r+0x74>
 800a420:	6820      	ldr	r0, [r4, #0]
 800a422:	4401      	add	r1, r0
 800a424:	1858      	adds	r0, r3, r1
 800a426:	4282      	cmp	r2, r0
 800a428:	6019      	str	r1, [r3, #0]
 800a42a:	d1dd      	bne.n	800a3e8 <_free_r+0x24>
 800a42c:	6810      	ldr	r0, [r2, #0]
 800a42e:	6852      	ldr	r2, [r2, #4]
 800a430:	605a      	str	r2, [r3, #4]
 800a432:	4401      	add	r1, r0
 800a434:	6019      	str	r1, [r3, #0]
 800a436:	e7d7      	b.n	800a3e8 <_free_r+0x24>
 800a438:	d902      	bls.n	800a440 <_free_r+0x7c>
 800a43a:	230c      	movs	r3, #12
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	e7d3      	b.n	800a3e8 <_free_r+0x24>
 800a440:	6820      	ldr	r0, [r4, #0]
 800a442:	1821      	adds	r1, r4, r0
 800a444:	428a      	cmp	r2, r1
 800a446:	bf04      	itt	eq
 800a448:	6811      	ldreq	r1, [r2, #0]
 800a44a:	6852      	ldreq	r2, [r2, #4]
 800a44c:	6062      	str	r2, [r4, #4]
 800a44e:	bf04      	itt	eq
 800a450:	1809      	addeq	r1, r1, r0
 800a452:	6021      	streq	r1, [r4, #0]
 800a454:	605c      	str	r4, [r3, #4]
 800a456:	e7c7      	b.n	800a3e8 <_free_r+0x24>
 800a458:	bd38      	pop	{r3, r4, r5, pc}
 800a45a:	bf00      	nop
 800a45c:	20000268 	.word	0x20000268

0800a460 <_malloc_r>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	1ccd      	adds	r5, r1, #3
 800a464:	f025 0503 	bic.w	r5, r5, #3
 800a468:	3508      	adds	r5, #8
 800a46a:	2d0c      	cmp	r5, #12
 800a46c:	bf38      	it	cc
 800a46e:	250c      	movcc	r5, #12
 800a470:	2d00      	cmp	r5, #0
 800a472:	4606      	mov	r6, r0
 800a474:	db01      	blt.n	800a47a <_malloc_r+0x1a>
 800a476:	42a9      	cmp	r1, r5
 800a478:	d903      	bls.n	800a482 <_malloc_r+0x22>
 800a47a:	230c      	movs	r3, #12
 800a47c:	6033      	str	r3, [r6, #0]
 800a47e:	2000      	movs	r0, #0
 800a480:	bd70      	pop	{r4, r5, r6, pc}
 800a482:	f000 fddb 	bl	800b03c <__malloc_lock>
 800a486:	4a21      	ldr	r2, [pc, #132]	; (800a50c <_malloc_r+0xac>)
 800a488:	6814      	ldr	r4, [r2, #0]
 800a48a:	4621      	mov	r1, r4
 800a48c:	b991      	cbnz	r1, 800a4b4 <_malloc_r+0x54>
 800a48e:	4c20      	ldr	r4, [pc, #128]	; (800a510 <_malloc_r+0xb0>)
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	b91b      	cbnz	r3, 800a49c <_malloc_r+0x3c>
 800a494:	4630      	mov	r0, r6
 800a496:	f000 fc91 	bl	800adbc <_sbrk_r>
 800a49a:	6020      	str	r0, [r4, #0]
 800a49c:	4629      	mov	r1, r5
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f000 fc8c 	bl	800adbc <_sbrk_r>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d124      	bne.n	800a4f2 <_malloc_r+0x92>
 800a4a8:	230c      	movs	r3, #12
 800a4aa:	6033      	str	r3, [r6, #0]
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f000 fdc6 	bl	800b03e <__malloc_unlock>
 800a4b2:	e7e4      	b.n	800a47e <_malloc_r+0x1e>
 800a4b4:	680b      	ldr	r3, [r1, #0]
 800a4b6:	1b5b      	subs	r3, r3, r5
 800a4b8:	d418      	bmi.n	800a4ec <_malloc_r+0x8c>
 800a4ba:	2b0b      	cmp	r3, #11
 800a4bc:	d90f      	bls.n	800a4de <_malloc_r+0x7e>
 800a4be:	600b      	str	r3, [r1, #0]
 800a4c0:	50cd      	str	r5, [r1, r3]
 800a4c2:	18cc      	adds	r4, r1, r3
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f000 fdba 	bl	800b03e <__malloc_unlock>
 800a4ca:	f104 000b 	add.w	r0, r4, #11
 800a4ce:	1d23      	adds	r3, r4, #4
 800a4d0:	f020 0007 	bic.w	r0, r0, #7
 800a4d4:	1ac3      	subs	r3, r0, r3
 800a4d6:	d0d3      	beq.n	800a480 <_malloc_r+0x20>
 800a4d8:	425a      	negs	r2, r3
 800a4da:	50e2      	str	r2, [r4, r3]
 800a4dc:	e7d0      	b.n	800a480 <_malloc_r+0x20>
 800a4de:	428c      	cmp	r4, r1
 800a4e0:	684b      	ldr	r3, [r1, #4]
 800a4e2:	bf16      	itet	ne
 800a4e4:	6063      	strne	r3, [r4, #4]
 800a4e6:	6013      	streq	r3, [r2, #0]
 800a4e8:	460c      	movne	r4, r1
 800a4ea:	e7eb      	b.n	800a4c4 <_malloc_r+0x64>
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	6849      	ldr	r1, [r1, #4]
 800a4f0:	e7cc      	b.n	800a48c <_malloc_r+0x2c>
 800a4f2:	1cc4      	adds	r4, r0, #3
 800a4f4:	f024 0403 	bic.w	r4, r4, #3
 800a4f8:	42a0      	cmp	r0, r4
 800a4fa:	d005      	beq.n	800a508 <_malloc_r+0xa8>
 800a4fc:	1a21      	subs	r1, r4, r0
 800a4fe:	4630      	mov	r0, r6
 800a500:	f000 fc5c 	bl	800adbc <_sbrk_r>
 800a504:	3001      	adds	r0, #1
 800a506:	d0cf      	beq.n	800a4a8 <_malloc_r+0x48>
 800a508:	6025      	str	r5, [r4, #0]
 800a50a:	e7db      	b.n	800a4c4 <_malloc_r+0x64>
 800a50c:	20000268 	.word	0x20000268
 800a510:	2000026c 	.word	0x2000026c

0800a514 <__ssputs_r>:
 800a514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a518:	688e      	ldr	r6, [r1, #8]
 800a51a:	429e      	cmp	r6, r3
 800a51c:	4682      	mov	sl, r0
 800a51e:	460c      	mov	r4, r1
 800a520:	4690      	mov	r8, r2
 800a522:	4699      	mov	r9, r3
 800a524:	d837      	bhi.n	800a596 <__ssputs_r+0x82>
 800a526:	898a      	ldrh	r2, [r1, #12]
 800a528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a52c:	d031      	beq.n	800a592 <__ssputs_r+0x7e>
 800a52e:	6825      	ldr	r5, [r4, #0]
 800a530:	6909      	ldr	r1, [r1, #16]
 800a532:	1a6f      	subs	r7, r5, r1
 800a534:	6965      	ldr	r5, [r4, #20]
 800a536:	2302      	movs	r3, #2
 800a538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a53c:	fb95 f5f3 	sdiv	r5, r5, r3
 800a540:	f109 0301 	add.w	r3, r9, #1
 800a544:	443b      	add	r3, r7
 800a546:	429d      	cmp	r5, r3
 800a548:	bf38      	it	cc
 800a54a:	461d      	movcc	r5, r3
 800a54c:	0553      	lsls	r3, r2, #21
 800a54e:	d530      	bpl.n	800a5b2 <__ssputs_r+0x9e>
 800a550:	4629      	mov	r1, r5
 800a552:	f7ff ff85 	bl	800a460 <_malloc_r>
 800a556:	4606      	mov	r6, r0
 800a558:	b950      	cbnz	r0, 800a570 <__ssputs_r+0x5c>
 800a55a:	230c      	movs	r3, #12
 800a55c:	f8ca 3000 	str.w	r3, [sl]
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a566:	81a3      	strh	r3, [r4, #12]
 800a568:	f04f 30ff 	mov.w	r0, #4294967295
 800a56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a570:	463a      	mov	r2, r7
 800a572:	6921      	ldr	r1, [r4, #16]
 800a574:	f7ff fb0e 	bl	8009b94 <memcpy>
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a582:	81a3      	strh	r3, [r4, #12]
 800a584:	6126      	str	r6, [r4, #16]
 800a586:	6165      	str	r5, [r4, #20]
 800a588:	443e      	add	r6, r7
 800a58a:	1bed      	subs	r5, r5, r7
 800a58c:	6026      	str	r6, [r4, #0]
 800a58e:	60a5      	str	r5, [r4, #8]
 800a590:	464e      	mov	r6, r9
 800a592:	454e      	cmp	r6, r9
 800a594:	d900      	bls.n	800a598 <__ssputs_r+0x84>
 800a596:	464e      	mov	r6, r9
 800a598:	4632      	mov	r2, r6
 800a59a:	4641      	mov	r1, r8
 800a59c:	6820      	ldr	r0, [r4, #0]
 800a59e:	f000 fd34 	bl	800b00a <memmove>
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	1b9b      	subs	r3, r3, r6
 800a5a6:	60a3      	str	r3, [r4, #8]
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	441e      	add	r6, r3
 800a5ac:	6026      	str	r6, [r4, #0]
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	e7dc      	b.n	800a56c <__ssputs_r+0x58>
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	f000 fd44 	bl	800b040 <_realloc_r>
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d1e2      	bne.n	800a584 <__ssputs_r+0x70>
 800a5be:	6921      	ldr	r1, [r4, #16]
 800a5c0:	4650      	mov	r0, sl
 800a5c2:	f7ff feff 	bl	800a3c4 <_free_r>
 800a5c6:	e7c8      	b.n	800a55a <__ssputs_r+0x46>

0800a5c8 <_svfiprintf_r>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	461d      	mov	r5, r3
 800a5ce:	898b      	ldrh	r3, [r1, #12]
 800a5d0:	061f      	lsls	r7, r3, #24
 800a5d2:	b09d      	sub	sp, #116	; 0x74
 800a5d4:	4680      	mov	r8, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	4616      	mov	r6, r2
 800a5da:	d50f      	bpl.n	800a5fc <_svfiprintf_r+0x34>
 800a5dc:	690b      	ldr	r3, [r1, #16]
 800a5de:	b96b      	cbnz	r3, 800a5fc <_svfiprintf_r+0x34>
 800a5e0:	2140      	movs	r1, #64	; 0x40
 800a5e2:	f7ff ff3d 	bl	800a460 <_malloc_r>
 800a5e6:	6020      	str	r0, [r4, #0]
 800a5e8:	6120      	str	r0, [r4, #16]
 800a5ea:	b928      	cbnz	r0, 800a5f8 <_svfiprintf_r+0x30>
 800a5ec:	230c      	movs	r3, #12
 800a5ee:	f8c8 3000 	str.w	r3, [r8]
 800a5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f6:	e0c8      	b.n	800a78a <_svfiprintf_r+0x1c2>
 800a5f8:	2340      	movs	r3, #64	; 0x40
 800a5fa:	6163      	str	r3, [r4, #20]
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a600:	2320      	movs	r3, #32
 800a602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a606:	2330      	movs	r3, #48	; 0x30
 800a608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a60c:	9503      	str	r5, [sp, #12]
 800a60e:	f04f 0b01 	mov.w	fp, #1
 800a612:	4637      	mov	r7, r6
 800a614:	463d      	mov	r5, r7
 800a616:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a61a:	b10b      	cbz	r3, 800a620 <_svfiprintf_r+0x58>
 800a61c:	2b25      	cmp	r3, #37	; 0x25
 800a61e:	d13e      	bne.n	800a69e <_svfiprintf_r+0xd6>
 800a620:	ebb7 0a06 	subs.w	sl, r7, r6
 800a624:	d00b      	beq.n	800a63e <_svfiprintf_r+0x76>
 800a626:	4653      	mov	r3, sl
 800a628:	4632      	mov	r2, r6
 800a62a:	4621      	mov	r1, r4
 800a62c:	4640      	mov	r0, r8
 800a62e:	f7ff ff71 	bl	800a514 <__ssputs_r>
 800a632:	3001      	adds	r0, #1
 800a634:	f000 80a4 	beq.w	800a780 <_svfiprintf_r+0x1b8>
 800a638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a63a:	4453      	add	r3, sl
 800a63c:	9309      	str	r3, [sp, #36]	; 0x24
 800a63e:	783b      	ldrb	r3, [r7, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 809d 	beq.w	800a780 <_svfiprintf_r+0x1b8>
 800a646:	2300      	movs	r3, #0
 800a648:	f04f 32ff 	mov.w	r2, #4294967295
 800a64c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a650:	9304      	str	r3, [sp, #16]
 800a652:	9307      	str	r3, [sp, #28]
 800a654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a658:	931a      	str	r3, [sp, #104]	; 0x68
 800a65a:	462f      	mov	r7, r5
 800a65c:	2205      	movs	r2, #5
 800a65e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a662:	4850      	ldr	r0, [pc, #320]	; (800a7a4 <_svfiprintf_r+0x1dc>)
 800a664:	f7f5 fddc 	bl	8000220 <memchr>
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	b9d0      	cbnz	r0, 800a6a2 <_svfiprintf_r+0xda>
 800a66c:	06d9      	lsls	r1, r3, #27
 800a66e:	bf44      	itt	mi
 800a670:	2220      	movmi	r2, #32
 800a672:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a676:	071a      	lsls	r2, r3, #28
 800a678:	bf44      	itt	mi
 800a67a:	222b      	movmi	r2, #43	; 0x2b
 800a67c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a680:	782a      	ldrb	r2, [r5, #0]
 800a682:	2a2a      	cmp	r2, #42	; 0x2a
 800a684:	d015      	beq.n	800a6b2 <_svfiprintf_r+0xea>
 800a686:	9a07      	ldr	r2, [sp, #28]
 800a688:	462f      	mov	r7, r5
 800a68a:	2000      	movs	r0, #0
 800a68c:	250a      	movs	r5, #10
 800a68e:	4639      	mov	r1, r7
 800a690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a694:	3b30      	subs	r3, #48	; 0x30
 800a696:	2b09      	cmp	r3, #9
 800a698:	d94d      	bls.n	800a736 <_svfiprintf_r+0x16e>
 800a69a:	b1b8      	cbz	r0, 800a6cc <_svfiprintf_r+0x104>
 800a69c:	e00f      	b.n	800a6be <_svfiprintf_r+0xf6>
 800a69e:	462f      	mov	r7, r5
 800a6a0:	e7b8      	b.n	800a614 <_svfiprintf_r+0x4c>
 800a6a2:	4a40      	ldr	r2, [pc, #256]	; (800a7a4 <_svfiprintf_r+0x1dc>)
 800a6a4:	1a80      	subs	r0, r0, r2
 800a6a6:	fa0b f000 	lsl.w	r0, fp, r0
 800a6aa:	4318      	orrs	r0, r3
 800a6ac:	9004      	str	r0, [sp, #16]
 800a6ae:	463d      	mov	r5, r7
 800a6b0:	e7d3      	b.n	800a65a <_svfiprintf_r+0x92>
 800a6b2:	9a03      	ldr	r2, [sp, #12]
 800a6b4:	1d11      	adds	r1, r2, #4
 800a6b6:	6812      	ldr	r2, [r2, #0]
 800a6b8:	9103      	str	r1, [sp, #12]
 800a6ba:	2a00      	cmp	r2, #0
 800a6bc:	db01      	blt.n	800a6c2 <_svfiprintf_r+0xfa>
 800a6be:	9207      	str	r2, [sp, #28]
 800a6c0:	e004      	b.n	800a6cc <_svfiprintf_r+0x104>
 800a6c2:	4252      	negs	r2, r2
 800a6c4:	f043 0302 	orr.w	r3, r3, #2
 800a6c8:	9207      	str	r2, [sp, #28]
 800a6ca:	9304      	str	r3, [sp, #16]
 800a6cc:	783b      	ldrb	r3, [r7, #0]
 800a6ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a6d0:	d10c      	bne.n	800a6ec <_svfiprintf_r+0x124>
 800a6d2:	787b      	ldrb	r3, [r7, #1]
 800a6d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d6:	d133      	bne.n	800a740 <_svfiprintf_r+0x178>
 800a6d8:	9b03      	ldr	r3, [sp, #12]
 800a6da:	1d1a      	adds	r2, r3, #4
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	9203      	str	r2, [sp, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	bfb8      	it	lt
 800a6e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6e8:	3702      	adds	r7, #2
 800a6ea:	9305      	str	r3, [sp, #20]
 800a6ec:	4d2e      	ldr	r5, [pc, #184]	; (800a7a8 <_svfiprintf_r+0x1e0>)
 800a6ee:	7839      	ldrb	r1, [r7, #0]
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f7f5 fd94 	bl	8000220 <memchr>
 800a6f8:	b138      	cbz	r0, 800a70a <_svfiprintf_r+0x142>
 800a6fa:	2340      	movs	r3, #64	; 0x40
 800a6fc:	1b40      	subs	r0, r0, r5
 800a6fe:	fa03 f000 	lsl.w	r0, r3, r0
 800a702:	9b04      	ldr	r3, [sp, #16]
 800a704:	4303      	orrs	r3, r0
 800a706:	3701      	adds	r7, #1
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	7839      	ldrb	r1, [r7, #0]
 800a70c:	4827      	ldr	r0, [pc, #156]	; (800a7ac <_svfiprintf_r+0x1e4>)
 800a70e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a712:	2206      	movs	r2, #6
 800a714:	1c7e      	adds	r6, r7, #1
 800a716:	f7f5 fd83 	bl	8000220 <memchr>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d038      	beq.n	800a790 <_svfiprintf_r+0x1c8>
 800a71e:	4b24      	ldr	r3, [pc, #144]	; (800a7b0 <_svfiprintf_r+0x1e8>)
 800a720:	bb13      	cbnz	r3, 800a768 <_svfiprintf_r+0x1a0>
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	3307      	adds	r3, #7
 800a726:	f023 0307 	bic.w	r3, r3, #7
 800a72a:	3308      	adds	r3, #8
 800a72c:	9303      	str	r3, [sp, #12]
 800a72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a730:	444b      	add	r3, r9
 800a732:	9309      	str	r3, [sp, #36]	; 0x24
 800a734:	e76d      	b.n	800a612 <_svfiprintf_r+0x4a>
 800a736:	fb05 3202 	mla	r2, r5, r2, r3
 800a73a:	2001      	movs	r0, #1
 800a73c:	460f      	mov	r7, r1
 800a73e:	e7a6      	b.n	800a68e <_svfiprintf_r+0xc6>
 800a740:	2300      	movs	r3, #0
 800a742:	3701      	adds	r7, #1
 800a744:	9305      	str	r3, [sp, #20]
 800a746:	4619      	mov	r1, r3
 800a748:	250a      	movs	r5, #10
 800a74a:	4638      	mov	r0, r7
 800a74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a750:	3a30      	subs	r2, #48	; 0x30
 800a752:	2a09      	cmp	r2, #9
 800a754:	d903      	bls.n	800a75e <_svfiprintf_r+0x196>
 800a756:	2b00      	cmp	r3, #0
 800a758:	d0c8      	beq.n	800a6ec <_svfiprintf_r+0x124>
 800a75a:	9105      	str	r1, [sp, #20]
 800a75c:	e7c6      	b.n	800a6ec <_svfiprintf_r+0x124>
 800a75e:	fb05 2101 	mla	r1, r5, r1, r2
 800a762:	2301      	movs	r3, #1
 800a764:	4607      	mov	r7, r0
 800a766:	e7f0      	b.n	800a74a <_svfiprintf_r+0x182>
 800a768:	ab03      	add	r3, sp, #12
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	4622      	mov	r2, r4
 800a76e:	4b11      	ldr	r3, [pc, #68]	; (800a7b4 <_svfiprintf_r+0x1ec>)
 800a770:	a904      	add	r1, sp, #16
 800a772:	4640      	mov	r0, r8
 800a774:	f7fc fb9c 	bl	8006eb0 <_printf_float>
 800a778:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a77c:	4681      	mov	r9, r0
 800a77e:	d1d6      	bne.n	800a72e <_svfiprintf_r+0x166>
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	065b      	lsls	r3, r3, #25
 800a784:	f53f af35 	bmi.w	800a5f2 <_svfiprintf_r+0x2a>
 800a788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a78a:	b01d      	add	sp, #116	; 0x74
 800a78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a790:	ab03      	add	r3, sp, #12
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	4622      	mov	r2, r4
 800a796:	4b07      	ldr	r3, [pc, #28]	; (800a7b4 <_svfiprintf_r+0x1ec>)
 800a798:	a904      	add	r1, sp, #16
 800a79a:	4640      	mov	r0, r8
 800a79c:	f7fc fe3e 	bl	800741c <_printf_i>
 800a7a0:	e7ea      	b.n	800a778 <_svfiprintf_r+0x1b0>
 800a7a2:	bf00      	nop
 800a7a4:	0800b2d4 	.word	0x0800b2d4
 800a7a8:	0800b2da 	.word	0x0800b2da
 800a7ac:	0800b2de 	.word	0x0800b2de
 800a7b0:	08006eb1 	.word	0x08006eb1
 800a7b4:	0800a515 	.word	0x0800a515

0800a7b8 <_sungetc_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	1c4b      	adds	r3, r1, #1
 800a7bc:	4614      	mov	r4, r2
 800a7be:	d103      	bne.n	800a7c8 <_sungetc_r+0x10>
 800a7c0:	f04f 35ff 	mov.w	r5, #4294967295
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	8993      	ldrh	r3, [r2, #12]
 800a7ca:	f023 0320 	bic.w	r3, r3, #32
 800a7ce:	8193      	strh	r3, [r2, #12]
 800a7d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7d2:	6852      	ldr	r2, [r2, #4]
 800a7d4:	b2cd      	uxtb	r5, r1
 800a7d6:	b18b      	cbz	r3, 800a7fc <_sungetc_r+0x44>
 800a7d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	dd08      	ble.n	800a7f0 <_sungetc_r+0x38>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	1e5a      	subs	r2, r3, #1
 800a7e2:	6022      	str	r2, [r4, #0]
 800a7e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a7e8:	6863      	ldr	r3, [r4, #4]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	6063      	str	r3, [r4, #4]
 800a7ee:	e7e9      	b.n	800a7c4 <_sungetc_r+0xc>
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	f000 fbc3 	bl	800af7c <__submore>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d0f1      	beq.n	800a7de <_sungetc_r+0x26>
 800a7fa:	e7e1      	b.n	800a7c0 <_sungetc_r+0x8>
 800a7fc:	6921      	ldr	r1, [r4, #16]
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	b151      	cbz	r1, 800a818 <_sungetc_r+0x60>
 800a802:	4299      	cmp	r1, r3
 800a804:	d208      	bcs.n	800a818 <_sungetc_r+0x60>
 800a806:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a80a:	42a9      	cmp	r1, r5
 800a80c:	d104      	bne.n	800a818 <_sungetc_r+0x60>
 800a80e:	3b01      	subs	r3, #1
 800a810:	3201      	adds	r2, #1
 800a812:	6023      	str	r3, [r4, #0]
 800a814:	6062      	str	r2, [r4, #4]
 800a816:	e7d5      	b.n	800a7c4 <_sungetc_r+0xc>
 800a818:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a81c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a820:	6363      	str	r3, [r4, #52]	; 0x34
 800a822:	2303      	movs	r3, #3
 800a824:	63a3      	str	r3, [r4, #56]	; 0x38
 800a826:	4623      	mov	r3, r4
 800a828:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	2301      	movs	r3, #1
 800a830:	e7dc      	b.n	800a7ec <_sungetc_r+0x34>

0800a832 <__ssrefill_r>:
 800a832:	b510      	push	{r4, lr}
 800a834:	460c      	mov	r4, r1
 800a836:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a838:	b169      	cbz	r1, 800a856 <__ssrefill_r+0x24>
 800a83a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a83e:	4299      	cmp	r1, r3
 800a840:	d001      	beq.n	800a846 <__ssrefill_r+0x14>
 800a842:	f7ff fdbf 	bl	800a3c4 <_free_r>
 800a846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a848:	6063      	str	r3, [r4, #4]
 800a84a:	2000      	movs	r0, #0
 800a84c:	6360      	str	r0, [r4, #52]	; 0x34
 800a84e:	b113      	cbz	r3, 800a856 <__ssrefill_r+0x24>
 800a850:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a852:	6023      	str	r3, [r4, #0]
 800a854:	bd10      	pop	{r4, pc}
 800a856:	6923      	ldr	r3, [r4, #16]
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	2300      	movs	r3, #0
 800a85c:	6063      	str	r3, [r4, #4]
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	f043 0320 	orr.w	r3, r3, #32
 800a864:	81a3      	strh	r3, [r4, #12]
 800a866:	f04f 30ff 	mov.w	r0, #4294967295
 800a86a:	e7f3      	b.n	800a854 <__ssrefill_r+0x22>

0800a86c <__ssvfiscanf_r>:
 800a86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a870:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a874:	460c      	mov	r4, r1
 800a876:	2100      	movs	r1, #0
 800a878:	9144      	str	r1, [sp, #272]	; 0x110
 800a87a:	9145      	str	r1, [sp, #276]	; 0x114
 800a87c:	499f      	ldr	r1, [pc, #636]	; (800aafc <__ssvfiscanf_r+0x290>)
 800a87e:	91a0      	str	r1, [sp, #640]	; 0x280
 800a880:	f10d 0804 	add.w	r8, sp, #4
 800a884:	499e      	ldr	r1, [pc, #632]	; (800ab00 <__ssvfiscanf_r+0x294>)
 800a886:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800ab04 <__ssvfiscanf_r+0x298>
 800a88a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a88e:	4606      	mov	r6, r0
 800a890:	4692      	mov	sl, r2
 800a892:	91a1      	str	r1, [sp, #644]	; 0x284
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	270a      	movs	r7, #10
 800a898:	f89a 3000 	ldrb.w	r3, [sl]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 812a 	beq.w	800aaf6 <__ssvfiscanf_r+0x28a>
 800a8a2:	4655      	mov	r5, sl
 800a8a4:	f7ff f93e 	bl	8009b24 <__locale_ctype_ptr>
 800a8a8:	f815 bb01 	ldrb.w	fp, [r5], #1
 800a8ac:	4458      	add	r0, fp
 800a8ae:	7843      	ldrb	r3, [r0, #1]
 800a8b0:	f013 0308 	ands.w	r3, r3, #8
 800a8b4:	d01c      	beq.n	800a8f0 <__ssvfiscanf_r+0x84>
 800a8b6:	6863      	ldr	r3, [r4, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	dd12      	ble.n	800a8e2 <__ssvfiscanf_r+0x76>
 800a8bc:	f7ff f932 	bl	8009b24 <__locale_ctype_ptr>
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	781a      	ldrb	r2, [r3, #0]
 800a8c4:	4410      	add	r0, r2
 800a8c6:	7842      	ldrb	r2, [r0, #1]
 800a8c8:	0712      	lsls	r2, r2, #28
 800a8ca:	d401      	bmi.n	800a8d0 <__ssvfiscanf_r+0x64>
 800a8cc:	46aa      	mov	sl, r5
 800a8ce:	e7e3      	b.n	800a898 <__ssvfiscanf_r+0x2c>
 800a8d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a8d2:	3201      	adds	r2, #1
 800a8d4:	9245      	str	r2, [sp, #276]	; 0x114
 800a8d6:	6862      	ldr	r2, [r4, #4]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	3a01      	subs	r2, #1
 800a8dc:	6062      	str	r2, [r4, #4]
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	e7e9      	b.n	800a8b6 <__ssvfiscanf_r+0x4a>
 800a8e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	4798      	blx	r3
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d0e6      	beq.n	800a8bc <__ssvfiscanf_r+0x50>
 800a8ee:	e7ed      	b.n	800a8cc <__ssvfiscanf_r+0x60>
 800a8f0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a8f4:	f040 8082 	bne.w	800a9fc <__ssvfiscanf_r+0x190>
 800a8f8:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8fa:	9341      	str	r3, [sp, #260]	; 0x104
 800a8fc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a900:	2b2a      	cmp	r3, #42	; 0x2a
 800a902:	d103      	bne.n	800a90c <__ssvfiscanf_r+0xa0>
 800a904:	2310      	movs	r3, #16
 800a906:	9341      	str	r3, [sp, #260]	; 0x104
 800a908:	f10a 0502 	add.w	r5, sl, #2
 800a90c:	46aa      	mov	sl, r5
 800a90e:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a912:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a916:	2a09      	cmp	r2, #9
 800a918:	d922      	bls.n	800a960 <__ssvfiscanf_r+0xf4>
 800a91a:	2203      	movs	r2, #3
 800a91c:	4879      	ldr	r0, [pc, #484]	; (800ab04 <__ssvfiscanf_r+0x298>)
 800a91e:	f7f5 fc7f 	bl	8000220 <memchr>
 800a922:	b138      	cbz	r0, 800a934 <__ssvfiscanf_r+0xc8>
 800a924:	eba0 0309 	sub.w	r3, r0, r9
 800a928:	2001      	movs	r0, #1
 800a92a:	4098      	lsls	r0, r3
 800a92c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a92e:	4318      	orrs	r0, r3
 800a930:	9041      	str	r0, [sp, #260]	; 0x104
 800a932:	46aa      	mov	sl, r5
 800a934:	f89a 3000 	ldrb.w	r3, [sl]
 800a938:	2b67      	cmp	r3, #103	; 0x67
 800a93a:	f10a 0501 	add.w	r5, sl, #1
 800a93e:	d82b      	bhi.n	800a998 <__ssvfiscanf_r+0x12c>
 800a940:	2b65      	cmp	r3, #101	; 0x65
 800a942:	f080 809f 	bcs.w	800aa84 <__ssvfiscanf_r+0x218>
 800a946:	2b47      	cmp	r3, #71	; 0x47
 800a948:	d810      	bhi.n	800a96c <__ssvfiscanf_r+0x100>
 800a94a:	2b45      	cmp	r3, #69	; 0x45
 800a94c:	f080 809a 	bcs.w	800aa84 <__ssvfiscanf_r+0x218>
 800a950:	2b00      	cmp	r3, #0
 800a952:	d06c      	beq.n	800aa2e <__ssvfiscanf_r+0x1c2>
 800a954:	2b25      	cmp	r3, #37	; 0x25
 800a956:	d051      	beq.n	800a9fc <__ssvfiscanf_r+0x190>
 800a958:	2303      	movs	r3, #3
 800a95a:	9347      	str	r3, [sp, #284]	; 0x11c
 800a95c:	9742      	str	r7, [sp, #264]	; 0x108
 800a95e:	e027      	b.n	800a9b0 <__ssvfiscanf_r+0x144>
 800a960:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a962:	fb07 1303 	mla	r3, r7, r3, r1
 800a966:	3b30      	subs	r3, #48	; 0x30
 800a968:	9343      	str	r3, [sp, #268]	; 0x10c
 800a96a:	e7cf      	b.n	800a90c <__ssvfiscanf_r+0xa0>
 800a96c:	2b5b      	cmp	r3, #91	; 0x5b
 800a96e:	d06a      	beq.n	800aa46 <__ssvfiscanf_r+0x1da>
 800a970:	d80c      	bhi.n	800a98c <__ssvfiscanf_r+0x120>
 800a972:	2b58      	cmp	r3, #88	; 0x58
 800a974:	d1f0      	bne.n	800a958 <__ssvfiscanf_r+0xec>
 800a976:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a97c:	9241      	str	r2, [sp, #260]	; 0x104
 800a97e:	2210      	movs	r2, #16
 800a980:	9242      	str	r2, [sp, #264]	; 0x108
 800a982:	2b6e      	cmp	r3, #110	; 0x6e
 800a984:	bf8c      	ite	hi
 800a986:	2304      	movhi	r3, #4
 800a988:	2303      	movls	r3, #3
 800a98a:	e010      	b.n	800a9ae <__ssvfiscanf_r+0x142>
 800a98c:	2b63      	cmp	r3, #99	; 0x63
 800a98e:	d065      	beq.n	800aa5c <__ssvfiscanf_r+0x1f0>
 800a990:	2b64      	cmp	r3, #100	; 0x64
 800a992:	d1e1      	bne.n	800a958 <__ssvfiscanf_r+0xec>
 800a994:	9742      	str	r7, [sp, #264]	; 0x108
 800a996:	e7f4      	b.n	800a982 <__ssvfiscanf_r+0x116>
 800a998:	2b70      	cmp	r3, #112	; 0x70
 800a99a:	d04b      	beq.n	800aa34 <__ssvfiscanf_r+0x1c8>
 800a99c:	d826      	bhi.n	800a9ec <__ssvfiscanf_r+0x180>
 800a99e:	2b6e      	cmp	r3, #110	; 0x6e
 800a9a0:	d062      	beq.n	800aa68 <__ssvfiscanf_r+0x1fc>
 800a9a2:	d84c      	bhi.n	800aa3e <__ssvfiscanf_r+0x1d2>
 800a9a4:	2b69      	cmp	r3, #105	; 0x69
 800a9a6:	d1d7      	bne.n	800a958 <__ssvfiscanf_r+0xec>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	9342      	str	r3, [sp, #264]	; 0x108
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	9347      	str	r3, [sp, #284]	; 0x11c
 800a9b0:	6863      	ldr	r3, [r4, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	dd68      	ble.n	800aa88 <__ssvfiscanf_r+0x21c>
 800a9b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a9b8:	0659      	lsls	r1, r3, #25
 800a9ba:	d407      	bmi.n	800a9cc <__ssvfiscanf_r+0x160>
 800a9bc:	f7ff f8b2 	bl	8009b24 <__locale_ctype_ptr>
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	781a      	ldrb	r2, [r3, #0]
 800a9c4:	4410      	add	r0, r2
 800a9c6:	7842      	ldrb	r2, [r0, #1]
 800a9c8:	0712      	lsls	r2, r2, #28
 800a9ca:	d464      	bmi.n	800aa96 <__ssvfiscanf_r+0x22a>
 800a9cc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	dc73      	bgt.n	800aaba <__ssvfiscanf_r+0x24e>
 800a9d2:	466b      	mov	r3, sp
 800a9d4:	4622      	mov	r2, r4
 800a9d6:	a941      	add	r1, sp, #260	; 0x104
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f000 f897 	bl	800ab0c <_scanf_chars>
 800a9de:	2801      	cmp	r0, #1
 800a9e0:	f000 8089 	beq.w	800aaf6 <__ssvfiscanf_r+0x28a>
 800a9e4:	2802      	cmp	r0, #2
 800a9e6:	f47f af71 	bne.w	800a8cc <__ssvfiscanf_r+0x60>
 800a9ea:	e01d      	b.n	800aa28 <__ssvfiscanf_r+0x1bc>
 800a9ec:	2b75      	cmp	r3, #117	; 0x75
 800a9ee:	d0d1      	beq.n	800a994 <__ssvfiscanf_r+0x128>
 800a9f0:	2b78      	cmp	r3, #120	; 0x78
 800a9f2:	d0c0      	beq.n	800a976 <__ssvfiscanf_r+0x10a>
 800a9f4:	2b73      	cmp	r3, #115	; 0x73
 800a9f6:	d1af      	bne.n	800a958 <__ssvfiscanf_r+0xec>
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	e7d8      	b.n	800a9ae <__ssvfiscanf_r+0x142>
 800a9fc:	6863      	ldr	r3, [r4, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	dd0c      	ble.n	800aa1c <__ssvfiscanf_r+0x1b0>
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	781a      	ldrb	r2, [r3, #0]
 800aa06:	455a      	cmp	r2, fp
 800aa08:	d175      	bne.n	800aaf6 <__ssvfiscanf_r+0x28a>
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	6862      	ldr	r2, [r4, #4]
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800aa12:	3a01      	subs	r2, #1
 800aa14:	3301      	adds	r3, #1
 800aa16:	6062      	str	r2, [r4, #4]
 800aa18:	9345      	str	r3, [sp, #276]	; 0x114
 800aa1a:	e757      	b.n	800a8cc <__ssvfiscanf_r+0x60>
 800aa1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4630      	mov	r0, r6
 800aa22:	4798      	blx	r3
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d0ec      	beq.n	800aa02 <__ssvfiscanf_r+0x196>
 800aa28:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d159      	bne.n	800aae2 <__ssvfiscanf_r+0x276>
 800aa2e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa32:	e05c      	b.n	800aaee <__ssvfiscanf_r+0x282>
 800aa34:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aa36:	f042 0220 	orr.w	r2, r2, #32
 800aa3a:	9241      	str	r2, [sp, #260]	; 0x104
 800aa3c:	e79b      	b.n	800a976 <__ssvfiscanf_r+0x10a>
 800aa3e:	2308      	movs	r3, #8
 800aa40:	9342      	str	r3, [sp, #264]	; 0x108
 800aa42:	2304      	movs	r3, #4
 800aa44:	e7b3      	b.n	800a9ae <__ssvfiscanf_r+0x142>
 800aa46:	4629      	mov	r1, r5
 800aa48:	4640      	mov	r0, r8
 800aa4a:	f000 f9c7 	bl	800addc <__sccl>
 800aa4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aa50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa54:	9341      	str	r3, [sp, #260]	; 0x104
 800aa56:	4605      	mov	r5, r0
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e7a8      	b.n	800a9ae <__ssvfiscanf_r+0x142>
 800aa5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aa5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa62:	9341      	str	r3, [sp, #260]	; 0x104
 800aa64:	2300      	movs	r3, #0
 800aa66:	e7a2      	b.n	800a9ae <__ssvfiscanf_r+0x142>
 800aa68:	9841      	ldr	r0, [sp, #260]	; 0x104
 800aa6a:	06c3      	lsls	r3, r0, #27
 800aa6c:	f53f af2e 	bmi.w	800a8cc <__ssvfiscanf_r+0x60>
 800aa70:	9b00      	ldr	r3, [sp, #0]
 800aa72:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aa74:	1d19      	adds	r1, r3, #4
 800aa76:	9100      	str	r1, [sp, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	07c0      	lsls	r0, r0, #31
 800aa7c:	bf4c      	ite	mi
 800aa7e:	801a      	strhmi	r2, [r3, #0]
 800aa80:	601a      	strpl	r2, [r3, #0]
 800aa82:	e723      	b.n	800a8cc <__ssvfiscanf_r+0x60>
 800aa84:	2305      	movs	r3, #5
 800aa86:	e792      	b.n	800a9ae <__ssvfiscanf_r+0x142>
 800aa88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4798      	blx	r3
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d090      	beq.n	800a9b6 <__ssvfiscanf_r+0x14a>
 800aa94:	e7c8      	b.n	800aa28 <__ssvfiscanf_r+0x1bc>
 800aa96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aa98:	3201      	adds	r2, #1
 800aa9a:	9245      	str	r2, [sp, #276]	; 0x114
 800aa9c:	6862      	ldr	r2, [r4, #4]
 800aa9e:	3a01      	subs	r2, #1
 800aaa0:	2a00      	cmp	r2, #0
 800aaa2:	6062      	str	r2, [r4, #4]
 800aaa4:	dd02      	ble.n	800aaac <__ssvfiscanf_r+0x240>
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	e787      	b.n	800a9bc <__ssvfiscanf_r+0x150>
 800aaac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aaae:	4621      	mov	r1, r4
 800aab0:	4630      	mov	r0, r6
 800aab2:	4798      	blx	r3
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d081      	beq.n	800a9bc <__ssvfiscanf_r+0x150>
 800aab8:	e7b6      	b.n	800aa28 <__ssvfiscanf_r+0x1bc>
 800aaba:	2b04      	cmp	r3, #4
 800aabc:	dc06      	bgt.n	800aacc <__ssvfiscanf_r+0x260>
 800aabe:	466b      	mov	r3, sp
 800aac0:	4622      	mov	r2, r4
 800aac2:	a941      	add	r1, sp, #260	; 0x104
 800aac4:	4630      	mov	r0, r6
 800aac6:	f000 f885 	bl	800abd4 <_scanf_i>
 800aaca:	e788      	b.n	800a9de <__ssvfiscanf_r+0x172>
 800aacc:	4b0e      	ldr	r3, [pc, #56]	; (800ab08 <__ssvfiscanf_r+0x29c>)
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f43f aefc 	beq.w	800a8cc <__ssvfiscanf_r+0x60>
 800aad4:	466b      	mov	r3, sp
 800aad6:	4622      	mov	r2, r4
 800aad8:	a941      	add	r1, sp, #260	; 0x104
 800aada:	4630      	mov	r0, r6
 800aadc:	f7fc fdb0 	bl	8007640 <_scanf_float>
 800aae0:	e77d      	b.n	800a9de <__ssvfiscanf_r+0x172>
 800aae2:	89a3      	ldrh	r3, [r4, #12]
 800aae4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aae8:	bf18      	it	ne
 800aaea:	f04f 30ff 	movne.w	r0, #4294967295
 800aaee:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aaf8:	e7f9      	b.n	800aaee <__ssvfiscanf_r+0x282>
 800aafa:	bf00      	nop
 800aafc:	0800a7b9 	.word	0x0800a7b9
 800ab00:	0800a833 	.word	0x0800a833
 800ab04:	0800b2da 	.word	0x0800b2da
 800ab08:	08007641 	.word	0x08007641

0800ab0c <_scanf_chars>:
 800ab0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab10:	4615      	mov	r5, r2
 800ab12:	688a      	ldr	r2, [r1, #8]
 800ab14:	4680      	mov	r8, r0
 800ab16:	460c      	mov	r4, r1
 800ab18:	b932      	cbnz	r2, 800ab28 <_scanf_chars+0x1c>
 800ab1a:	698a      	ldr	r2, [r1, #24]
 800ab1c:	2a00      	cmp	r2, #0
 800ab1e:	bf14      	ite	ne
 800ab20:	f04f 32ff 	movne.w	r2, #4294967295
 800ab24:	2201      	moveq	r2, #1
 800ab26:	608a      	str	r2, [r1, #8]
 800ab28:	6822      	ldr	r2, [r4, #0]
 800ab2a:	06d1      	lsls	r1, r2, #27
 800ab2c:	bf5f      	itttt	pl
 800ab2e:	681a      	ldrpl	r2, [r3, #0]
 800ab30:	1d11      	addpl	r1, r2, #4
 800ab32:	6019      	strpl	r1, [r3, #0]
 800ab34:	6817      	ldrpl	r7, [r2, #0]
 800ab36:	2600      	movs	r6, #0
 800ab38:	69a3      	ldr	r3, [r4, #24]
 800ab3a:	b1db      	cbz	r3, 800ab74 <_scanf_chars+0x68>
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d107      	bne.n	800ab50 <_scanf_chars+0x44>
 800ab40:	682b      	ldr	r3, [r5, #0]
 800ab42:	6962      	ldr	r2, [r4, #20]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	5cd3      	ldrb	r3, [r2, r3]
 800ab48:	b9a3      	cbnz	r3, 800ab74 <_scanf_chars+0x68>
 800ab4a:	2e00      	cmp	r6, #0
 800ab4c:	d132      	bne.n	800abb4 <_scanf_chars+0xa8>
 800ab4e:	e006      	b.n	800ab5e <_scanf_chars+0x52>
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d007      	beq.n	800ab64 <_scanf_chars+0x58>
 800ab54:	2e00      	cmp	r6, #0
 800ab56:	d12d      	bne.n	800abb4 <_scanf_chars+0xa8>
 800ab58:	69a3      	ldr	r3, [r4, #24]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d12a      	bne.n	800abb4 <_scanf_chars+0xa8>
 800ab5e:	2001      	movs	r0, #1
 800ab60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab64:	f7fe ffde 	bl	8009b24 <__locale_ctype_ptr>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	4418      	add	r0, r3
 800ab6e:	7843      	ldrb	r3, [r0, #1]
 800ab70:	071b      	lsls	r3, r3, #28
 800ab72:	d4ef      	bmi.n	800ab54 <_scanf_chars+0x48>
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	06da      	lsls	r2, r3, #27
 800ab78:	bf5e      	ittt	pl
 800ab7a:	682b      	ldrpl	r3, [r5, #0]
 800ab7c:	781b      	ldrbpl	r3, [r3, #0]
 800ab7e:	703b      	strbpl	r3, [r7, #0]
 800ab80:	682a      	ldr	r2, [r5, #0]
 800ab82:	686b      	ldr	r3, [r5, #4]
 800ab84:	f102 0201 	add.w	r2, r2, #1
 800ab88:	602a      	str	r2, [r5, #0]
 800ab8a:	68a2      	ldr	r2, [r4, #8]
 800ab8c:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab90:	f102 32ff 	add.w	r2, r2, #4294967295
 800ab94:	606b      	str	r3, [r5, #4]
 800ab96:	f106 0601 	add.w	r6, r6, #1
 800ab9a:	bf58      	it	pl
 800ab9c:	3701      	addpl	r7, #1
 800ab9e:	60a2      	str	r2, [r4, #8]
 800aba0:	b142      	cbz	r2, 800abb4 <_scanf_chars+0xa8>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	dcc8      	bgt.n	800ab38 <_scanf_chars+0x2c>
 800aba6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abaa:	4629      	mov	r1, r5
 800abac:	4640      	mov	r0, r8
 800abae:	4798      	blx	r3
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d0c1      	beq.n	800ab38 <_scanf_chars+0x2c>
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	f013 0310 	ands.w	r3, r3, #16
 800abba:	d105      	bne.n	800abc8 <_scanf_chars+0xbc>
 800abbc:	68e2      	ldr	r2, [r4, #12]
 800abbe:	3201      	adds	r2, #1
 800abc0:	60e2      	str	r2, [r4, #12]
 800abc2:	69a2      	ldr	r2, [r4, #24]
 800abc4:	b102      	cbz	r2, 800abc8 <_scanf_chars+0xbc>
 800abc6:	703b      	strb	r3, [r7, #0]
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	441e      	add	r6, r3
 800abcc:	6126      	str	r6, [r4, #16]
 800abce:	2000      	movs	r0, #0
 800abd0:	e7c6      	b.n	800ab60 <_scanf_chars+0x54>
	...

0800abd4 <_scanf_i>:
 800abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd8:	469a      	mov	sl, r3
 800abda:	4b74      	ldr	r3, [pc, #464]	; (800adac <_scanf_i+0x1d8>)
 800abdc:	460c      	mov	r4, r1
 800abde:	4683      	mov	fp, r0
 800abe0:	4616      	mov	r6, r2
 800abe2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800abe6:	b087      	sub	sp, #28
 800abe8:	ab03      	add	r3, sp, #12
 800abea:	68a7      	ldr	r7, [r4, #8]
 800abec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800abf0:	4b6f      	ldr	r3, [pc, #444]	; (800adb0 <_scanf_i+0x1dc>)
 800abf2:	69a1      	ldr	r1, [r4, #24]
 800abf4:	4a6f      	ldr	r2, [pc, #444]	; (800adb4 <_scanf_i+0x1e0>)
 800abf6:	2903      	cmp	r1, #3
 800abf8:	bf08      	it	eq
 800abfa:	461a      	moveq	r2, r3
 800abfc:	1e7b      	subs	r3, r7, #1
 800abfe:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800ac02:	bf84      	itt	hi
 800ac04:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac08:	60a3      	strhi	r3, [r4, #8]
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	9200      	str	r2, [sp, #0]
 800ac0e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ac12:	bf88      	it	hi
 800ac14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ac18:	f104 091c 	add.w	r9, r4, #28
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	bf8c      	ite	hi
 800ac20:	197f      	addhi	r7, r7, r5
 800ac22:	2700      	movls	r7, #0
 800ac24:	464b      	mov	r3, r9
 800ac26:	f04f 0800 	mov.w	r8, #0
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	6831      	ldr	r1, [r6, #0]
 800ac2e:	ab03      	add	r3, sp, #12
 800ac30:	2202      	movs	r2, #2
 800ac32:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ac36:	7809      	ldrb	r1, [r1, #0]
 800ac38:	f7f5 faf2 	bl	8000220 <memchr>
 800ac3c:	9b01      	ldr	r3, [sp, #4]
 800ac3e:	b330      	cbz	r0, 800ac8e <_scanf_i+0xba>
 800ac40:	f1b8 0f01 	cmp.w	r8, #1
 800ac44:	d15a      	bne.n	800acfc <_scanf_i+0x128>
 800ac46:	6862      	ldr	r2, [r4, #4]
 800ac48:	b92a      	cbnz	r2, 800ac56 <_scanf_i+0x82>
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	2108      	movs	r1, #8
 800ac4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac52:	6061      	str	r1, [r4, #4]
 800ac54:	6022      	str	r2, [r4, #0]
 800ac56:	6822      	ldr	r2, [r4, #0]
 800ac58:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ac5c:	6022      	str	r2, [r4, #0]
 800ac5e:	68a2      	ldr	r2, [r4, #8]
 800ac60:	1e51      	subs	r1, r2, #1
 800ac62:	60a1      	str	r1, [r4, #8]
 800ac64:	b19a      	cbz	r2, 800ac8e <_scanf_i+0xba>
 800ac66:	6832      	ldr	r2, [r6, #0]
 800ac68:	1c51      	adds	r1, r2, #1
 800ac6a:	6031      	str	r1, [r6, #0]
 800ac6c:	7812      	ldrb	r2, [r2, #0]
 800ac6e:	701a      	strb	r2, [r3, #0]
 800ac70:	1c5d      	adds	r5, r3, #1
 800ac72:	6873      	ldr	r3, [r6, #4]
 800ac74:	3b01      	subs	r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	6073      	str	r3, [r6, #4]
 800ac7a:	dc07      	bgt.n	800ac8c <_scanf_i+0xb8>
 800ac7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac80:	4631      	mov	r1, r6
 800ac82:	4658      	mov	r0, fp
 800ac84:	4798      	blx	r3
 800ac86:	2800      	cmp	r0, #0
 800ac88:	f040 8086 	bne.w	800ad98 <_scanf_i+0x1c4>
 800ac8c:	462b      	mov	r3, r5
 800ac8e:	f108 0801 	add.w	r8, r8, #1
 800ac92:	f1b8 0f03 	cmp.w	r8, #3
 800ac96:	d1c8      	bne.n	800ac2a <_scanf_i+0x56>
 800ac98:	6862      	ldr	r2, [r4, #4]
 800ac9a:	b90a      	cbnz	r2, 800aca0 <_scanf_i+0xcc>
 800ac9c:	220a      	movs	r2, #10
 800ac9e:	6062      	str	r2, [r4, #4]
 800aca0:	6862      	ldr	r2, [r4, #4]
 800aca2:	4945      	ldr	r1, [pc, #276]	; (800adb8 <_scanf_i+0x1e4>)
 800aca4:	6960      	ldr	r0, [r4, #20]
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	1a89      	subs	r1, r1, r2
 800acaa:	f000 f897 	bl	800addc <__sccl>
 800acae:	9b01      	ldr	r3, [sp, #4]
 800acb0:	f04f 0800 	mov.w	r8, #0
 800acb4:	461d      	mov	r5, r3
 800acb6:	68a3      	ldr	r3, [r4, #8]
 800acb8:	6822      	ldr	r2, [r4, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d03a      	beq.n	800ad34 <_scanf_i+0x160>
 800acbe:	6831      	ldr	r1, [r6, #0]
 800acc0:	6960      	ldr	r0, [r4, #20]
 800acc2:	f891 c000 	ldrb.w	ip, [r1]
 800acc6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800acca:	2800      	cmp	r0, #0
 800accc:	d032      	beq.n	800ad34 <_scanf_i+0x160>
 800acce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800acd2:	d121      	bne.n	800ad18 <_scanf_i+0x144>
 800acd4:	0510      	lsls	r0, r2, #20
 800acd6:	d51f      	bpl.n	800ad18 <_scanf_i+0x144>
 800acd8:	f108 0801 	add.w	r8, r8, #1
 800acdc:	b117      	cbz	r7, 800ace4 <_scanf_i+0x110>
 800acde:	3301      	adds	r3, #1
 800ace0:	3f01      	subs	r7, #1
 800ace2:	60a3      	str	r3, [r4, #8]
 800ace4:	6873      	ldr	r3, [r6, #4]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	6073      	str	r3, [r6, #4]
 800acec:	dd1b      	ble.n	800ad26 <_scanf_i+0x152>
 800acee:	6833      	ldr	r3, [r6, #0]
 800acf0:	3301      	adds	r3, #1
 800acf2:	6033      	str	r3, [r6, #0]
 800acf4:	68a3      	ldr	r3, [r4, #8]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	60a3      	str	r3, [r4, #8]
 800acfa:	e7dc      	b.n	800acb6 <_scanf_i+0xe2>
 800acfc:	f1b8 0f02 	cmp.w	r8, #2
 800ad00:	d1ad      	bne.n	800ac5e <_scanf_i+0x8a>
 800ad02:	6822      	ldr	r2, [r4, #0]
 800ad04:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ad08:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ad0c:	d1bf      	bne.n	800ac8e <_scanf_i+0xba>
 800ad0e:	2110      	movs	r1, #16
 800ad10:	6061      	str	r1, [r4, #4]
 800ad12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad16:	e7a1      	b.n	800ac5c <_scanf_i+0x88>
 800ad18:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ad1c:	6022      	str	r2, [r4, #0]
 800ad1e:	780b      	ldrb	r3, [r1, #0]
 800ad20:	702b      	strb	r3, [r5, #0]
 800ad22:	3501      	adds	r5, #1
 800ad24:	e7de      	b.n	800ace4 <_scanf_i+0x110>
 800ad26:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4658      	mov	r0, fp
 800ad2e:	4798      	blx	r3
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d0df      	beq.n	800acf4 <_scanf_i+0x120>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	05d9      	lsls	r1, r3, #23
 800ad38:	d50c      	bpl.n	800ad54 <_scanf_i+0x180>
 800ad3a:	454d      	cmp	r5, r9
 800ad3c:	d908      	bls.n	800ad50 <_scanf_i+0x17c>
 800ad3e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ad42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad46:	4632      	mov	r2, r6
 800ad48:	4658      	mov	r0, fp
 800ad4a:	4798      	blx	r3
 800ad4c:	1e6f      	subs	r7, r5, #1
 800ad4e:	463d      	mov	r5, r7
 800ad50:	454d      	cmp	r5, r9
 800ad52:	d029      	beq.n	800ada8 <_scanf_i+0x1d4>
 800ad54:	6822      	ldr	r2, [r4, #0]
 800ad56:	f012 0210 	ands.w	r2, r2, #16
 800ad5a:	d113      	bne.n	800ad84 <_scanf_i+0x1b0>
 800ad5c:	702a      	strb	r2, [r5, #0]
 800ad5e:	6863      	ldr	r3, [r4, #4]
 800ad60:	9e00      	ldr	r6, [sp, #0]
 800ad62:	4649      	mov	r1, r9
 800ad64:	4658      	mov	r0, fp
 800ad66:	47b0      	blx	r6
 800ad68:	f8da 3000 	ldr.w	r3, [sl]
 800ad6c:	6821      	ldr	r1, [r4, #0]
 800ad6e:	1d1a      	adds	r2, r3, #4
 800ad70:	f8ca 2000 	str.w	r2, [sl]
 800ad74:	f011 0f20 	tst.w	r1, #32
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	d010      	beq.n	800ad9e <_scanf_i+0x1ca>
 800ad7c:	6018      	str	r0, [r3, #0]
 800ad7e:	68e3      	ldr	r3, [r4, #12]
 800ad80:	3301      	adds	r3, #1
 800ad82:	60e3      	str	r3, [r4, #12]
 800ad84:	eba5 0509 	sub.w	r5, r5, r9
 800ad88:	44a8      	add	r8, r5
 800ad8a:	6925      	ldr	r5, [r4, #16]
 800ad8c:	4445      	add	r5, r8
 800ad8e:	6125      	str	r5, [r4, #16]
 800ad90:	2000      	movs	r0, #0
 800ad92:	b007      	add	sp, #28
 800ad94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad98:	f04f 0800 	mov.w	r8, #0
 800ad9c:	e7ca      	b.n	800ad34 <_scanf_i+0x160>
 800ad9e:	07ca      	lsls	r2, r1, #31
 800ada0:	bf4c      	ite	mi
 800ada2:	8018      	strhmi	r0, [r3, #0]
 800ada4:	6018      	strpl	r0, [r3, #0]
 800ada6:	e7ea      	b.n	800ad7e <_scanf_i+0x1aa>
 800ada8:	2001      	movs	r0, #1
 800adaa:	e7f2      	b.n	800ad92 <_scanf_i+0x1be>
 800adac:	0800b110 	.word	0x0800b110
 800adb0:	080087e1 	.word	0x080087e1
 800adb4:	0800af59 	.word	0x0800af59
 800adb8:	0800b2f5 	.word	0x0800b2f5

0800adbc <_sbrk_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4c06      	ldr	r4, [pc, #24]	; (800add8 <_sbrk_r+0x1c>)
 800adc0:	2300      	movs	r3, #0
 800adc2:	4605      	mov	r5, r0
 800adc4:	4608      	mov	r0, r1
 800adc6:	6023      	str	r3, [r4, #0]
 800adc8:	f7f7 f9b4 	bl	8002134 <_sbrk>
 800adcc:	1c43      	adds	r3, r0, #1
 800adce:	d102      	bne.n	800add6 <_sbrk_r+0x1a>
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	b103      	cbz	r3, 800add6 <_sbrk_r+0x1a>
 800add4:	602b      	str	r3, [r5, #0]
 800add6:	bd38      	pop	{r3, r4, r5, pc}
 800add8:	200004a0 	.word	0x200004a0

0800addc <__sccl>:
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	780b      	ldrb	r3, [r1, #0]
 800ade0:	2b5e      	cmp	r3, #94	; 0x5e
 800ade2:	bf13      	iteet	ne
 800ade4:	1c4a      	addne	r2, r1, #1
 800ade6:	1c8a      	addeq	r2, r1, #2
 800ade8:	784b      	ldrbeq	r3, [r1, #1]
 800adea:	2100      	movne	r1, #0
 800adec:	bf08      	it	eq
 800adee:	2101      	moveq	r1, #1
 800adf0:	1e44      	subs	r4, r0, #1
 800adf2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800adf6:	f804 1f01 	strb.w	r1, [r4, #1]!
 800adfa:	42ac      	cmp	r4, r5
 800adfc:	d1fb      	bne.n	800adf6 <__sccl+0x1a>
 800adfe:	b913      	cbnz	r3, 800ae06 <__sccl+0x2a>
 800ae00:	3a01      	subs	r2, #1
 800ae02:	4610      	mov	r0, r2
 800ae04:	bd70      	pop	{r4, r5, r6, pc}
 800ae06:	f081 0401 	eor.w	r4, r1, #1
 800ae0a:	54c4      	strb	r4, [r0, r3]
 800ae0c:	1c51      	adds	r1, r2, #1
 800ae0e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800ae12:	2d2d      	cmp	r5, #45	; 0x2d
 800ae14:	f101 36ff 	add.w	r6, r1, #4294967295
 800ae18:	460a      	mov	r2, r1
 800ae1a:	d006      	beq.n	800ae2a <__sccl+0x4e>
 800ae1c:	2d5d      	cmp	r5, #93	; 0x5d
 800ae1e:	d0f0      	beq.n	800ae02 <__sccl+0x26>
 800ae20:	b90d      	cbnz	r5, 800ae26 <__sccl+0x4a>
 800ae22:	4632      	mov	r2, r6
 800ae24:	e7ed      	b.n	800ae02 <__sccl+0x26>
 800ae26:	462b      	mov	r3, r5
 800ae28:	e7ef      	b.n	800ae0a <__sccl+0x2e>
 800ae2a:	780e      	ldrb	r6, [r1, #0]
 800ae2c:	2e5d      	cmp	r6, #93	; 0x5d
 800ae2e:	d0fa      	beq.n	800ae26 <__sccl+0x4a>
 800ae30:	42b3      	cmp	r3, r6
 800ae32:	dcf8      	bgt.n	800ae26 <__sccl+0x4a>
 800ae34:	3301      	adds	r3, #1
 800ae36:	429e      	cmp	r6, r3
 800ae38:	54c4      	strb	r4, [r0, r3]
 800ae3a:	dcfb      	bgt.n	800ae34 <__sccl+0x58>
 800ae3c:	3102      	adds	r1, #2
 800ae3e:	e7e6      	b.n	800ae0e <__sccl+0x32>

0800ae40 <strncmp>:
 800ae40:	b510      	push	{r4, lr}
 800ae42:	b16a      	cbz	r2, 800ae60 <strncmp+0x20>
 800ae44:	3901      	subs	r1, #1
 800ae46:	1884      	adds	r4, r0, r2
 800ae48:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ae4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d103      	bne.n	800ae5c <strncmp+0x1c>
 800ae54:	42a0      	cmp	r0, r4
 800ae56:	d001      	beq.n	800ae5c <strncmp+0x1c>
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1f5      	bne.n	800ae48 <strncmp+0x8>
 800ae5c:	1a98      	subs	r0, r3, r2
 800ae5e:	bd10      	pop	{r4, pc}
 800ae60:	4610      	mov	r0, r2
 800ae62:	e7fc      	b.n	800ae5e <strncmp+0x1e>

0800ae64 <_strtoul_l.isra.0>:
 800ae64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae68:	4680      	mov	r8, r0
 800ae6a:	4689      	mov	r9, r1
 800ae6c:	4692      	mov	sl, r2
 800ae6e:	461e      	mov	r6, r3
 800ae70:	460f      	mov	r7, r1
 800ae72:	463d      	mov	r5, r7
 800ae74:	9808      	ldr	r0, [sp, #32]
 800ae76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae7a:	f7fe fe4f 	bl	8009b1c <__locale_ctype_ptr_l>
 800ae7e:	4420      	add	r0, r4
 800ae80:	7843      	ldrb	r3, [r0, #1]
 800ae82:	f013 0308 	ands.w	r3, r3, #8
 800ae86:	d130      	bne.n	800aeea <_strtoul_l.isra.0+0x86>
 800ae88:	2c2d      	cmp	r4, #45	; 0x2d
 800ae8a:	d130      	bne.n	800aeee <_strtoul_l.isra.0+0x8a>
 800ae8c:	787c      	ldrb	r4, [r7, #1]
 800ae8e:	1cbd      	adds	r5, r7, #2
 800ae90:	2101      	movs	r1, #1
 800ae92:	2e00      	cmp	r6, #0
 800ae94:	d05c      	beq.n	800af50 <_strtoul_l.isra.0+0xec>
 800ae96:	2e10      	cmp	r6, #16
 800ae98:	d109      	bne.n	800aeae <_strtoul_l.isra.0+0x4a>
 800ae9a:	2c30      	cmp	r4, #48	; 0x30
 800ae9c:	d107      	bne.n	800aeae <_strtoul_l.isra.0+0x4a>
 800ae9e:	782b      	ldrb	r3, [r5, #0]
 800aea0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aea4:	2b58      	cmp	r3, #88	; 0x58
 800aea6:	d14e      	bne.n	800af46 <_strtoul_l.isra.0+0xe2>
 800aea8:	786c      	ldrb	r4, [r5, #1]
 800aeaa:	2610      	movs	r6, #16
 800aeac:	3502      	adds	r5, #2
 800aeae:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	fbb2 f2f6 	udiv	r2, r2, r6
 800aeb8:	fb06 fc02 	mul.w	ip, r6, r2
 800aebc:	ea6f 0c0c 	mvn.w	ip, ip
 800aec0:	4618      	mov	r0, r3
 800aec2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800aec6:	2f09      	cmp	r7, #9
 800aec8:	d817      	bhi.n	800aefa <_strtoul_l.isra.0+0x96>
 800aeca:	463c      	mov	r4, r7
 800aecc:	42a6      	cmp	r6, r4
 800aece:	dd23      	ble.n	800af18 <_strtoul_l.isra.0+0xb4>
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	db1e      	blt.n	800af12 <_strtoul_l.isra.0+0xae>
 800aed4:	4282      	cmp	r2, r0
 800aed6:	d31c      	bcc.n	800af12 <_strtoul_l.isra.0+0xae>
 800aed8:	d101      	bne.n	800aede <_strtoul_l.isra.0+0x7a>
 800aeda:	45a4      	cmp	ip, r4
 800aedc:	db19      	blt.n	800af12 <_strtoul_l.isra.0+0xae>
 800aede:	fb00 4006 	mla	r0, r0, r6, r4
 800aee2:	2301      	movs	r3, #1
 800aee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aee8:	e7eb      	b.n	800aec2 <_strtoul_l.isra.0+0x5e>
 800aeea:	462f      	mov	r7, r5
 800aeec:	e7c1      	b.n	800ae72 <_strtoul_l.isra.0+0xe>
 800aeee:	2c2b      	cmp	r4, #43	; 0x2b
 800aef0:	bf04      	itt	eq
 800aef2:	1cbd      	addeq	r5, r7, #2
 800aef4:	787c      	ldrbeq	r4, [r7, #1]
 800aef6:	4619      	mov	r1, r3
 800aef8:	e7cb      	b.n	800ae92 <_strtoul_l.isra.0+0x2e>
 800aefa:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800aefe:	2f19      	cmp	r7, #25
 800af00:	d801      	bhi.n	800af06 <_strtoul_l.isra.0+0xa2>
 800af02:	3c37      	subs	r4, #55	; 0x37
 800af04:	e7e2      	b.n	800aecc <_strtoul_l.isra.0+0x68>
 800af06:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800af0a:	2f19      	cmp	r7, #25
 800af0c:	d804      	bhi.n	800af18 <_strtoul_l.isra.0+0xb4>
 800af0e:	3c57      	subs	r4, #87	; 0x57
 800af10:	e7dc      	b.n	800aecc <_strtoul_l.isra.0+0x68>
 800af12:	f04f 33ff 	mov.w	r3, #4294967295
 800af16:	e7e5      	b.n	800aee4 <_strtoul_l.isra.0+0x80>
 800af18:	2b00      	cmp	r3, #0
 800af1a:	da09      	bge.n	800af30 <_strtoul_l.isra.0+0xcc>
 800af1c:	2322      	movs	r3, #34	; 0x22
 800af1e:	f8c8 3000 	str.w	r3, [r8]
 800af22:	f04f 30ff 	mov.w	r0, #4294967295
 800af26:	f1ba 0f00 	cmp.w	sl, #0
 800af2a:	d107      	bne.n	800af3c <_strtoul_l.isra.0+0xd8>
 800af2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af30:	b101      	cbz	r1, 800af34 <_strtoul_l.isra.0+0xd0>
 800af32:	4240      	negs	r0, r0
 800af34:	f1ba 0f00 	cmp.w	sl, #0
 800af38:	d0f8      	beq.n	800af2c <_strtoul_l.isra.0+0xc8>
 800af3a:	b10b      	cbz	r3, 800af40 <_strtoul_l.isra.0+0xdc>
 800af3c:	f105 39ff 	add.w	r9, r5, #4294967295
 800af40:	f8ca 9000 	str.w	r9, [sl]
 800af44:	e7f2      	b.n	800af2c <_strtoul_l.isra.0+0xc8>
 800af46:	2430      	movs	r4, #48	; 0x30
 800af48:	2e00      	cmp	r6, #0
 800af4a:	d1b0      	bne.n	800aeae <_strtoul_l.isra.0+0x4a>
 800af4c:	2608      	movs	r6, #8
 800af4e:	e7ae      	b.n	800aeae <_strtoul_l.isra.0+0x4a>
 800af50:	2c30      	cmp	r4, #48	; 0x30
 800af52:	d0a4      	beq.n	800ae9e <_strtoul_l.isra.0+0x3a>
 800af54:	260a      	movs	r6, #10
 800af56:	e7aa      	b.n	800aeae <_strtoul_l.isra.0+0x4a>

0800af58 <_strtoul_r>:
 800af58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af5a:	4c06      	ldr	r4, [pc, #24]	; (800af74 <_strtoul_r+0x1c>)
 800af5c:	4d06      	ldr	r5, [pc, #24]	; (800af78 <_strtoul_r+0x20>)
 800af5e:	6824      	ldr	r4, [r4, #0]
 800af60:	6a24      	ldr	r4, [r4, #32]
 800af62:	2c00      	cmp	r4, #0
 800af64:	bf08      	it	eq
 800af66:	462c      	moveq	r4, r5
 800af68:	9400      	str	r4, [sp, #0]
 800af6a:	f7ff ff7b 	bl	800ae64 <_strtoul_l.isra.0>
 800af6e:	b003      	add	sp, #12
 800af70:	bd30      	pop	{r4, r5, pc}
 800af72:	bf00      	nop
 800af74:	20000050 	.word	0x20000050
 800af78:	200000b4 	.word	0x200000b4

0800af7c <__submore>:
 800af7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af80:	460c      	mov	r4, r1
 800af82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800af84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af88:	4299      	cmp	r1, r3
 800af8a:	d11d      	bne.n	800afc8 <__submore+0x4c>
 800af8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800af90:	f7ff fa66 	bl	800a460 <_malloc_r>
 800af94:	b918      	cbnz	r0, 800af9e <__submore+0x22>
 800af96:	f04f 30ff 	mov.w	r0, #4294967295
 800af9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afa2:	63a3      	str	r3, [r4, #56]	; 0x38
 800afa4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800afa8:	6360      	str	r0, [r4, #52]	; 0x34
 800afaa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800afae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800afb2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800afb6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800afba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800afbe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800afc2:	6020      	str	r0, [r4, #0]
 800afc4:	2000      	movs	r0, #0
 800afc6:	e7e8      	b.n	800af9a <__submore+0x1e>
 800afc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800afca:	0077      	lsls	r7, r6, #1
 800afcc:	463a      	mov	r2, r7
 800afce:	f000 f837 	bl	800b040 <_realloc_r>
 800afd2:	4605      	mov	r5, r0
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d0de      	beq.n	800af96 <__submore+0x1a>
 800afd8:	eb00 0806 	add.w	r8, r0, r6
 800afdc:	4601      	mov	r1, r0
 800afde:	4632      	mov	r2, r6
 800afe0:	4640      	mov	r0, r8
 800afe2:	f7fe fdd7 	bl	8009b94 <memcpy>
 800afe6:	f8c4 8000 	str.w	r8, [r4]
 800afea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800afee:	e7e9      	b.n	800afc4 <__submore+0x48>

0800aff0 <__ascii_wctomb>:
 800aff0:	b149      	cbz	r1, 800b006 <__ascii_wctomb+0x16>
 800aff2:	2aff      	cmp	r2, #255	; 0xff
 800aff4:	bf85      	ittet	hi
 800aff6:	238a      	movhi	r3, #138	; 0x8a
 800aff8:	6003      	strhi	r3, [r0, #0]
 800affa:	700a      	strbls	r2, [r1, #0]
 800affc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b000:	bf98      	it	ls
 800b002:	2001      	movls	r0, #1
 800b004:	4770      	bx	lr
 800b006:	4608      	mov	r0, r1
 800b008:	4770      	bx	lr

0800b00a <memmove>:
 800b00a:	4288      	cmp	r0, r1
 800b00c:	b510      	push	{r4, lr}
 800b00e:	eb01 0302 	add.w	r3, r1, r2
 800b012:	d807      	bhi.n	800b024 <memmove+0x1a>
 800b014:	1e42      	subs	r2, r0, #1
 800b016:	4299      	cmp	r1, r3
 800b018:	d00a      	beq.n	800b030 <memmove+0x26>
 800b01a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b01e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b022:	e7f8      	b.n	800b016 <memmove+0xc>
 800b024:	4283      	cmp	r3, r0
 800b026:	d9f5      	bls.n	800b014 <memmove+0xa>
 800b028:	1881      	adds	r1, r0, r2
 800b02a:	1ad2      	subs	r2, r2, r3
 800b02c:	42d3      	cmn	r3, r2
 800b02e:	d100      	bne.n	800b032 <memmove+0x28>
 800b030:	bd10      	pop	{r4, pc}
 800b032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b036:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b03a:	e7f7      	b.n	800b02c <memmove+0x22>

0800b03c <__malloc_lock>:
 800b03c:	4770      	bx	lr

0800b03e <__malloc_unlock>:
 800b03e:	4770      	bx	lr

0800b040 <_realloc_r>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	4607      	mov	r7, r0
 800b044:	4614      	mov	r4, r2
 800b046:	460e      	mov	r6, r1
 800b048:	b921      	cbnz	r1, 800b054 <_realloc_r+0x14>
 800b04a:	4611      	mov	r1, r2
 800b04c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b050:	f7ff ba06 	b.w	800a460 <_malloc_r>
 800b054:	b922      	cbnz	r2, 800b060 <_realloc_r+0x20>
 800b056:	f7ff f9b5 	bl	800a3c4 <_free_r>
 800b05a:	4625      	mov	r5, r4
 800b05c:	4628      	mov	r0, r5
 800b05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b060:	f000 f814 	bl	800b08c <_malloc_usable_size_r>
 800b064:	42a0      	cmp	r0, r4
 800b066:	d20f      	bcs.n	800b088 <_realloc_r+0x48>
 800b068:	4621      	mov	r1, r4
 800b06a:	4638      	mov	r0, r7
 800b06c:	f7ff f9f8 	bl	800a460 <_malloc_r>
 800b070:	4605      	mov	r5, r0
 800b072:	2800      	cmp	r0, #0
 800b074:	d0f2      	beq.n	800b05c <_realloc_r+0x1c>
 800b076:	4631      	mov	r1, r6
 800b078:	4622      	mov	r2, r4
 800b07a:	f7fe fd8b 	bl	8009b94 <memcpy>
 800b07e:	4631      	mov	r1, r6
 800b080:	4638      	mov	r0, r7
 800b082:	f7ff f99f 	bl	800a3c4 <_free_r>
 800b086:	e7e9      	b.n	800b05c <_realloc_r+0x1c>
 800b088:	4635      	mov	r5, r6
 800b08a:	e7e7      	b.n	800b05c <_realloc_r+0x1c>

0800b08c <_malloc_usable_size_r>:
 800b08c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b090:	1f18      	subs	r0, r3, #4
 800b092:	2b00      	cmp	r3, #0
 800b094:	bfbc      	itt	lt
 800b096:	580b      	ldrlt	r3, [r1, r0]
 800b098:	18c0      	addlt	r0, r0, r3
 800b09a:	4770      	bx	lr

0800b09c <_init>:
 800b09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09e:	bf00      	nop
 800b0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0a2:	bc08      	pop	{r3}
 800b0a4:	469e      	mov	lr, r3
 800b0a6:	4770      	bx	lr

0800b0a8 <_fini>:
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	bf00      	nop
 800b0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ae:	bc08      	pop	{r3}
 800b0b0:	469e      	mov	lr, r3
 800b0b2:	4770      	bx	lr
